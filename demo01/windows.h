// Hand-crafted header and API reference for all windows stuff I need (including DX12)
#pragma once
#include "types.h"

#define STDCALL __stdcall
#define STDCALLP STDCALL *
#define VHR(r) if ((r) < 0) { assert(0); }
#define COMRELEASE(o) if ((o)) { IUnknown_Release((o)); (o) = NULL; }

#define PM_REMOVE 0x0001
#define WM_QUIT 0x0012
#define WM_DESTROY 0x0002
#define WM_KEYDOWN 0x0100
#define VK_ESCAPE 0x001b
#define VK_CONTROL 0x11
#define WS_OVERLAPPED 0x00000000L
#define WS_VISIBLE 0x10000000L
#define WS_CAPTION 0x00C00000L
#define WS_SYSMENU 0x00080000L
#define WS_MINIMIZEBOX 0x00020000L
#define CW_USEDEFAULT ((u32)0x80000000)
#define MAKEINTRESOURCE(i) ((char *)((u64)((u16)(i))))
#define IDC_ARROW MAKEINTRESOURCE(32512)
#define PFD_TYPE_RGBA 0
#define PFD_DOUBLEBUFFER 0x00000001
#define PFD_DRAW_TO_WINDOW 0x00000004
#define PFD_SUPPORT_OPENGL 0x00000020
#define GENERIC_READ 0x80000000
#define OPEN_EXISTING 3
#define MEM_COMMIT 0x1000
#define MEM_RESERVE 0x2000
#define MEM_RELEASE 0x8000
#define PAGE_READWRITE 0x04
#define INFINITE 0xFFFFFFFF
#define STANDARD_RIGHTS_REQUIRED 0x000F0000L
#define SYNCHRONIZE 0x00100000L
#define EVENT_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE|0x3)

typedef struct POINT
{
    i32 x;
    i32 y;
} POINT;

typedef struct MSG
{
    void *hwnd;
    u32 message;
    u64 wParam;
    i64 lParam;
    u32 time;
    POINT pt;
} MSG;

typedef struct WNDCLASS
{
    u32 style;
    void *lpfnWndProc;
    i32 cbClsExtra;
    i32 cbWndExtra;
    void *hInstance;
    void *hIcon;
    void *hCursor;
    void *hbrBackground;
    const char *lpszMenuName;
    const char *lpszClassName;
} WNDCLASS;

typedef struct GUID
{
    u32 Data1;
    u16 Data2;
    u16 Data3;
    u8 Data4[8];
} GUID;

typedef struct SECURITY_ATTRIBUTES
{
    u32 nLength;
    void *lpSecurityDescriptor;
    i32 bInheritHandle;
} SECURITY_ATTRIBUTES;

typedef struct RECT
{
    i32 left;
    i32 top;
    i32 right;
    i32 bottom;
} RECT;

void (STDCALLP OutputDebugString)(const char *output_string);
i32 (STDCALLP QueryPerformanceCounter)(i64 *out_performance_count);
i32 (STDCALLP QueryPerformanceFrequency)(i64 *out_frequency);
void *(STDCALLP VirtualAlloc)(void *address, u64 size, u32 allocation_type, u32 protect);
i32 (STDCALLP VirtualFree)(void *address, u64 size, u32 free_type);
void (STDCALLP ExitProcess)(u32 exit_code);
void *(STDCALLP CreateFile)(const char *filename,
                            u32 desired_access,
                            u32 shared_mode,
                            SECURITY_ATTRIBUTES *security_attributes,
                            u32 creation_disposition,
                            u32 flags_and_attributes,
                            void *template_file);
i32 (STDCALLP ReadFile)(void *handle,
                        void *out_buffer,
                        u32 number_of_bytes_to_read,
                        u32 *out_number_of_bytes_read,
                        void *overlapped);
u32 (STDCALLP GetFileSize)(void *handle, u32 *out_file_size_high);
i32 (STDCALLP CloseHandle)(void *handle);
void *(STDCALLP GetModuleHandle)(const char *module_name);
void (STDCALLP Sleep)(u32 milliseconds);
void *(STDCALLP HeapAlloc)(void *heap, u32 flags, u64 bytes);
i32 (STDCALLP HeapFree)(void *heap, u32 flags, void *address);
void *(STDCALLP HeapReAlloc)(void *heap, u32 flags, void *address, u64 bytes);
void *(STDCALLP GetProcessHeap)(void);
void *(STDCALLP CreateEventEx)(SECURITY_ATTRIBUTES *event_attributes, const char *name, u32 flags, u32 desired_access);
u32 (STDCALLP WaitForSingleObject)(void *handle, u32 milliseconds);

i32 (STDCALLP PeekMessage)(MSG *out_msg, void *hwnd, u32 msg_filter_min, u32 msg_filter_max, u32 remove_msg);
i64 (STDCALLP DispatchMessage)(const MSG *msg);
void (STDCALLP PostQuitMessage)(i32 exit_code);
i64 (STDCALLP DefWindowProc)(void *hwnd, u32 msg, u64 wparam, i64 lparam);
void *(STDCALLP LoadCursor)(void *instance, const char *cursor_name);
i16 (STDCALLP RegisterClass)(const WNDCLASS *winclass);
void *(STDCALLP CreateWindowEx)(u32 exstyle,
                                const char *class_name,
                                const char *window_name,
                                u32 style,
                                i32 x,
                                i32 y,
                                i32 width,
                                i32 height,
                                void *parent,
                                void *menu,
                                void *instance,
                                void *param);
i32 (STDCALLP AdjustWindowRect)(RECT *out_rect, u32 style, i32 menu);
i32 (__cdecl *wsprintf)(char *out_string, const char *format, ...);
i32 (STDCALLP SetWindowText)(void *hwnd, const char *string);
i32 (STDCALLP SetProcessDPIAware)(void);
void *(STDCALLP GetDC)(void *hwnd);
i32 (STDCALLP MessageBox)(void *hwnd, const char *text, const char *caption, u32 type);
i32 (STDCALLP GetClientRect)(void *hwnd, RECT *out_rect);

i32 (STDCALLP CreateDXGIFactory1)(const GUID *guid, void **out_object);

typedef struct IUnknown IUnknown;
i32 (STDCALLP D3D12CreateDevice)(IUnknown *adapter, D3D_FEATURE_LEVEL min_feature_level, const GUID *guid, void **out_object);
i32 (STDCALLP D3D12GetDebugInterface)(const GUID *guid, void **out_object);

#define D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES 0xffffffff

typedef struct ID3DBlob ID3DBlob;
typedef struct ID3D12Object ID3D12Object;
typedef struct ID3D12DeviceChild ID3D12DeviceChild;
typedef struct ID3D12RootSignature ID3D12RootSignature;
typedef struct ID3D12Pageable ID3D12Pageable;
typedef struct ID3D12Heap ID3D12Heap;
typedef struct ID3D12Resource ID3D12Resource;
typedef struct ID3D12CommandAllocator ID3D12CommandAllocator;
typedef struct ID3D12Fence ID3D12Fence;
typedef struct ID3D12PipelineState ID3D12PipelineState;
typedef struct ID3D12DescriptorHeap ID3D12DescriptorHeap;
typedef struct ID3D12QueryHeap ID3D12QueryHeap;
typedef struct ID3D12CommandSignature ID3D12CommandSignature;
typedef struct ID3D12CommandList ID3D12CommandList;
typedef struct ID3D12GraphicsCommandList ID3D12GraphicsCommandList;
typedef struct ID3D12CommandQueue ID3D12CommandQueue;
typedef struct ID3D12Device ID3D12Device;
typedef struct ID3D12Debug ID3D12Debug;

typedef struct IDXGIOutput IDXGIOutput;
typedef struct IDXGIAdapter IDXGIAdapter;
typedef struct IDXGIAdapter1 IDXGIAdapter1;
typedef struct IDXGISwapChain IDXGISwapChain;
typedef struct IDXGISwapChain1 IDXGISwapChain1;
typedef struct IDXGISwapChain3 IDXGISwapChain3;
typedef struct IDXGIFactory4 IDXGIFactory4;

typedef enum DXGI_FORMAT
{
    DXGI_FORMAT_UNKNOWN = 0,
    DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
    DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
    DXGI_FORMAT_R32G32B32A32_UINT = 3,
    DXGI_FORMAT_R32G32B32A32_SINT = 4,
    DXGI_FORMAT_R32G32B32_TYPELESS = 5,
    DXGI_FORMAT_R32G32B32_FLOAT = 6,
    DXGI_FORMAT_R32G32B32_UINT = 7,
    DXGI_FORMAT_R32G32B32_SINT = 8,
    DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
    DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
    DXGI_FORMAT_R16G16B16A16_UNORM = 11,
    DXGI_FORMAT_R16G16B16A16_UINT = 12,
    DXGI_FORMAT_R16G16B16A16_SNORM = 13,
    DXGI_FORMAT_R16G16B16A16_SINT = 14,
    DXGI_FORMAT_R32G32_TYPELESS = 15,
    DXGI_FORMAT_R32G32_FLOAT = 16,
    DXGI_FORMAT_R32G32_UINT = 17,
    DXGI_FORMAT_R32G32_SINT = 18,
    DXGI_FORMAT_R32G8X24_TYPELESS = 19,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
    DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
    DXGI_FORMAT_R10G10B10A2_UNORM = 24,
    DXGI_FORMAT_R10G10B10A2_UINT = 25,
    DXGI_FORMAT_R11G11B10_FLOAT = 26,
    DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
    DXGI_FORMAT_R8G8B8A8_UNORM = 28,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
    DXGI_FORMAT_R8G8B8A8_UINT = 30,
    DXGI_FORMAT_R8G8B8A8_SNORM = 31,
    DXGI_FORMAT_R8G8B8A8_SINT = 32,
    DXGI_FORMAT_R16G16_TYPELESS = 33,
    DXGI_FORMAT_R16G16_FLOAT = 34,
    DXGI_FORMAT_R16G16_UNORM = 35,
    DXGI_FORMAT_R16G16_UINT = 36,
    DXGI_FORMAT_R16G16_SNORM = 37,
    DXGI_FORMAT_R16G16_SINT = 38,
    DXGI_FORMAT_R32_TYPELESS = 39,
    DXGI_FORMAT_D32_FLOAT = 40,
    DXGI_FORMAT_R32_FLOAT = 41,
    DXGI_FORMAT_R32_UINT = 42,
    DXGI_FORMAT_R32_SINT = 43,
    DXGI_FORMAT_R24G8_TYPELESS = 44,
    DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
    DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
    DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
    DXGI_FORMAT_R8G8_TYPELESS = 48,
    DXGI_FORMAT_R8G8_UNORM = 49,
    DXGI_FORMAT_R8G8_UINT = 50,
    DXGI_FORMAT_R8G8_SNORM = 51,
    DXGI_FORMAT_R8G8_SINT = 52,
    DXGI_FORMAT_R16_TYPELESS = 53,
    DXGI_FORMAT_R16_FLOAT = 54,
    DXGI_FORMAT_D16_UNORM = 55,
    DXGI_FORMAT_R16_UNORM = 56,
    DXGI_FORMAT_R16_UINT = 57,
    DXGI_FORMAT_R16_SNORM = 58,
    DXGI_FORMAT_R16_SINT = 59,
    DXGI_FORMAT_R8_TYPELESS = 60,
    DXGI_FORMAT_R8_UNORM = 61,
    DXGI_FORMAT_R8_UINT = 62,
    DXGI_FORMAT_R8_SNORM = 63,
    DXGI_FORMAT_R8_SINT = 64,
    DXGI_FORMAT_A8_UNORM = 65,
    DXGI_FORMAT_R1_UNORM = 66,
    DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
    DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
    DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
    DXGI_FORMAT_BC1_TYPELESS = 70,
    DXGI_FORMAT_BC1_UNORM = 71,
    DXGI_FORMAT_BC1_UNORM_SRGB = 72,
    DXGI_FORMAT_BC2_TYPELESS = 73,
    DXGI_FORMAT_BC2_UNORM = 74,
    DXGI_FORMAT_BC2_UNORM_SRGB = 75,
    DXGI_FORMAT_BC3_TYPELESS = 76,
    DXGI_FORMAT_BC3_UNORM = 77,
    DXGI_FORMAT_BC3_UNORM_SRGB = 78,
    DXGI_FORMAT_BC4_TYPELESS = 79,
    DXGI_FORMAT_BC4_UNORM = 80,
    DXGI_FORMAT_BC4_SNORM = 81,
    DXGI_FORMAT_BC5_TYPELESS = 82,
    DXGI_FORMAT_BC5_UNORM = 83,
    DXGI_FORMAT_BC5_SNORM = 84,
    DXGI_FORMAT_B5G6R5_UNORM = 85,
    DXGI_FORMAT_B5G5R5A1_UNORM = 86,
    DXGI_FORMAT_B8G8R8A8_UNORM = 87,
    DXGI_FORMAT_B8G8R8X8_UNORM = 88,
    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
    DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
    DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
    DXGI_FORMAT_BC6H_TYPELESS = 94,
    DXGI_FORMAT_BC6H_UF16 = 95,
    DXGI_FORMAT_BC6H_SF16 = 96,
    DXGI_FORMAT_BC7_TYPELESS = 97,
    DXGI_FORMAT_BC7_UNORM = 98,
    DXGI_FORMAT_BC7_UNORM_SRGB = 99,
    DXGI_FORMAT_AYUV = 100,
    DXGI_FORMAT_Y410 = 101,
    DXGI_FORMAT_Y416 = 102,
    DXGI_FORMAT_NV12 = 103,
    DXGI_FORMAT_P010 = 104,
    DXGI_FORMAT_P016 = 105,
    DXGI_FORMAT_420_OPAQUE = 106,
    DXGI_FORMAT_YUY2 = 107,
    DXGI_FORMAT_Y210 = 108,
    DXGI_FORMAT_Y216 = 109,
    DXGI_FORMAT_NV11 = 110,
    DXGI_FORMAT_AI44 = 111,
    DXGI_FORMAT_IA44 = 112,
    DXGI_FORMAT_P8 = 113,
    DXGI_FORMAT_A8P8 = 114,
    DXGI_FORMAT_B4G4R4A4_UNORM = 115,
    DXGI_FORMAT_P208 = 130,
    DXGI_FORMAT_V208 = 131,
    DXGI_FORMAT_V408 = 132,
    DXGI_FORMAT_FORCE_UINT = 0xffffffff
} DXGI_FORMAT;

typedef struct DXGI_SAMPLE_DESC
{
    u32 Count;
    u32 Quality;
} DXGI_SAMPLE_DESC;

typedef u64 D3D12_GPU_VIRTUAL_ADDRESS;

typedef enum D3D12_HEAP_TYPE
{
    D3D12_HEAP_TYPE_DEFAULT = 1,
    D3D12_HEAP_TYPE_UPLOAD = 2,
    D3D12_HEAP_TYPE_READBACK = 3,
    D3D12_HEAP_TYPE_CUSTOM = 4
} D3D12_HEAP_TYPE;

typedef enum D3D12_CPU_PAGE_PROPERTY
{
    D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0,
    D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1,
    D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2,
    D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3
} D3D12_CPU_PAGE_PROPERTY;

typedef enum D3D12_MEMORY_POOL
{
    D3D12_MEMORY_POOL_UNKNOWN = 0,
    D3D12_MEMORY_POOL_L0 = 1,
    D3D12_MEMORY_POOL_L1 = 2
} D3D12_MEMORY_POOL;

typedef struct D3D12_HEAP_PROPERTIES
{
    D3D12_HEAP_TYPE Type;
    D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
    D3D12_MEMORY_POOL MemoryPoolPreference;
    u32 CreationNodeMask;
    u32 VisibleNodeMask;
} D3D12_HEAP_PROPERTIES;

typedef enum D3D12_HEAP_FLAGS
{
    D3D12_HEAP_FLAG_NONE = 0,
    D3D12_HEAP_FLAG_SHARED = 0x1,
    D3D12_HEAP_FLAG_DENY_BUFFERS = 0x4,
    D3D12_HEAP_FLAG_ALLOW_DISPLAY = 0x8,
    D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 0x20,
    D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 0x40,
    D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 0x80,
    D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 0x100,
    D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0,
    D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 0xc0,
    D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 0x44,
    D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 0x84
} D3D12_HEAP_FLAGS;

typedef struct D3D12_HEAP_DESC
{
    u64 SizeInBytes;
    D3D12_HEAP_PROPERTIES Properties;
    u64 Alignment;
    D3D12_HEAP_FLAGS Flags;
} D3D12_HEAP_DESC;

typedef struct D3D12_RANGE
{
    u64 Begin;
    u64 End;
} D3D12_RANGE;

typedef enum D3D12_RESOURCE_DIMENSION
{
    D3D12_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D12_RESOURCE_DIMENSION_BUFFER = 1,
    D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4
} D3D12_RESOURCE_DIMENSION;

typedef enum D3D12_TEXTURE_LAYOUT
{
    D3D12_TEXTURE_LAYOUT_UNKNOWN = 0,
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1,
    D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2,
    D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3
} D3D12_TEXTURE_LAYOUT;

typedef enum D3D12_RESOURCE_FLAGS
{
    D3D12_RESOURCE_FLAG_NONE = 0,
    D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 0x1,
    D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 0x2,
    D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 0x4,
    D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 0x8,
    D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 0x10,
    D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 0x20
} D3D12_RESOURCE_FLAGS;

typedef struct D3D12_RESOURCE_DESC
{
    D3D12_RESOURCE_DIMENSION Dimension;
    u64 Alignment;
    u64 Width;
    u32 Height;
    u16 DepthOrArraySize;
    u16 MipLevels;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D12_TEXTURE_LAYOUT Layout;
    D3D12_RESOURCE_FLAGS Flags;
} D3D12_RESOURCE_DESC;

typedef struct D3D12_BOX
{
    u32 left;
    u32 top;
    u32 front;
    u32 right;
    u32 bottom;
    u32 back;
} D3D12_BOX;

typedef enum D3D12_DESCRIPTOR_HEAP_TYPE
{
    D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0,
    D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = (D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV + 1),
    D3D12_DESCRIPTOR_HEAP_TYPE_RTV = (D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER + 1),
    D3D12_DESCRIPTOR_HEAP_TYPE_DSV = (D3D12_DESCRIPTOR_HEAP_TYPE_RTV + 1),
    D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = (D3D12_DESCRIPTOR_HEAP_TYPE_DSV + 1)
} D3D12_DESCRIPTOR_HEAP_TYPE;

typedef enum D3D12_DESCRIPTOR_HEAP_FLAGS
{
    D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0,
    D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 0x1
} D3D12_DESCRIPTOR_HEAP_FLAGS;

typedef struct D3D12_DESCRIPTOR_HEAP_DESC
{
    D3D12_DESCRIPTOR_HEAP_TYPE Type;
    u32 NumDescriptors;
    D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
    u32 NodeMask;
} D3D12_DESCRIPTOR_HEAP_DESC;

/*
typedef struct D3D12_CPU_DESCRIPTOR_HANDLE {
    u64 ptr;
} D3D12_CPU_DESCRIPTOR_HANDLE;

typedef struct D3D12_GPU_DESCRIPTOR_HANDLE {
    u64 ptr;
} D3D12_GPU_DESCRIPTOR_HANDLE;
*/

typedef RECT D3D12_RECT;

typedef struct D3D12_DISCARD_REGION
{
    u32 NumRects;
    const D3D12_RECT *pRects;
    u32 FirstSubresource;
    u32 NumSubresources;
} D3D12_DISCARD_REGION;

typedef enum D3D12_COMMAND_LIST_TYPE
{
    D3D12_COMMAND_LIST_TYPE_DIRECT = 0,
    D3D12_COMMAND_LIST_TYPE_BUNDLE = 1,
    D3D12_COMMAND_LIST_TYPE_COMPUTE = 2,
    D3D12_COMMAND_LIST_TYPE_COPY = 3
} D3D12_COMMAND_LIST_TYPE;

typedef struct D3D12_SUBRESOURCE_FOOTPRINT
{
    DXGI_FORMAT Format;
    u32 Width;
    u32 Height;
    u32 Depth;
    u32 RowPitch;
} D3D12_SUBRESOURCE_FOOTPRINT;

typedef struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
{
    u64 Offset;
    D3D12_SUBRESOURCE_FOOTPRINT Footprint;
} D3D12_PLACED_SUBRESOURCE_FOOTPRINT;

typedef enum D3D12_TEXTURE_COPY_TYPE
{
    D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0,
    D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1
} D3D12_TEXTURE_COPY_TYPE;

typedef struct D3D12_TEXTURE_COPY_LOCATION
{
    ID3D12Resource *pResource;
    D3D12_TEXTURE_COPY_TYPE Type;
    union {
        D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;
        u32 SubresourceIndex;
    };
} D3D12_TEXTURE_COPY_LOCATION;

typedef struct D3D12_TILED_RESOURCE_COORDINATE
{
    u32 X;
    u32 Y;
    u32 Z;
    u32 Subresource;
} D3D12_TILED_RESOURCE_COORDINATE;

typedef struct D3D12_TILE_REGION_SIZE
{
    u32 NumTiles;
    i32 UseBox;
    u32 Width;
    u16 Height;
    u16 Depth;
} D3D12_TILE_REGION_SIZE;

typedef enum D3D12_TILE_RANGE_FLAGS
{
    D3D12_TILE_RANGE_FLAG_NONE = 0,
    D3D12_TILE_RANGE_FLAG_NULL = 1,
    D3D12_TILE_RANGE_FLAG_SKIP = 2,
    D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4
} D3D12_TILE_RANGE_FLAGS;

typedef struct D3D12_SUBRESOURCE_TILING
{
    u32 WidthInTiles;
    u16 HeightInTiles;
    u16 DepthInTiles;
    u32 StartTileIndexInOverallResource;
} D3D12_SUBRESOURCE_TILING;

typedef struct D3D12_TILE_SHAPE
{
    u32 WidthInTexels;
    u32 HeightInTexels;
    u32 DepthInTexels;
} D3D12_TILE_SHAPE;

typedef enum D3D12_TILE_MAPPING_FLAGS
{
    D3D12_TILE_MAPPING_FLAG_NONE = 0,
    D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 0x1
} D3D12_TILE_MAPPING_FLAGS;

typedef enum D3D12_TILE_COPY_FLAGS
{
    D3D12_TILE_COPY_FLAG_NONE = 0,
    D3D12_TILE_COPY_FLAG_NO_HAZARD = 0x1,
    D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 0x2,
    D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 0x4
} D3D12_TILE_COPY_FLAGS;

typedef enum D3D12_RESOURCE_STATES
{
    D3D12_RESOURCE_STATE_COMMON = 0,
    D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 0x1,
    D3D12_RESOURCE_STATE_INDEX_BUFFER = 0x2,
    D3D12_RESOURCE_STATE_RENDER_TARGET = 0x4,
    D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 0x8,
    D3D12_RESOURCE_STATE_DEPTH_WRITE = 0x10,
    D3D12_RESOURCE_STATE_DEPTH_READ = 0x20,
    D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 0x40,
    D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 0x80,
    D3D12_RESOURCE_STATE_STREAM_OUT = 0x100,
    D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 0x200,
    D3D12_RESOURCE_STATE_COPY_DEST = 0x400,
    D3D12_RESOURCE_STATE_COPY_SOURCE = 0x800,
    D3D12_RESOURCE_STATE_RESOLVE_DEST = 0x1000,
    D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 0x2000,
    D3D12_RESOURCE_STATE_GENERIC_READ = (((((0x1 | 0x2) | 0x40) | 0x80) | 0x200) | 0x800),
    D3D12_RESOURCE_STATE_PRESENT = 0,
    D3D12_RESOURCE_STATE_PREDICATION = 0x200
} D3D12_RESOURCE_STATES;

typedef enum D3D12_RESOURCE_BARRIER_TYPE
{
    D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0,
    D3D12_RESOURCE_BARRIER_TYPE_ALIASING = (D3D12_RESOURCE_BARRIER_TYPE_TRANSITION + 1),
    D3D12_RESOURCE_BARRIER_TYPE_UAV = (D3D12_RESOURCE_BARRIER_TYPE_ALIASING + 1)
} D3D12_RESOURCE_BARRIER_TYPE;

typedef struct D3D12_RESOURCE_TRANSITION_BARRIER
{
    ID3D12Resource *pResource;
    u32 Subresource;
    D3D12_RESOURCE_STATES StateBefore;
    D3D12_RESOURCE_STATES StateAfter;
} D3D12_RESOURCE_TRANSITION_BARRIER;

typedef struct D3D12_RESOURCE_ALIASING_BARRIER
{
    ID3D12Resource *pResourceBefore;
    ID3D12Resource *pResourceAfter;
} D3D12_RESOURCE_ALIASING_BARRIER;

typedef struct D3D12_RESOURCE_UAV_BARRIER
{
    ID3D12Resource *pResource;
} D3D12_RESOURCE_UAV_BARRIER;

typedef enum D3D12_RESOURCE_BARRIER_FLAGS
{
    D3D12_RESOURCE_BARRIER_FLAG_NONE = 0,
    D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 0x1,
    D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = 0x2
} D3D12_RESOURCE_BARRIER_FLAGS;

typedef struct D3D12_RESOURCE_BARRIER
{
    D3D12_RESOURCE_BARRIER_TYPE Type;
    D3D12_RESOURCE_BARRIER_FLAGS Flags;
    union {
        D3D12_RESOURCE_TRANSITION_BARRIER Transition;
        D3D12_RESOURCE_ALIASING_BARRIER Aliasing;
        D3D12_RESOURCE_UAV_BARRIER UAV;
    };
} D3D12_RESOURCE_BARRIER;

typedef enum D3D12_INPUT_CLASSIFICATION
{
    D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0,
    D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1
} D3D12_INPUT_CLASSIFICATION;

typedef struct D3D12_INPUT_ELEMENT_DESC
{
    const char *SemanticName;
    u32 SemanticIndex;
    DXGI_FORMAT Format;
    u32 InputSlot;
    u32 AlignedByteOffset;
    D3D12_INPUT_CLASSIFICATION InputSlotClass;
    u32 InstanceDataStepRate;
} D3D12_INPUT_ELEMENT_DESC;

typedef enum D3D12_FILL_MODE
{
    D3D12_FILL_MODE_WIREFRAME = 2,
    D3D12_FILL_MODE_SOLID = 3
} D3D12_FILL_MODE;

typedef enum D3D12_PRIMITIVE_TOPOLOGY
{
    D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
    D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
    D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
    D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
    D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
    D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
    D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
    D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
    D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
    D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
    D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
    D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
    D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
    D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
    D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
    D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
    D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
    D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
    D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
    D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
    D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
    D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
    D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
    D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
    D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
    D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
    D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
    D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
    D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
    D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
    D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
    D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
    D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
    D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
} D3D12_PRIMITIVE_TOPOLOGY;

typedef enum D3D12_PRIMITIVE_TOPOLOGY_TYPE
{
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4
} D3D12_PRIMITIVE_TOPOLOGY_TYPE;

typedef struct D3D12_SO_DECLARATION_ENTRY
{
    u32 Stream;
    const char *SemanticName;
    u32 SemanticIndex;
    u8 StartComponent;
    u8 ComponentCount;
    u8 OutputSlot;
} D3D12_SO_DECLARATION_ENTRY;

typedef enum D3D12_CULL_MODE
{
    D3D12_CULL_MODE_NONE = 1,
    D3D12_CULL_MODE_FRONT = 2,
    D3D12_CULL_MODE_BACK = 3
} D3D12_CULL_MODE;

typedef struct D3D12_VIEWPORT
{
    f32 TopLeftX;
    f32 TopLeftY;
    f32 Width;
    f32 Height;
    f32 MinDepth;
    f32 MaxDepth;
} D3D12_VIEWPORT;

typedef enum D3D12_COMPARISON_FUNC
{
    D3D12_COMPARISON_FUNC_NEVER = 1,
    D3D12_COMPARISON_FUNC_LESS = 2,
    D3D12_COMPARISON_FUNC_EQUAL = 3,
    D3D12_COMPARISON_FUNC_LESS_EQUAL = 4,
    D3D12_COMPARISON_FUNC_GREATER = 5,
    D3D12_COMPARISON_FUNC_NOT_EQUAL = 6,
    D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7,
    D3D12_COMPARISON_FUNC_ALWAYS = 8
} D3D12_COMPARISON_FUNC;

typedef enum D3D12_DEPTH_WRITE_MASK
{
    D3D12_DEPTH_WRITE_MASK_ZERO = 0,
    D3D12_DEPTH_WRITE_MASK_ALL = 1
} D3D12_DEPTH_WRITE_MASK;

typedef enum D3D12_STENCIL_OP
{
    D3D12_STENCIL_OP_KEEP = 1,
    D3D12_STENCIL_OP_ZERO = 2,
    D3D12_STENCIL_OP_REPLACE = 3,
    D3D12_STENCIL_OP_INCR_SAT = 4,
    D3D12_STENCIL_OP_DECR_SAT = 5,
    D3D12_STENCIL_OP_INVERT = 6,
    D3D12_STENCIL_OP_INCR = 7,
    D3D12_STENCIL_OP_DECR = 8
} D3D12_STENCIL_OP;

typedef struct D3D12_DEPTH_STENCILOP_DESC
{
    D3D12_STENCIL_OP StencilFailOp;
    D3D12_STENCIL_OP StencilDepthFailOp;
    D3D12_STENCIL_OP StencilPassOp;
    D3D12_COMPARISON_FUNC StencilFunc;
} D3D12_DEPTH_STENCILOP_DESC;

typedef struct D3D12_DEPTH_STENCIL_DESC
{
    i32 DepthEnable;
    D3D12_DEPTH_WRITE_MASK DepthWriteMask;
    D3D12_COMPARISON_FUNC DepthFunc;
    i32 StencilEnable;
    u8 StencilReadMask;
    u8 StencilWriteMask;
    D3D12_DEPTH_STENCILOP_DESC FrontFace;
    D3D12_DEPTH_STENCILOP_DESC BackFace;
} D3D12_DEPTH_STENCIL_DESC;

typedef enum D3D12_BLEND
{
    D3D12_BLEND_ZERO = 1,
    D3D12_BLEND_ONE = 2,
    D3D12_BLEND_SRC_COLOR = 3,
    D3D12_BLEND_INV_SRC_COLOR = 4,
    D3D12_BLEND_SRC_ALPHA = 5,
    D3D12_BLEND_INV_SRC_ALPHA = 6,
    D3D12_BLEND_DEST_ALPHA = 7,
    D3D12_BLEND_INV_DEST_ALPHA = 8,
    D3D12_BLEND_DEST_COLOR = 9,
    D3D12_BLEND_INV_DEST_COLOR = 10,
    D3D12_BLEND_SRC_ALPHA_SAT = 11,
    D3D12_BLEND_BLEND_FACTOR = 14,
    D3D12_BLEND_INV_BLEND_FACTOR = 15,
    D3D12_BLEND_SRC1_COLOR = 16,
    D3D12_BLEND_INV_SRC1_COLOR = 17,
    D3D12_BLEND_SRC1_ALPHA = 18,
    D3D12_BLEND_INV_SRC1_ALPHA = 19
} D3D12_BLEND;

typedef enum D3D12_BLEND_OP
{
    D3D12_BLEND_OP_ADD = 1,
    D3D12_BLEND_OP_SUBTRACT = 2,
    D3D12_BLEND_OP_REV_SUBTRACT = 3,
    D3D12_BLEND_OP_MIN = 4,
    D3D12_BLEND_OP_MAX = 5
} D3D12_BLEND_OP;

typedef enum D3D12_COLOR_WRITE_ENABLE
{
    D3D12_COLOR_WRITE_ENABLE_RED = 1,
    D3D12_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D12_COLOR_WRITE_ENABLE_BLUE = 4,
    D3D12_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D12_COLOR_WRITE_ENABLE_ALL = D3D12_COLOR_WRITE_ENABLE_RED | D3D12_COLOR_WRITE_ENABLE_GREEN | D3D12_COLOR_WRITE_ENABLE_BLUE | D3D12_COLOR_WRITE_ENABLE_ALPHA
} D3D12_COLOR_WRITE_ENABLE;

typedef enum D3D12_LOGIC_OP
{
    D3D12_LOGIC_OP_CLEAR = 0,
    D3D12_LOGIC_OP_SET = (D3D12_LOGIC_OP_CLEAR + 1),
    D3D12_LOGIC_OP_COPY = (D3D12_LOGIC_OP_SET + 1),
    D3D12_LOGIC_OP_COPY_INVERTED = (D3D12_LOGIC_OP_COPY + 1),
    D3D12_LOGIC_OP_NOOP = (D3D12_LOGIC_OP_COPY_INVERTED + 1),
    D3D12_LOGIC_OP_INVERT = (D3D12_LOGIC_OP_NOOP + 1),
    D3D12_LOGIC_OP_AND = (D3D12_LOGIC_OP_INVERT + 1),
    D3D12_LOGIC_OP_NAND = (D3D12_LOGIC_OP_AND + 1),
    D3D12_LOGIC_OP_OR = (D3D12_LOGIC_OP_NAND + 1),
    D3D12_LOGIC_OP_NOR = (D3D12_LOGIC_OP_OR + 1),
    D3D12_LOGIC_OP_XOR = (D3D12_LOGIC_OP_NOR + 1),
    D3D12_LOGIC_OP_EQUIV = (D3D12_LOGIC_OP_XOR + 1),
    D3D12_LOGIC_OP_AND_REVERSE = (D3D12_LOGIC_OP_EQUIV + 1),
    D3D12_LOGIC_OP_AND_INVERTED = (D3D12_LOGIC_OP_AND_REVERSE + 1),
    D3D12_LOGIC_OP_OR_REVERSE = (D3D12_LOGIC_OP_AND_INVERTED + 1),
    D3D12_LOGIC_OP_OR_INVERTED = (D3D12_LOGIC_OP_OR_REVERSE + 1)
} D3D12_LOGIC_OP;

typedef struct D3D12_RENDER_TARGET_BLEND_DESC
{
    i32 BlendEnable;
    i32 LogicOpEnable;
    D3D12_BLEND SrcBlend;
    D3D12_BLEND DestBlend;
    D3D12_BLEND_OP BlendOp;
    D3D12_BLEND SrcBlendAlpha;
    D3D12_BLEND DestBlendAlpha;
    D3D12_BLEND_OP BlendOpAlpha;
    D3D12_LOGIC_OP LogicOp;
    u8 RenderTargetWriteMask;
} D3D12_RENDER_TARGET_BLEND_DESC;

typedef struct D3D12_BLEND_DESC
{
    i32 AlphaToCoverageEnable;
    i32 IndependentBlendEnable;
    D3D12_RENDER_TARGET_BLEND_DESC RenderTarget[8];
} D3D12_BLEND_DESC;

typedef enum D3D12_CONSERVATIVE_RASTERIZATION_MODE
{
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0,
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1
} D3D12_CONSERVATIVE_RASTERIZATION_MODE;

typedef struct D3D12_RASTERIZER_DESC
{
    D3D12_FILL_MODE FillMode;
    D3D12_CULL_MODE CullMode;
    i32 FrontCounterClockwise;
    i32 DepthBias;
    f32 DepthBiasClamp;
    f32 SlopeScaledDepthBias;
    i32 DepthClipEnable;
    i32 MultisampleEnable;
    i32 AntialiasedLineEnable;
    u32 ForcedSampleCount;
    D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
} D3D12_RASTERIZER_DESC;

typedef enum D3D12_QUERY_HEAP_TYPE
{
    D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0,
    D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1,
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2,
    D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3
} D3D12_QUERY_HEAP_TYPE;

typedef struct D3D12_QUERY_HEAP_DESC
{
    D3D12_QUERY_HEAP_TYPE Type;
    u32 Count;
    u32 NodeMask;
} D3D12_QUERY_HEAP_DESC;

typedef enum D3D12_QUERY_TYPE
{
    D3D12_QUERY_TYPE_OCCLUSION = 0,
    D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1,
    D3D12_QUERY_TYPE_TIMESTAMP = 2,
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7
} D3D12_QUERY_TYPE;

typedef enum D3D12_PREDICATION_OP
{
    D3D12_PREDICATION_OP_EQUAL_ZERO = 0,
    D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1
} D3D12_PREDICATION_OP;

typedef struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
{
    u64 IAVertices;
    u64 IAPrimitives;
    u64 VSInvocations;
    u64 GSInvocations;
    u64 GSPrimitives;
    u64 CInvocations;
    u64 CPrimitives;
    u64 PSInvocations;
    u64 HSInvocations;
    u64 DSInvocations;
    u64 CSInvocations;
} D3D12_QUERY_DATA_PIPELINE_STATISTICS;

typedef struct D3D12_QUERY_DATA_SO_STATISTICS
{
    u64 NumPrimitivesWritten;
    u64 PrimitivesStorageNeeded;
} D3D12_QUERY_DATA_SO_STATISTICS;

typedef struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
{
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    u64 SizeInBytes;
    D3D12_GPU_VIRTUAL_ADDRESS BufferFilledSizeLocation;
} D3D12_STREAM_OUTPUT_BUFFER_VIEW;

typedef struct D3D12_DRAW_ARGUMENTS
{
    u32 VertexCountPerInstance;
    u32 InstanceCount;
    u32 StartVertexLocation;
    u32 StartInstanceLocation;
} D3D12_DRAW_ARGUMENTS;

typedef struct D3D12_DRAW_INDEXED_ARGUMENTS
{
    u32 IndexCountPerInstance;
    u32 InstanceCount;
    u32 StartIndexLocation;
    i32 BaseVertexLocation;
    u32 StartInstanceLocation;
} D3D12_DRAW_INDEXED_ARGUMENTS;

typedef struct D3D12_DISPATCH_ARGUMENTS
{
    u32 ThreadGroupCountX;
    u32 ThreadGroupCountY;
    u32 ThreadGroupCountZ;
} D3D12_DISPATCH_ARGUMENTS;

typedef struct D3D12_VERTEX_BUFFER_VIEW
{
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    u32 SizeInBytes;
    u32 StrideInBytes;
} D3D12_VERTEX_BUFFER_VIEW;

typedef struct D3D12_INDEX_BUFFER_VIEW
{
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    u32 SizeInBytes;
    DXGI_FORMAT Format;
} D3D12_INDEX_BUFFER_VIEW;

typedef enum D3D12_INDIRECT_ARGUMENT_TYPE
{
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0,
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = (D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW + 1)
} D3D12_INDIRECT_ARGUMENT_TYPE;

typedef struct D3D12_INDIRECT_ARGUMENT_DESC
{
    D3D12_INDIRECT_ARGUMENT_TYPE Type;
    union {
        struct {
            u32 Slot;
        } VertexBuffer;
        struct {
            u32 RootParameterIndex;
            u32 DestOffsetIn32BitValues;
            u32 Num32BitValuesToSet;
        } Constant;
        struct {
            u32 RootParameterIndex;
        } ConstantBufferView;
        struct {
            u32 RootParameterIndex;
        } ShaderResourceView;
        struct {
            u32 RootParameterIndex;
        } UnorderedAccessView;
    };
} D3D12_INDIRECT_ARGUMENT_DESC;

typedef struct D3D12_COMMAND_SIGNATURE_DESC
{
    u32 ByteStride;
    u32 NumArgumentDescs;
    const D3D12_INDIRECT_ARGUMENT_DESC *pArgumentDescs;
    u32 NodeMask;
} D3D12_COMMAND_SIGNATURE_DESC;

typedef enum D3D12_CLEAR_FLAGS
{
    D3D12_CLEAR_FLAG_DEPTH = 0x1,
    D3D12_CLEAR_FLAG_STENCIL = 0x2
} D3D12_CLEAR_FLAGS;

typedef enum D3D12_COMMAND_QUEUE_FLAGS
{
    D3D12_COMMAND_QUEUE_FLAG_NONE = 0,
    D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 0x1
} D3D12_COMMAND_QUEUE_FLAGS;

typedef enum D3D12_COMMAND_QUEUE_PRIORITY
{
    D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0,
    D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100
} D3D12_COMMAND_QUEUE_PRIORITY;

typedef struct D3D12_COMMAND_QUEUE_DESC
{
    D3D12_COMMAND_LIST_TYPE Type;
    i32 Priority;
    D3D12_COMMAND_QUEUE_FLAGS Flags;
    u32 NodeMask;
} D3D12_COMMAND_QUEUE_DESC;

typedef struct D3D12_SHADER_BYTECODE
{
    const void *pShaderBytecode;
    u64 BytecodeLength;
} D3D12_SHADER_BYTECODE;

typedef struct D3D12_STREAM_OUTPUT_DESC
{
    const D3D12_SO_DECLARATION_ENTRY *pSODeclaration;
    u32 NumEntries;
    const u32 *pBufferStrides;
    u32 NumStrides;
    u32 RasterizedStream;
} D3D12_STREAM_OUTPUT_DESC;

typedef struct D3D12_INPUT_LAYOUT_DESC
{
    const D3D12_INPUT_ELEMENT_DESC *pInputElementDescs;
    u32 NumElements;
} D3D12_INPUT_LAYOUT_DESC;

typedef enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
{
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0,
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1,
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2
} D3D12_INDEX_BUFFER_STRIP_CUT_VALUE;

typedef struct D3D12_CACHED_PIPELINE_STATE
{
    const void *pCachedBlob;
    u64 CachedBlobSizeInBytes;
} D3D12_CACHED_PIPELINE_STATE;

typedef enum D3D12_PIPELINE_STATE_FLAGS
{
    D3D12_PIPELINE_STATE_FLAG_NONE = 0,
    D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 0x1
} D3D12_PIPELINE_STATE_FLAGS;

typedef struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
{
    ID3D12RootSignature *pRootSignature;
    D3D12_SHADER_BYTECODE VS;
    D3D12_SHADER_BYTECODE PS;
    D3D12_SHADER_BYTECODE DS;
    D3D12_SHADER_BYTECODE HS;
    D3D12_SHADER_BYTECODE GS;
    D3D12_STREAM_OUTPUT_DESC StreamOutput;
    D3D12_BLEND_DESC BlendState;
    u32 SampleMask;
    D3D12_RASTERIZER_DESC RasterizerState;
    D3D12_DEPTH_STENCIL_DESC DepthStencilState;
    D3D12_INPUT_LAYOUT_DESC InputLayout;
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
    D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
    u32 NumRenderTargets;
    DXGI_FORMAT RTVFormats[8];
    DXGI_FORMAT DSVFormat;
    DXGI_SAMPLE_DESC SampleDesc;
    u32 NodeMask;
    D3D12_CACHED_PIPELINE_STATE CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS Flags;
} D3D12_GRAPHICS_PIPELINE_STATE_DESC;

typedef struct D3D12_COMPUTE_PIPELINE_STATE_DESC
{
    ID3D12RootSignature *pRootSignature;
    D3D12_SHADER_BYTECODE CS;
    u32 NodeMask;
    D3D12_CACHED_PIPELINE_STATE CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS Flags;
} D3D12_COMPUTE_PIPELINE_STATE_DESC;

typedef enum D3D12_FEATURE
{
    D3D12_FEATURE_D3D12_OPTIONS = 0,
    D3D12_FEATURE_ARCHITECTURE = 1,
    D3D12_FEATURE_FEATURE_LEVELS = 2,
    D3D12_FEATURE_FORMAT_SUPPORT = 3,
    D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = 4,
    D3D12_FEATURE_FORMAT_INFO = 5,
    D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 6,
    D3D12_FEATURE_SHADER_MODEL = 7,
    D3D12_FEATURE_D3D12_OPTIONS1 = 8,
    D3D12_FEATURE_ROOT_SIGNATURE = 12
} D3D12_FEATURE;

typedef enum D3D12_SHADER_MIN_PRECISION_SUPPORT
{
    D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0,
    D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 0x1,
    D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 0x2
} D3D12_SHADER_MIN_PRECISION_SUPPORT;

typedef enum D3D12_TILED_RESOURCES_TIER
{
    D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0,
    D3D12_TILED_RESOURCES_TIER_1 = 1,
    D3D12_TILED_RESOURCES_TIER_2 = 2,
    D3D12_TILED_RESOURCES_TIER_3 = 3
} D3D12_TILED_RESOURCES_TIER;

typedef enum D3D12_RESOURCE_BINDING_TIER
{
    D3D12_RESOURCE_BINDING_TIER_1 = 1,
    D3D12_RESOURCE_BINDING_TIER_2 = 2,
    D3D12_RESOURCE_BINDING_TIER_3 = 3
} D3D12_RESOURCE_BINDING_TIER;

typedef enum D3D12_CONSERVATIVE_RASTERIZATION_TIER
{
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3
} D3D12_CONSERVATIVE_RASTERIZATION_TIER;

typedef enum D3D12_FORMAT_SUPPORT1
{
    D3D12_FORMAT_SUPPORT1_NONE = 0,
    D3D12_FORMAT_SUPPORT1_BUFFER = 0x1,
    D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = 0x2,
    D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = 0x4,
    D3D12_FORMAT_SUPPORT1_SO_BUFFER = 0x8,
    D3D12_FORMAT_SUPPORT1_TEXTURE1D = 0x10,
    D3D12_FORMAT_SUPPORT1_TEXTURE2D = 0x20,
    D3D12_FORMAT_SUPPORT1_TEXTURE3D = 0x40,
    D3D12_FORMAT_SUPPORT1_TEXTURECUBE = 0x80,
    D3D12_FORMAT_SUPPORT1_SHADER_LOAD = 0x100,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = 0x200,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = 0x400,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = 0x800,
    D3D12_FORMAT_SUPPORT1_MIP = 0x1000,
    D3D12_FORMAT_SUPPORT1_RENDER_TARGET = 0x4000,
    D3D12_FORMAT_SUPPORT1_BLENDABLE = 0x8000,
    D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = 0x10000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = 0x40000,
    D3D12_FORMAT_SUPPORT1_DISPLAY = 0x80000,
    D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = 0x100000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = 0x200000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = 0x400000,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER = 0x800000,
    D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = 0x1000000,
    D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = 0x4000000,
    D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = 0x8000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = 0x10000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = 0x20000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = 0x40000000
} D3D12_FORMAT_SUPPORT1;

typedef enum D3D12_FORMAT_SUPPORT2
{
    D3D12_FORMAT_SUPPORT2_NONE = 0,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 0x1,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 0x2,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 0x8,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 0x40,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = 0x80,
    D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 0x100,
    D3D12_FORMAT_SUPPORT2_TILED = 0x200,
    D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 0x4000
} D3D12_FORMAT_SUPPORT2;

typedef enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS
{
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0,
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 0x1
} D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS;

typedef enum D3D12_CROSS_NODE_SHARING_TIER
{
    D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0,
    D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1,
    D3D12_CROSS_NODE_SHARING_TIER_1 = 2,
    D3D12_CROSS_NODE_SHARING_TIER_2 = 3
} D3D12_CROSS_NODE_SHARING_TIER;

typedef enum D3D12_RESOURCE_HEAP_TIER
{
    D3D12_RESOURCE_HEAP_TIER_1 = 1,
    D3D12_RESOURCE_HEAP_TIER_2 = 2
} D3D12_RESOURCE_HEAP_TIER;

typedef struct D3D12_FEATURE_DATA_D3D12_OPTIONS
{
    i32 DoublePrecisionFloatShaderOps;
    i32 OutputMergerLogicOp;
    D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
    D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
    D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
    i32 PSSpecifiedStencilRefSupported;
    i32 TypedUAVLoadAdditionalFormats;
    i32 ROVsSupported;
    D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
    u32 MaxGPUVirtualAddressBitsPerResource;
    i32 StandardSwizzle64KBSupported;
    D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;
    i32 CrossAdapterRowMajorTextureSupported;
    i32 VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
    D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
} D3D12_FEATURE_DATA_D3D12_OPTIONS;

typedef struct D3D12_FEATURE_DATA_D3D12_OPTIONS1
{
    i32 WaveOps;
    u32 WaveLaneCountMin;
    u32 WaveLaneCountMax;
    u32 TotalLaneCount;
    i32 ExpandedComputeResourceStates;
    i32 Int64ShaderOps;
} D3D12_FEATURE_DATA_D3D12_OPTIONS1;

typedef enum D3D_ROOT_SIGNATURE_VERSION
{
    D3D_ROOT_SIGNATURE_VERSION_1 = 0x1,
    D3D_ROOT_SIGNATURE_VERSION_1_0 = 0x1,
    D3D_ROOT_SIGNATURE_VERSION_1_1 = 0x2
} D3D_ROOT_SIGNATURE_VERSION;

typedef struct D3D12_FEATURE_DATA_ROOT_SIGNATURE
{
    D3D_ROOT_SIGNATURE_VERSION HighestVersion;
} D3D12_FEATURE_DATA_ROOT_SIGNATURE;

typedef struct D3D12_FEATURE_DATA_ARCHITECTURE
{
    u32 NodeIndex;
    i32 TileBasedRenderer;
    i32 UMA;
    i32 CacheCoherentUMA;
} D3D12_FEATURE_DATA_ARCHITECTURE;

typedef enum D3D_FEATURE_LEVEL
{
    D3D_FEATURE_LEVEL_9_1 = 0x9100,
    D3D_FEATURE_LEVEL_9_2 = 0x9200,
    D3D_FEATURE_LEVEL_9_3 = 0x9300,
    D3D_FEATURE_LEVEL_10_0 = 0xa000,
    D3D_FEATURE_LEVEL_10_1 = 0xa100,
    D3D_FEATURE_LEVEL_11_0 = 0xb000,
    D3D_FEATURE_LEVEL_11_1 = 0xb100,
    D3D_FEATURE_LEVEL_12_0 = 0xc000,
    D3D_FEATURE_LEVEL_12_1 = 0xc100
} D3D_FEATURE_LEVEL;

typedef struct D3D12_FEATURE_DATA_FEATURE_LEVELS
{
    u32 NumFeatureLevels;
    const D3D_FEATURE_LEVEL *pFeatureLevelsRequested;
    D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
} D3D12_FEATURE_DATA_FEATURE_LEVELS;

typedef enum D3D_SHADER_MODEL
{
    D3D_SHADER_MODEL_5_1 = 0x51,
    D3D_SHADER_MODEL_6_0 = 0x60
} D3D_SHADER_MODEL;

typedef struct D3D12_FEATURE_DATA_SHADER_MODEL
{
    D3D_SHADER_MODEL HighestShaderModel;
} D3D12_FEATURE_DATA_SHADER_MODEL;

typedef struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
{
    DXGI_FORMAT Format;
    D3D12_FORMAT_SUPPORT1 Support1;
    D3D12_FORMAT_SUPPORT2 Support2;
} D3D12_FEATURE_DATA_FORMAT_SUPPORT;

typedef struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
{
    DXGI_FORMAT Format;
    u32 SampleCount;
    D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
    u32 NumQualityLevels;
} D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS;

typedef struct D3D12_FEATURE_DATA_FORMAT_INFO
{
    DXGI_FORMAT Format;
    u8 PlaneCount;
} D3D12_FEATURE_DATA_FORMAT_INFO;

struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
{
    u32 MaxGPUVirtualAddressBitsPerResource;
    u32 MaxGPUVirtualAddressBitsPerProcess;
} D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT;

typedef struct D3D12_RESOURCE_ALLOCATION_INFO
{
    u64 SizeInBytes;
    u64 Alignment;
} D3D12_RESOURCE_ALLOCATION_INFO;

typedef enum D3D12_SHADER_COMPONENT_MAPPING
{
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3,
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4,
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5
} D3D12_SHADER_COMPONENT_MAPPING;

#define D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(Src0,Src1,Src2,Src3) (((Src0)&0x7)|(((Src1)&0x7)<<3)|(((Src2)&0x7)<<(3*2))|(((Src3)&0x7)<<(3*3))|(1<<(3*4)))
#define D3D12_DECODE_SHADER_4_COMPONENT_MAPPING(ComponentToExtract,Mapping) ((D3D12_SHADER_COMPONENT_MAPPING)(Mapping>>(3*ComponentToExtract)&0x7))
#define D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(0,1,2,3)

typedef enum D3D12_BUFFER_SRV_FLAGS {
    D3D12_BUFFER_SRV_FLAG_NONE = 0,
    D3D12_BUFFER_SRV_FLAG_RAW = 0x1
} D3D12_BUFFER_SRV_FLAGS;

typedef struct D3D12_BUFFER_SRV {
    u64 FirstElement;
    u32 NumElements;
    u32 StructureByteStride;
    D3D12_BUFFER_SRV_FLAGS Flags;
} D3D12_BUFFER_SRV;

typedef struct D3D12_TEX1D_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    f32 ResourceMinLODClamp;
} D3D12_TEX1D_SRV;

typedef struct D3D12_TEX1D_ARRAY_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    u32 FirstArraySlice;
    u32 ArraySize;
    f32 ResourceMinLODClamp;
} D3D12_TEX1D_ARRAY_SRV;

typedef struct D3D12_TEX2D_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    u32 PlaneSlice;
    f32 ResourceMinLODClamp;
} D3D12_TEX2D_SRV;

typedef struct D3D12_TEX2D_ARRAY_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    u32 FirstArraySlice;
    u32 ArraySize;
    u32 PlaneSlice;
    f32 ResourceMinLODClamp;
} D3D12_TEX2D_ARRAY_SRV;

typedef struct D3D12_TEX3D_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    f32 ResourceMinLODClamp;
} D3D12_TEX3D_SRV;

typedef struct D3D12_TEXCUBE_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    f32 ResourceMinLODClamp;
} D3D12_TEXCUBE_SRV;

typedef struct D3D12_TEXCUBE_ARRAY_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    u32 First2DArrayFace;
    u32 NumCubes;
    f32 ResourceMinLODClamp;
} D3D12_TEXCUBE_ARRAY_SRV;

typedef struct D3D12_TEX2DMS_SRV {
    u32 UnusedField_NothingToDefine;
} D3D12_TEX2DMS_SRV;

typedef struct D3D12_TEX2DMS_ARRAY_SRV {
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX2DMS_ARRAY_SRV;

typedef enum D3D12_SRV_DIMENSION {
    D3D12_SRV_DIMENSION_UNKNOWN = 0,
    D3D12_SRV_DIMENSION_BUFFER = 1,
    D3D12_SRV_DIMENSION_TEXTURE1D = 2,
    D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_SRV_DIMENSION_TEXTURE2D = 4,
    D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_SRV_DIMENSION_TEXTURE2DMS = 6,
    D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_SRV_DIMENSION_TEXTURE3D = 8,
    D3D12_SRV_DIMENSION_TEXTURECUBE = 9,
    D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10
} D3D12_SRV_DIMENSION;

typedef struct D3D12_SHADER_RESOURCE_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D12_SRV_DIMENSION ViewDimension;
    u32 Shader4ComponentMapping;
    union {
        D3D12_BUFFER_SRV Buffer;
        D3D12_TEX1D_SRV Texture1D;
        D3D12_TEX1D_ARRAY_SRV Texture1DArray;
        D3D12_TEX2D_SRV Texture2D;
        D3D12_TEX2D_ARRAY_SRV Texture2DArray;
        D3D12_TEX2DMS_SRV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D12_TEX3D_SRV Texture3D;
        D3D12_TEXCUBE_SRV TextureCube;
        D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
    };
} D3D12_SHADER_RESOURCE_VIEW_DESC;

typedef enum D3D12_FILTER {
    D3D12_FILTER_MIN_MAG_MIP_POINT = 0,
    D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
    D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
    D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
    D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
    D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
    D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
    D3D12_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
    D3D12_FILTER_ANISOTROPIC = 0x55,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
    D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
    D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
    D3D12_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
    D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
    D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
    D3D12_FILTER_MINIMUM_ANISOTROPIC = 0x155,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
    D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
    D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
    D3D12_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
} D3D12_FILTER;

typedef enum D3D12_FILTER_TYPE {
    D3D12_FILTER_TYPE_POINT = 0,
    D3D12_FILTER_TYPE_LINEAR = 1
} D3D12_FILTER_TYPE;

typedef enum D3D12_FILTER_REDUCTION_TYPE {
    D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0,
    D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1,
    D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2,
    D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3
} D3D12_FILTER_REDUCTION_TYPE;

#define D3D12_ENCODE_BASIC_FILTER(min,mag,mip,reduction) ((D3D12_FILTER)((((min)&0x3)<<4)|(((mag)&0x3)<<2)|((mip)&0x3)|(((reduction)&0x3)<<7)))
#define D3D12_ENCODE_ANISOTROPIC_FILTER(reduction) ((D3D12_FILTER)(0x40|D3D12_ENCODE_BASIC_FILTER(D3D12_FILTER_TYPE_LINEAR,D3D12_FILTER_TYPE_LINEAR,D3D12_FILTER_TYPE_LINEAR,reduction)))
#define D3D12_DECODE_MIN_FILTER(D3D12Filter) ((D3D12_FILTER_TYPE)(((D3D12Filter)>>4)&0x3))
#define D3D12_DECODE_MAG_FILTER(D3D12Filter) ((D3D12_FILTER_TYPE)(((D3D12Filter)>>2)&0x3))
#define D3D12_DECODE_MIP_FILTER(D3D12Filter) ((D3D12_FILTER_TYPE)(((D3D12Filter)>>0)&0x3))
#define D3D12_DECODE_FILTER_REDUCTION(D3D12Filter) ((D3D12_FILTER_REDUCTION_TYPE)(((D3D12Filter)>>7)&0x3))
#define D3D12_DECODE_IS_COMPARISON_FILTER(D3D12Filter) (D3D12_DECODE_FILTER_REDUCTION(D3D12Filter)==D3D12_FILTER_REDUCTION_TYPE_COMPARISON)
#define D3D12_DECODE_IS_ANISOTROPIC_FILTER(D3D12Filter) (((D3D12Filter)&0x40)&&(D3D12_FILTER_TYPE_LINEAR==D3D12_DECODE_MIN_FILTER(D3D12Filter))&&(D3D12_FILTER_TYPE_LINEAR==D3D12_DECODE_MAG_FILTER(D3D12Filter))&&(D3D12_FILTER_TYPE_LINEAR==D3D12_DECODE_MIP_FILTER(D3D12Filter)))

typedef enum D3D12_TEXTURE_ADDRESS_MODE {
    D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2,
    D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3,
    D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5
} D3D12_TEXTURE_ADDRESS_MODE;

typedef struct D3D12_SAMPLER_DESC {
    D3D12_FILTER Filter;
    D3D12_TEXTURE_ADDRESS_MODE AddressU;
    D3D12_TEXTURE_ADDRESS_MODE AddressV;
    D3D12_TEXTURE_ADDRESS_MODE AddressW;
    f32 MipLODBias;
    u32 MaxAnisotropy;
    D3D12_COMPARISON_FUNC ComparisonFunc;
    f32 BorderColor[4];
    f32 MinLOD;
    f32 MaxLOD;
} D3D12_SAMPLER_DESC;

typedef struct D3D12_CONSTANT_BUFFER_VIEW_DESC {
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    u32 SizeInBytes;
} D3D12_CONSTANT_BUFFER_VIEW_DESC;

typedef enum D3D12_BUFFER_UAV_FLAGS {
    D3D12_BUFFER_UAV_FLAG_NONE = 0,
    D3D12_BUFFER_UAV_FLAG_RAW = 0x1
} D3D12_BUFFER_UAV_FLAGS;

typedef struct D3D12_BUFFER_UAV {
    u64 FirstElement;
    u32 NumElements;
    u32 StructureByteStride;
    u64 CounterOffsetInBytes;
    D3D12_BUFFER_UAV_FLAGS Flags;
} D3D12_BUFFER_UAV;

typedef struct D3D12_TEX1D_UAV {
    u32 MipSlice;
} D3D12_TEX1D_UAV;

typedef struct D3D12_TEX1D_ARRAY_UAV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX1D_ARRAY_UAV;

typedef struct D3D12_TEX2D_UAV {
    u32 MipSlice;
    u32 PlaneSlice;
} D3D12_TEX2D_UAV;

typedef struct D3D12_TEX2D_ARRAY_UAV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
    u32 PlaneSlice;
} D3D12_TEX2D_ARRAY_UAV;

typedef struct D3D12_TEX3D_UAV {
    u32 MipSlice;
    u32 FirstWSlice;
    u32 WSize;
} D3D12_TEX3D_UAV;

typedef enum D3D12_UAV_DIMENSION {
    D3D12_UAV_DIMENSION_UNKNOWN = 0,
    D3D12_UAV_DIMENSION_BUFFER = 1,
    D3D12_UAV_DIMENSION_TEXTURE1D = 2,
    D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_UAV_DIMENSION_TEXTURE2D = 4,
    D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_UAV_DIMENSION_TEXTURE3D = 8
} D3D12_UAV_DIMENSION;

typedef struct D3D12_UNORDERED_ACCESS_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D12_UAV_DIMENSION ViewDimension;
    union {
        D3D12_BUFFER_UAV Buffer;
        D3D12_TEX1D_UAV Texture1D;
        D3D12_TEX1D_ARRAY_UAV Texture1DArray;
        D3D12_TEX2D_UAV Texture2D;
        D3D12_TEX2D_ARRAY_UAV Texture2DArray;
        D3D12_TEX3D_UAV Texture3D;
    };
} D3D12_UNORDERED_ACCESS_VIEW_DESC;

typedef struct D3D12_BUFFER_RTV {
    u64 FirstElement;
    u32 NumElements;
} D3D12_BUFFER_RTV;

typedef struct D3D12_TEX1D_RTV {
    u32 MipSlice;
} D3D12_TEX1D_RTV;

typedef struct D3D12_TEX1D_ARRAY_RTV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX1D_ARRAY_RTV;

typedef struct D3D12_TEX2D_RTV {
    u32 MipSlice;
    u32 PlaneSlice;
} D3D12_TEX2D_RTV;

typedef struct D3D12_TEX2DMS_RTV {
    u32 UnusedField_NothingToDefine;
} D3D12_TEX2DMS_RTV;

typedef struct D3D12_TEX2D_ARRAY_RTV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
    u32 PlaneSlice;
} D3D12_TEX2D_ARRAY_RTV;

typedef struct D3D12_TEX2DMS_ARRAY_RTV {
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX2DMS_ARRAY_RTV;

typedef struct D3D12_TEX3D_RTV {
    u32 MipSlice;
    u32 FirstWSlice;
    u32 WSize;
} D3D12_TEX3D_RTV;

typedef enum D3D12_RTV_DIMENSION {
    D3D12_RTV_DIMENSION_UNKNOWN = 0,
    D3D12_RTV_DIMENSION_BUFFER = 1,
    D3D12_RTV_DIMENSION_TEXTURE1D = 2,
    D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_RTV_DIMENSION_TEXTURE2D = 4,
    D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_RTV_DIMENSION_TEXTURE2DMS = 6,
    D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_RTV_DIMENSION_TEXTURE3D = 8
} D3D12_RTV_DIMENSION;

typedef struct D3D12_RENDER_TARGET_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D12_RTV_DIMENSION ViewDimension;
    union {
        D3D12_BUFFER_RTV Buffer;
        D3D12_TEX1D_RTV Texture1D;
        D3D12_TEX1D_ARRAY_RTV Texture1DArray;
        D3D12_TEX2D_RTV Texture2D;
        D3D12_TEX2D_ARRAY_RTV Texture2DArray;
        D3D12_TEX2DMS_RTV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D12_TEX3D_RTV Texture3D;
    };
} D3D12_RENDER_TARGET_VIEW_DESC;

typedef struct D3D12_TEX1D_DSV {
    u32 MipSlice;
} D3D12_TEX1D_DSV;

typedef struct D3D12_TEX1D_ARRAY_DSV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX1D_ARRAY_DSV;

typedef struct D3D12_TEX2D_DSV {
    u32 MipSlice;
} D3D12_TEX2D_DSV;

typedef struct D3D12_TEX2D_ARRAY_DSV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX2D_ARRAY_DSV;

typedef struct D3D12_TEX2DMS_DSV {
    u32 UnusedField_NothingToDefine;
} D3D12_TEX2DMS_DSV;

typedef struct D3D12_TEX2DMS_ARRAY_DSV {
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX2DMS_ARRAY_DSV;

typedef enum D3D12_DSV_FLAGS {
    D3D12_DSV_FLAG_NONE = 0,
    D3D12_DSV_FLAG_READ_ONLY_DEPTH = 0x1,
    D3D12_DSV_FLAG_READ_ONLY_STENCIL = 0x2
} D3D12_DSV_FLAGS;

typedef enum D3D12_DSV_DIMENSION {
    D3D12_DSV_DIMENSION_UNKNOWN = 0,
    D3D12_DSV_DIMENSION_TEXTURE1D = 1,
    D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2,
    D3D12_DSV_DIMENSION_TEXTURE2D = 3,
    D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4,
    D3D12_DSV_DIMENSION_TEXTURE2DMS = 5,
    D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
} D3D12_DSV_DIMENSION;

typedef struct D3D12_DEPTH_STENCIL_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D12_DSV_DIMENSION ViewDimension;
    D3D12_DSV_FLAGS Flags;
    union {
        D3D12_TEX1D_DSV Texture1D;
        D3D12_TEX1D_ARRAY_DSV Texture1DArray;
        D3D12_TEX2D_DSV Texture2D;
        D3D12_TEX2D_ARRAY_DSV Texture2DArray;
        D3D12_TEX2DMS_DSV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    };
} D3D12_DEPTH_STENCIL_VIEW_DESC;

typedef struct D3D12_DEPTH_STENCIL_VALUE {
    f32 Depth;
    u8 Stencil;
} D3D12_DEPTH_STENCIL_VALUE;

typedef struct D3D12_CLEAR_VALUE {
    DXGI_FORMAT Format;
    union {
        f32 Color[4];
        D3D12_DEPTH_STENCIL_VALUE DepthStencil;
    };
} D3D12_CLEAR_VALUE;

typedef enum D3D12_FENCE_FLAGS {
    D3D12_FENCE_FLAG_NONE = 0,
    D3D12_FENCE_FLAG_SHARED = 0x1,
    D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 0x2
} D3D12_FENCE_FLAGS;

typedef struct D3D12_PACKED_MIP_INFO {
    u8 NumStandardMips;
    u8 NumPackedMips;
    u32 NumTilesForPackedMips;
    u32 StartTileIndexInOverallResource;
} D3D12_PACKED_MIP_INFO;

typedef struct D3D12_SUBRESOURCE_DATA {
    const void *pData;
    i64 RowPitch;
    i64 SlicePitch;
} D3D12_SUBRESOURCE_DATA;

typedef struct D3D12_MEMCPY_DEST {
    void *pData;
    u64 RowPitch;
    u64 SlicePitch;
} D3D12_MEMCPY_DEST;

// IUnknown
typedef struct IUnknownDispatchTable
{
    // IUnknown
#define IUnknown_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(IUnknown *self, const GUID *guid, void **out_object);
#define IUnknown_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(IUnknown *self);
#define IUnknown_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(IUnknown *self);
} IUnknownDispatchTable;
struct IUnknown { const IUnknownDispatchTable *dtbl; };

// ID3DBlob
typedef struct ID3DBlobDispatchTable
{
    // IUnknown
#define ID3DBlob_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3DBlob *self, const GUID *guid, void **out_object);
#define ID3DBlob_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3DBlob *self);
#define ID3DBlob_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3DBlob *self);
    // ID3DBlob
#define ID3DBlob_GetBufferPointer(self, ...) ((self)->dtbl->GetBufferPointer(self, __VA_ARGS__))
    void *(STDCALLP GetBufferPointer)(ID3DBlob *self);
#define ID3DBlob_GetBufferSize(self, ...) ((self)->dtbl->GetBufferSize(self, __VA_ARGS__))
    u64 (STDCALLP GetBufferSize)(ID3DBlob *self);
} ID3DBlobDispatchTable;
struct ID3DBlob { const ID3DBlobDispatchTable *dtbl; };

// ID3D12Object
typedef struct ID3D12ObjectDispatchTable
{
    // IUnknown
#define ID3D12Object_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12Object *self, const GUID *guid, void **out_object);
#define ID3D12Object_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12Object *self);
#define ID3D12Object_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12Object *self);
    // ID3D12Object
#define ID3D12Object_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12Object *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12Object_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12Object *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12Object_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Object *self, const GUID *guid, const IUnknown *data);
#define ID3D12Object_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12Object *self, const u16 *name);
} ID3D12ObjectDispatchTable;
struct ID3D12Object { const ID3D12ObjectDispatchTable *dtbl; };

// ID3D12DeviceChild
typedef struct ID3D12DeviceChildDispatchTable
{
    // IUnknown
#define ID3D12DeviceChild_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12DeviceChild *self, const GUID *guid, void **out_object);
#define ID3D12DeviceChild_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12DeviceChild *self);
#define ID3D12DeviceChild_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12DeviceChild *self);
    // ID3D12Object
#define ID3D12DeviceChild_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12DeviceChild *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12DeviceChild_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12DeviceChild *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12DeviceChild_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12DeviceChild *self, const GUID *guid, const IUnknown *data);
#define ID3D12DeviceChild_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12DeviceChild *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12DeviceChild_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12DeviceChild *self, const GUID *guid, void **out_device);
} ID3D12DeviceChildDispatchTable;
struct ID3D12DeviceChild { const ID3D12DeviceChildDispatchTable *dtbl; };

// ID3D12RootSignature
typedef struct ID3D12RootSignatureDispatchTable
{
    // IUnknown
#define ID3D12RootSignature_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12RootSignature *self, const GUID *guid, void **out_object);
#define ID3D12RootSignature_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12RootSignature *self);
#define ID3D12RootSignature_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12RootSignature *self);
    // ID3D12Object
#define ID3D12RootSignature_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12RootSignature *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12RootSignature_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12RootSignature *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12RootSignature_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12RootSignature *self, const GUID *guid, const IUnknown *data);
#define ID3D12RootSignature_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12RootSignature *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12RootSignature_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12RootSignature *self, const GUID *guid, void **out_device);
} ID3D12RootSignatureDispatchTable;
struct ID3D12RootSignature { const ID3D12RootSignatureDispatchTable *dtbl; };

// ID3D12Pageable
typedef struct ID3D12PageableDispatchTable
{
    // IUnknown
#define ID3D12Pageable_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12Pageable *self, const GUID *guid, void **out_object);
#define ID3D12Pageable_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12Pageable *self);
#define ID3D12Pageable_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12Pageable *self);
    // ID3D12Object
#define ID3D12Pageable_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12Pageable *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12Pageable_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12Pageable *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12Pageable_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Pageable *self, const GUID *guid, const IUnknown *data);
#define ID3D12Pageable_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12Pageable *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12Pageable_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12Pageable *self, const GUID *guid, void **out_device);
} ID3D12PageableDispatchTable;
struct ID3D12Pageable { const ID3D12PageableDispatchTable *dtbl; };

// ID3D12Heap
typedef struct ID3D12HeapDispatchTable
{
    // IUnknown
#define ID3D12Heap_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12Heap *self, const GUID *guid, void **out_object);
#define ID3D12Heap_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12Heap *self);
#define ID3D12Heap_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12Heap *self);
    // ID3D12Object
#define ID3D12Heap_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12Heap *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12Heap_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12Heap *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12Heap_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Heap *self, const GUID *guid, const IUnknown *data);
#define ID3D12Heap_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12Heap *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12Heap_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12Heap *self, const GUID *guid, void **out_device);
    // ID3D12Pageable
    // ID3D12Heap
#define ID3D12Heap_GetDesc(self, ...) ((self)->dtbl->GetDesc(self, __VA_ARGS__))
    D3D12_HEAP_DESC *(STDCALLP GetDesc)(ID3D12Heap *self, D3D12_HEAP_DESC *out_heap_desc);
} ID3D12HeapDispatchTable;
struct ID3D12Heap { const ID3D12HeapDispatchTable *dtbl; };

// ID3D12Resource
typedef struct ID3D12ResourceDispatchTable
{
    // IUnknown
#define ID3D12Resource_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12Resource *self, const GUID *guid, void **out_object);
#define ID3D12Resource_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12Resource *self);
#define ID3D12Resource_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12Resource *self);
    // ID3D12Object
#define ID3D12Resource_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12Resource *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12Resource_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12Resource *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12Resource_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Resource *self, const GUID *guid, const IUnknown *data);
#define ID3D12Resource_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12Resource *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12Resource_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12Resource *self, const GUID *guid, void **out_device);
    // ID3D12Pageable
    // ID3D12Resource
#define ID3D12Resource_Map(self, ...) ((self)->dtbl->Map(self, __VA_ARGS__))
    i32 (STDCALLP Map)(ID3D12Resource *self, u32 subresource, const D3D12_RANGE *read_range, void **out_data);
#define ID3D12Resource_Unmap(self, ...) ((self)->dtbl->Unmap(self, __VA_ARGS__))
    void (STDCALLP Unmap)(ID3D12Resource *self, u32 subresource, const D3D12_RANGE *written_range);
#define ID3D12Resource_GetDesc(self, ...) ((self)->dtbl->GetDesc(self, __VA_ARGS__))
    D3D12_RESOURCE_DESC *(STDCALLP GetDesc)(ID3D12Resource *self, D3D12_RESOURCE_DESC *out_resource_desc);
#define ID3D12Resource_GetGPUVirtualAddress(self, ...) ((self)->dtbl->GetGPUVirtualAddress(self, __VA_ARGS__))
    D3D12_GPU_VIRTUAL_ADDRESS (STDCALLP GetGPUVirtualAddress)(ID3D12Resource *self);
#define ID3D12Resource_WriteToSubresource(self, ...) ((self)->dtbl->WriteToSubresource(self, __VA_ARGS__))
    i32 (STDCALLP WriteToSubresource)(ID3D12Resource *self,
                                      u32 dst_subresource,
                                      const D3D12_BOX *dst_box,
                                      const void *src_data,
                                      u32 src_row_pitch,
                                      u32 src_depth_pitch);
#define ID3D12Resource_ReadFromSubresource(self, ...) ((self)->dtbl->ReadFromSubresource(self, __VA_ARGS__))
    i32 (STDCALLP ReadFromSubresource)(ID3D12Resource *self,
                                       void *dst_data,
                                       u32 dst_row_pitch,
                                       u32 dst_depth_pitch,
                                       u32 src_subresource,
                                       const D3D12_BOX *src_box);
#define ID3D12Resource_GetHeapProperties(self, ...) ((self)->dtbl->GetHeapProperties(self, __VA_ARGS__))
    i32 (STDCALLP GetHeapProperties)(ID3D12Resource *self, D3D12_HEAP_PROPERTIES *out_properties, D3D12_HEAP_FLAGS *out_flags);
} ID3D12ResourceDispatchTable;
struct ID3D12Resource { const ID3D12ResourceDispatchTable *dtbl; };

// ID3D12CommandAllocator
typedef struct ID3D12CommandAllocatorDispatchTable
{
    // IUnknown
#define ID3D12CommandAllocator_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12CommandAllocator *self, const GUID *guid, void **out_object);
#define ID3D12CommandAllocator_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12CommandAllocator *self);
#define ID3D12CommandAllocator_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12CommandAllocator *self);
    // ID3D12Object
#define ID3D12CommandAllocator_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12CommandAllocator *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12CommandAllocator_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12CommandAllocator *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12CommandAllocator_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12CommandAllocator *self, const GUID *guid, const IUnknown *data);
#define ID3D12CommandAllocator_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12CommandAllocator *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12CommandAllocator_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12CommandAllocator *self, const GUID *guid, void **out_device);
    // ID3D12Pageable
    // ID3D12CommandAllocator
#define ID3D12CommandAllocator_Reset(self, ...) ((self)->dtbl->Reset(self, __VA_ARGS__))
    i32 (STDCALLP Reset)(ID3D12CommandAllocator *self);
} ID3D12CommandAllocatorDispatchTable;
struct ID3D12CommandAllocator { const ID3D12CommandAllocatorDispatchTable *dtbl; };

// ID3D12Fence
typedef struct ID3D12FenceDispatchTable
{
    // IUnknown
#define ID3D12Fence_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12Fence *self, const GUID *guid, void **out_object);
#define ID3D12Fence_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12Fence *self);
#define ID3D12Fence_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12Fence *self);
    // ID3D12Object
#define ID3D12Fence_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12Fence *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12Fence_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12Fence *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12Fence_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Fence *self, const GUID *guid, const IUnknown *data);
#define ID3D12Fence_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12Fence *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12Fence_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12Fence *self, const GUID *guid, void **out_device);
    // ID3D12Pageable
    // ID3D12Fence
#define ID3D12Fence_GetCompletedValue(self, ...) ((self)->dtbl->GetCompletedValue(self, __VA_ARGS__))
    u64 (STDCALLP GetCompletedValue)(ID3D12Fence *self);
#define ID3D12Fence_SetEventOnCompletion(self, ...) ((self)->dtbl->SetEventOnCompletion(self, __VA_ARGS__))
    i32 (STDCALLP SetEventOnCompletion)(ID3D12Fence *self, u64 value, void *event);
#define ID3D12Fence_Signal(self, ...) ((self)->dtbl->Signal(self, __VA_ARGS__))
    i32 (STDCALLP Signal)(ID3D12Fence *self, u64 value);
} ID3D12FenceDispatchTable;
struct ID3D12Fence { const ID3D12FenceDispatchTable *dtbl; };

// ID3D12PipelineState
typedef struct ID3D12PipelineStateDispatchTable
{
    // IUnknown
#define ID3D12PipelineState_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12PipelineState *self, const GUID *guid, void **out_object);
#define ID3D12PipelineState_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12PipelineState *self);
#define ID3D12PipelineState_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12PipelineState *self);
    // ID3D12Object
#define ID3D12PipelineState_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12PipelineState *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12PipelineState_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12PipelineState *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12PipelineState_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12PipelineState *self, const GUID *guid, const IUnknown *data);
#define ID3D12PipelineState_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12PipelineState *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12PipelineState_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12PipelineState *self, const GUID *guid, void **out_device);
    // ID3D12Pageable
    // ID3D12PipelineState
#define ID3D12PipelineState_GetCachedBlob(self, ...) ((self)->dtbl->GetCachedBlob(self, __VA_ARGS__))
    i32 (STDCALLP GetCachedBlob)(ID3D12PipelineState *self, ID3DBlob **out_blob);
} ID3D12PipelineStateDispatchTable;
struct ID3D12PipelineState { const ID3D12PipelineStateDispatchTable *dtbl; };

// ID3D12DescriptorHeap
typedef struct ID3D12DescriptorHeapDispatchTable
{
    // IUnknown
#define ID3D12DescriptorHeap_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12DescriptorHeap *self, const GUID *guid, void **out_object);
#define ID3D12DescriptorHeap_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12DescriptorHeap *self);
#define ID3D12DescriptorHeap_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12DescriptorHeap *self);
    // ID3D12Object
#define ID3D12DescriptorHeap_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12DescriptorHeap *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12DescriptorHeap_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12DescriptorHeap *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12DescriptorHeap_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12DescriptorHeap *self, const GUID *guid, const IUnknown *data);
#define ID3D12DescriptorHeap_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12DescriptorHeap *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12DescriptorHeap_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12DescriptorHeap *self, const GUID *guid, void **out_device);
    // ID3D12Pageable
    // ID3D12DescriptorHeap
#define ID3D12DescriptorHeap_GetDesc(self, ...) ((self)->dtbl->GetDesc(self, __VA_ARGS__))
    D3D12_DESCRIPTOR_HEAP_DESC *(STDCALLP GetDesc)(ID3D12DescriptorHeap *self, D3D12_DESCRIPTOR_HEAP_DESC *out_desc);
#define ID3D12DescriptorHeap_GetCPUDescriptorHandleForHeapStart(self, ...) ((self)->dtbl->GetCPUDescriptorHandleForHeapStart(self, __VA_ARGS__))
    D3D12_CPU_DESCRIPTOR_HANDLE *(STDCALLP GetCPUDescriptorHandleForHeapStart)(ID3D12DescriptorHeap *self,
                                                                               D3D12_CPU_DESCRIPTOR_HANDLE *out_handle);
#define ID3D12DescriptorHeap_GetGPUDescriptorHandleForHeapStart(self, ...) ((self)->dtbl->GetGPUDescriptorHandleForHeapStart(self, __VA_ARGS__))
    D3D12_GPU_DESCRIPTOR_HANDLE *(STDCALLP GetGPUDescriptorHandleForHeapStart)(ID3D12DescriptorHeap *self,
                                                                               D3D12_GPU_DESCRIPTOR_HANDLE *out_handle);
} ID3D12DescriptorHeapDispatchTable;
struct ID3D12DescriptorHeap { const ID3D12DescriptorHeapDispatchTable *dtbl; };

// ID3D12QueryHeap
typedef struct ID3D12QueryHeapDispatchTable
{
    // IUnknown
#define ID3D12QueryHeap_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12QueryHeap *self, const GUID *guid, void **out_object);
#define ID3D12QueryHeap_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12QueryHeap *self);
#define ID3D12QueryHeap_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12QueryHeap *self);
    // ID3D12Object
#define ID3D12QueryHeap_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12QueryHeap *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12QueryHeap_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12QueryHeap *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12QueryHeap_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12QueryHeap *self, const GUID *guid, const IUnknown *data);
#define ID3D12QueryHeap_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12QueryHeap *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12QueryHeap_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12QueryHeap *self, const GUID *guid, void **out_device);
    // ID3D12Pageable
    // ID3D12QueryHeap
} ID3D12QueryHeapDispatchTable;
struct ID3D12QueryHeap { const ID3D12QueryHeapDispatchTable *dtbl; };

// ID3D12CommandSignature
typedef struct ID3D12CommandSignatureDispatchTable
{
    // IUnknown
#define ID3D12CommandSignature_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12CommandSignature *self, const GUID *guid, void **out_object);
#define ID3D12CommandSignature_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12CommandSignature *self);
#define ID3D12CommandSignature_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12CommandSignature *self);
    // ID3D12Object
#define ID3D12CommandSignature_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12CommandSignature *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12CommandSignature_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12CommandSignature *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12CommandSignature_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12CommandSignature *self, const GUID *guid, const IUnknown *data);
#define ID3D12CommandSignature_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12CommandSignature *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12CommandSignature_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12CommandSignature *self, const GUID *guid, void **out_device);
    // ID3D12Pageable
    // ID3D12CommandSignature
} ID3D12CommandSignatureDispatchTable;
struct ID3D12CommandSignature { const ID3D12CommandSignatureDispatchTable *dtbl; };

// ID3D12CommandList
typedef struct ID3D12CommandListDispatchTable
{
    // IUnknown
#define ID3D12CommandList_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12CommandList *self, const GUID *guid, void **out_object);
#define ID3D12CommandList_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12CommandList *self);
#define ID3D12CommandList_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12CommandList *self);
    // ID3D12Object
#define ID3D12CommandList_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12CommandList *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12CommandList_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12CommandList *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12CommandList_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12CommandList *self, const GUID *guid, const IUnknown *data);
#define ID3D12CommandList_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12CommandList *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12CommandList_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12CommandList *self, const GUID *guid, void **out_device);
    // ID3D12CommandList
#define ID3D12CommandList_GetType(self, ...) ((self)->dtbl->GetType(self, __VA_ARGS__))
    D3D12_COMMAND_LIST_TYPE (STDCALLP GetType)(ID3D12CommandList *self);
} ID3D12CommandListDispatchTable;
struct ID3D12CommandList { const ID3D12CommandListDispatchTable *dtbl; };

// ID3D12GraphicsCommandList
typedef struct ID3D12GraphicsCommandListDispatchTable
{
    // IUnknown
#define ID3D12GraphicsCommandList_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12GraphicsCommandList *self, const GUID *guid, void **out_object);
#define ID3D12GraphicsCommandList_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12GraphicsCommandList *self);
#define ID3D12GraphicsCommandList_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12GraphicsCommandList *self);
    // ID3D12Object
#define ID3D12GraphicsCommandList_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12GraphicsCommandList *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12GraphicsCommandList_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12GraphicsCommandList *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12GraphicsCommandList_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12GraphicsCommandList *self, const GUID *guid, const IUnknown *data);
#define ID3D12GraphicsCommandList_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12GraphicsCommandList *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12GraphicsCommandList_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12GraphicsCommandList *self, const GUID *guid, void **out_device);
    // ID3D12CommandList
#define ID3D12GraphicsCommandList_GetType(self, ...) ((self)->dtbl->GetType(self, __VA_ARGS__))
    D3D12_COMMAND_LIST_TYPE (STDCALLP GetType)(ID3D12GraphicsCommandList *self);
    // ID3D12GraphicsCommandList
#define ID3D12GraphicsCommandList_Close(self, ...) ((self)->dtbl->Close(self, __VA_ARGS__))
    i32 (STDCALLP Close)(ID3D12GraphicsCommandList *self);
#define ID3D12GraphicsCommandList_Reset(self, ...) ((self)->dtbl->Reset(self, __VA_ARGS__))
    i32 (STDCALLP Reset)(ID3D12GraphicsCommandList *self,
                         ID3D12CommandAllocator *allocator,
                         ID3D12PipelineState *initial_state);
#define ID3D12GraphicsCommandList_ClearState(self, ...) ((self)->dtbl->ClearState(self, __VA_ARGS__))
    void (STDCALLP ClearState)(ID3D12GraphicsCommandList *self, ID3D12PipelineState *pipeline_state);
#define ID3D12GraphicsCommandList_DrawInstanced(self, ...) ((self)->dtbl->DrawInstanced(self, __VA_ARGS__))
    void (STDCALLP DrawInstanced)(ID3D12GraphicsCommandList *self,
                                  u32 vertex_count_per_instance,
                                  u32 instance_count,
                                  u32 start_vertex_location,
                                  u32 start_instance_location);
#define ID3D12GraphicsCommandList_DrawIndexedInstanced(self, ...) ((self)->dtbl->DrawIndexedInstanced(self, __VA_ARGS__))
    void (STDCALLP DrawIndexedInstanced)(ID3D12GraphicsCommandList *self,
                                         u32 index_count_per_instance,
                                         u32 instance_count,
                                         u32 start_index_location,
                                         i32 base_vertex_location,
                                         u32 start_instance_location);
#define ID3D12GraphicsCommandList_Dispatch(self, ...) ((self)->dtbl->Dispatch(self, __VA_ARGS__))
    void (STDCALLP Dispatch)(ID3D12GraphicsCommandList *self,
                             u32 thread_group_count_x,
                             u32 thread_group_count_y,
                             u32 thread_group_count_z);
#define ID3D12GraphicsCommandList_CopyBufferRegion(self, ...) ((self)->dtbl->CopyBufferRegion(self, __VA_ARGS__))
    void (STDCALLP CopyBufferRegion)(ID3D12GraphicsCommandList *self,
                                     ID3D12Resource *dst_buffer,
                                     u64 dst_offset,
                                     ID3D12Resource *src_buffer,
                                     u64 src_offset,
                                     u64 num_bytes);
#define ID3D12GraphicsCommandList_CopyTextureRegion(self, ...) ((self)->dtbl->CopyTextureRegion(self, __VA_ARGS__))
    void (STDCALLP CopyTextureRegion)(ID3D12GraphicsCommandList *self,
                                      const D3D12_TEXTURE_COPY_LOCATION *dst,
                                      u32 dst_x,
                                      u32 dst_y,
                                      u32 dst_z,
                                      const D3D12_TEXTURE_COPY_LOCATION *src,
                                      const D3D12_BOX *src_box);
#define ID3D12GraphicsCommandList_CopyResource(self, ...) ((self)->dtbl->CopyResource(self, __VA_ARGS__))
    void (STDCALLP CopyResource)(ID3D12GraphicsCommandList *self, ID3D12Resource *dst, ID3D12Resource *src);
#define ID3D12GraphicsCommandList_CopyTiles(self, ...) ((self)->dtbl->CopyTiles(self, __VA_ARGS__))
    void (STDCALLP CopyTiles)(ID3D12GraphicsCommandList *self,
                              ID3D12Resource *tiled_resource,
                              const D3D12_TILED_RESOURCE_COORDINATE *tile_region_start_coordinate,
                              const D3D12_TILE_REGION_SIZE *tile_region_size,
                              ID3D12Resource *buffer,
                              u64 buffer_start_offset_in_bytes,
                              D3D12_TILE_COPY_FLAGS flags);
#define ID3D12GraphicsCommandList_ResolveSubresource(self, ...) ((self)->dtbl->ResolveSubresource(self, __VA_ARGS__))
    void (STDCALLP ResolveSubresource)(ID3D12GraphicsCommandList *self,
                                       ID3D12Resource *dst_resource,
                                       u32 dst_subresource,
                                       ID3D12Resource *src_resource,
                                       u32 src_subresource,
                                       DXGI_FORMAT format);
#define ID3D12GraphicsCommandList_IASetPrimitiveTopology(self, ...) ((self)->dtbl->IASetPrimitiveTopology(self, __VA_ARGS__))
    void (STDCALLP IASetPrimitiveTopology)(ID3D12GraphicsCommandList *self, D3D12_PRIMITIVE_TOPOLOGY primitive_topology);
#define ID3D12GraphicsCommandList_RSSetViewports(self, ...) ((self)->dtbl->RSSetViewports(self, __VA_ARGS__))
    void (STDCALLP RSSetViewports)(ID3D12GraphicsCommandList *self, u32 num_viewports, const D3D12_VIEWPORT *viewports);
#define ID3D12GraphicsCommandList_RSSetScissorRects(self, ...) ((self)->dtbl->RSSetScissorRects(self, __VA_ARGS__))
    void (STDCALLP RSSetScissorRects)(ID3D12GraphicsCommandList *self, u32 num_rects, const D3D12_RECT *rects);
#define ID3D12GraphicsCommandList_OMSetBlendFactor(self, ...) ((self)->dtbl->OMSetBlendFactor(self, __VA_ARGS__))
    void (STDCALLP OMSetBlendFactor)(ID3D12GraphicsCommandList *self, const f32 blend_factor[4]);
#define ID3D12GraphicsCommandList_OMSetStencilRef(self, ...) ((self)->dtbl->OMSetStencilRef(self, __VA_ARGS__))
    void (STDCALLP OMSetStencilRef)(ID3D12GraphicsCommandList *self, u32 stencil_ref);
#define ID3D12GraphicsCommandList_SetPipelineState(self, ...) ((self)->dtbl->SetPipelineState(self, __VA_ARGS__))
    void (STDCALLP SetPipelineState)(ID3D12GraphicsCommandList *self, ID3D12PipelineState *pipeline_state);
#define ID3D12GraphicsCommandList_ResourceBarrier(self, ...) ((self)->dtbl->ResourceBarrier(self, __VA_ARGS__))
    void (STDCALLP ResourceBarrier)(ID3D12GraphicsCommandList *self, u32 num_barriers, const D3D12_RESOURCE_BARRIER *barriers);
#define ID3D12GraphicsCommandList_ExecuteBundle(self, ...) ((self)->dtbl->ExecuteBundle(self, __VA_ARGS__))
    void (STDCALLP ExecuteBundle)(ID3D12GraphicsCommandList *self, ID3D12GraphicsCommandList *command_list);
#define ID3D12GraphicsCommandList_SetDescriptorHeaps(self, ...) ((self)->dtbl->SetDescriptorHeaps(self, __VA_ARGS__))
    void (STDCALLP SetDescriptorHeaps)(ID3D12GraphicsCommandList *self, u32 num_heaps, ID3D12DescriptorHeap *const *heaps);
#define ID3D12GraphicsCommandList_SetComputeRootSignature(self, ...) ((self)->dtbl->SetComputeRootSignature(self, __VA_ARGS__))
    void (STDCALLP SetComputeRootSignature)(ID3D12GraphicsCommandList *self, ID3D12RootSignature *root_signature);
#define ID3D12GraphicsCommandList_SetGraphicsRootSignature(self, ...) ((self)->dtbl->SetGraphicsRootSignature(self, __VA_ARGS__))
    void (STDCALLP SetGraphicsRootSignature)(ID3D12GraphicsCommandList *self, ID3D12RootSignature *root_signature);
#define ID3D12GraphicsCommandList_SetComputeRootDescriptorTable(self, ...) ((self)->dtbl->SetComputeRootDescriptorTable(self, __VA_ARGS__))
    void (STDCALLP SetComputeRootDescriptorTable)(ID3D12GraphicsCommandList *self,
                                                  u32 root_parameter_index,
                                                  D3D12_GPU_DESCRIPTOR_HANDLE base_descriptor);
#define ID3D12GraphicsCommandList_SetGraphicsRootDescriptorTable(self, ...) ((self)->dtbl->SetGraphicsRootDescriptorTable(self, __VA_ARGS__))
    void (STDCALLP SetGraphicsRootDescriptorTable)(ID3D12GraphicsCommandList *self,
                                                   u32 root_parameter_index,
                                                   D3D12_GPU_DESCRIPTOR_HANDLE base_descriptor);
#define ID3D12GraphicsCommandList_SetComputeRoot32BitConstant(self, ...) ((self)->dtbl->SetComputeRoot32BitConstant(self, __VA_ARGS__))
    void (STDCALLP SetComputeRoot32BitConstant)(ID3D12GraphicsCommandList *self,
                                                u32 root_parameter_index,
                                                u32 src_data,
                                                u32 dest_offset_in_32bit_values);
#define ID3D12GraphicsCommandList_SetGraphicsRoot32BitConstant(self, ...) ((self)->dtbl->SetGraphicsRoot32BitConstant(self, __VA_ARGS__))
    void (STDCALLP SetGraphicsRoot32BitConstant)(ID3D12GraphicsCommandList *self,
                                                 u32 root_parameter_index,
                                                 u32 src_data,
                                                 u32 dest_offset_in_32bit_values);
#define ID3D12GraphicsCommandList_SetComputeRoot32BitConstants(self, ...) ((self)->dtbl->SetComputeRoot32BitConstants(self, __VA_ARGS__))
    void (STDCALLP SetComputeRoot32BitConstants)(ID3D12GraphicsCommandList *self,
                                                 u32 root_parameter_index,
                                                 u32 num_32bit_values_to_set,
                                                 const void *src_data,
                                                 u32 dest_offset_in_32bit_values);
#define ID3D12GraphicsCommandList_SetGraphicsRoot32BitConstants(self, ...) ((self)->dtbl->SetGraphicsRoot32BitConstants(self, __VA_ARGS__))
    void (STDCALLP SetGraphicsRoot32BitConstants)(ID3D12GraphicsCommandList *self,
                                                  u32 root_parameter_index,
                                                  u32 num_32bit_values_to_set,
                                                  const void *src_data,
                                                  u32 dest_offset_in_32bit_values);
#define ID3D12GraphicsCommandList_SetComputeRootConstantBufferView(self, ...) ((self)->dtbl->SetComputeRootConstantBufferView(self, __VA_ARGS__))
    void (STDCALLP SetComputeRootConstantBufferView)(ID3D12GraphicsCommandList *self,
                                                     u32 root_parameter_index,
                                                     D3D12_GPU_VIRTUAL_ADDRESS buffer_location);
#define ID3D12GraphicsCommandList_SetGraphicsRootConstantBufferView(self, ...) ((self)->dtbl->SetGraphicsRootConstantBufferView(self, __VA_ARGS__))
    void (STDCALLP SetGraphicsRootConstantBufferView)(ID3D12GraphicsCommandList *self,
                                                      u32 root_parameter_index,
                                                      D3D12_GPU_VIRTUAL_ADDRESS buffer_location);
#define ID3D12GraphicsCommandList_SetComputeRootShaderResourceView(self, ...) ((self)->dtbl->SetComputeRootShaderResourceView(self, __VA_ARGS__))
    void (STDCALLP SetComputeRootShaderResourceView)(ID3D12GraphicsCommandList *self,
                                                     u32 root_parameter_index,
                                                     D3D12_GPU_VIRTUAL_ADDRESS buffer_location);
#define ID3D12GraphicsCommandList_SetGraphicsRootShaderResourceView(self, ...) ((self)->dtbl->SetGraphicsRootShaderResourceView(self, __VA_ARGS__))
    void (STDCALLP SetGraphicsRootShaderResourceView)(ID3D12GraphicsCommandList *self,
                                                      u32 root_parameter_index,
                                                      D3D12_GPU_VIRTUAL_ADDRESS buffer_location);
#define ID3D12GraphicsCommandList_SetComputeRootUnorderedAccessView(self, ...) ((self)->dtbl->SetComputeRootUnorderedAccessView(self, __VA_ARGS__))
    void (STDCALLP SetComputeRootUnorderedAccessView)(ID3D12GraphicsCommandList *self,
                                                      u32 root_parameter_index,
                                                      D3D12_GPU_VIRTUAL_ADDRESS buffer_location);
#define ID3D12GraphicsCommandList_SetGraphicsRootUnorderedAccessView(self, ...) ((self)->dtbl->SetGraphicsRootUnorderedAccessView(self, __VA_ARGS__))
    void (STDCALLP SetGraphicsRootUnorderedAccessView)(ID3D12GraphicsCommandList *self,
                                                       u32 root_parameter_index,
                                                       D3D12_GPU_VIRTUAL_ADDRESS buffer_location);
#define ID3D12GraphicsCommandList_IASetIndexBuffer(self, ...) ((self)->dtbl->IASetIndexBuffer(self, __VA_ARGS__))
    void (STDCALLP IASetIndexBuffer)(ID3D12GraphicsCommandList *self, const D3D12_INDEX_BUFFER_VIEW *view);
#define ID3D12GraphicsCommandList_IASetVertexBuffers(self, ...) ((self)->dtbl->IASetVertexBuffers(self, __VA_ARGS__))
    void (STDCALLP IASetVertexBuffers)(ID3D12GraphicsCommandList *self,
                                       u32 start_slot,
                                       u32 num_views,
                                       const D3D12_VERTEX_BUFFER_VIEW *views);
#define ID3D12GraphicsCommandList_SOSetTargets(self, ...) ((self)->dtbl->SOSetTargets(self, __VA_ARGS__))
    void (STDCALLP SOSetTargets)(ID3D12GraphicsCommandList *self,
                                 u32 start_slot,
                                 u32 num_views,
                                 const D3D12_STREAM_OUTPUT_BUFFER_VIEW *views);
#define ID3D12GraphicsCommandList_OMSetRenderTargets(self, ...) ((self)->dtbl->OMSetRenderTargets(self, __VA_ARGS__))
    void (STDCALLP OMSetRenderTargets)(ID3D12GraphicsCommandList *self,
                                       u32 num_render_target_descriptors,
                                       const D3D12_CPU_DESCRIPTOR_HANDLE *render_target_descriptors,
                                       i32 single_handle_to_descriptor_range,
                                       const D3D12_CPU_DESCRIPTOR_HANDLE *depth_stencil_descriptor);
#define ID3D12GraphicsCommandList_ClearDepthStencilView(self, ...) ((self)->dtbl->ClearDepthStencilView(self, __VA_ARGS__))
    void (STDCALLP ClearDepthStencilView)(ID3D12GraphicsCommandList *self,
                                          D3D12_CPU_DESCRIPTOR_HANDLE depth_stencil_view,
                                          D3D12_CLEAR_FLAGS clear_flags,
                                          f32 depth,
                                          u8 stencil,
                                          u32 num_rects,
                                          const D3D12_RECT *rects);
#define ID3D12GraphicsCommandList_ClearRenderTargetView(self, ...) ((self)->dtbl->ClearRenderTargetView(self, __VA_ARGS__))
    void (STDCALLP ClearRenderTargetView)(ID3D12GraphicsCommandList *self,
                                          D3D12_CPU_DESCRIPTOR_HANDLE render_target_view,
                                          const f32 color_rgba[4],
                                          u32 num_rects,
                                          const D3D12_RECT *rects);
#define ID3D12GraphicsCommandList_ClearUnorderedAccessViewUint(self, ...) ((self)->dtbl->ClearUnorderedAccessViewUint(self, __VA_ARGS__))
    void (STDCALLP ClearUnorderedAccessViewUint)(ID3D12GraphicsCommandList *self,
                                                 D3D12_GPU_DESCRIPTOR_HANDLE view_gpu_handle_in_current_heap,
                                                 D3D12_CPU_DESCRIPTOR_HANDLE view_cpu_handle,
                                                 ID3D12Resource *resource,
                                                 const u32 values[4],
                                                 u32 num_rects,
                                                 const D3D12_RECT *rects);
#define ID3D12GraphicsCommandList_ClearUnorderedAccessViewFloat(self, ...) ((self)->dtbl->ClearUnorderedAccessViewFloat(self, __VA_ARGS__))
    void (STDCALLP ClearUnorderedAccessViewFloat)(ID3D12GraphicsCommandList *self,
                                                  D3D12_GPU_DESCRIPTOR_HANDLE view_gpu_handle_in_current_heap,
                                                  D3D12_CPU_DESCRIPTOR_HANDLE view_cpu_handle,
                                                  ID3D12Resource *resource,
                                                  const f32 values[4],
                                                  u32 num_rects,
                                                  const D3D12_RECT *rects);
#define ID3D12GraphicsCommandList_DiscardResource(self, ...) ((self)->dtbl->DiscardResource(self, __VA_ARGS__))
    void (STDCALLP DiscardResource)(ID3D12GraphicsCommandList *self,
                                    ID3D12Resource *resource,
                                    const D3D12_DISCARD_REGION *region);
#define ID3D12GraphicsCommandList_BeginQuery(self, ...) ((self)->dtbl->BeginQuery(self, __VA_ARGS__))
    void (STDCALLP BeginQuery)(ID3D12GraphicsCommandList *self,
                               ID3D12QueryHeap *query_heap,
                               D3D12_QUERY_TYPE type,
                               u32 index);
#define ID3D12GraphicsCommandList_EndQuery(self, ...) ((self)->dtbl->EndQuery(self, __VA_ARGS__))
    void (STDCALLP EndQuery)(ID3D12GraphicsCommandList *self,
                             ID3D12QueryHeap *query_heap,
                             D3D12_QUERY_TYPE type,
                             u32 index);
#define ID3D12GraphicsCommandList_ResolveQueryData(self, ...) ((self)->dtbl->ResolveQueryData(self, __VA_ARGS__))
    void (STDCALLP ResolveQueryData)(ID3D12GraphicsCommandList *self,
                                     ID3D12QueryHeap *query_heap,
                                     D3D12_QUERY_TYPE type,
                                     u32 start_index,
                                     u32 num_queries,
                                     ID3D12Resource *destination_buffer,
                                     u64 aligned_destination_buffer_offset);
#define ID3D12GraphicsCommandList_SetPredication(self, ...) ((self)->dtbl->SetPredication(self, __VA_ARGS__))
    void (STDCALLP SetPredication)(ID3D12GraphicsCommandList *self,
                                   ID3D12Resource *buffer,
                                   u64 aligned_buffer_offset,
                                   D3D12_PREDICATION_OP operation);
#define ID3D12GraphicsCommandList_SetMarker(self, ...) ((self)->dtbl->SetMarker(self, __VA_ARGS__))
    void (STDCALLP SetMarker)(ID3D12GraphicsCommandList *self, u32 metadata, const void *data, u32 size);
#define ID3D12GraphicsCommandList_BeginEvent(self, ...) ((self)->dtbl->BeginEvent(self, __VA_ARGS__))
    void (STDCALLP BeginEvent)(ID3D12GraphicsCommandList *self, u32 metadata, const void *data, u32 size);
#define ID3D12GraphicsCommandList_EndEvent(self, ...) ((self)->dtbl->EndEvent(self, __VA_ARGS__))
    void (STDCALLP EndEvent)(ID3D12GraphicsCommandList *self);
#define ID3D12GraphicsCommandList_ExecuteIndirect(self, ...) ((self)->dtbl->ExecuteIndirect(self, __VA_ARGS__))
    void (STDCALLP ExecuteIndirect)(ID3D12GraphicsCommandList *self,
                                    ID3D12CommandSignature *command_signature,
                                    u32 max_command_count,
                                    ID3D12Resource *argument_buffer,
                                    u64 argument_buffer_offset,
                                    ID3D12Resource *count_buffer,
                                    u64 count_buffer_offset);
} ID3D12GraphicsCommandListDispatchTable;
struct ID3D12GraphicsCommandList { const ID3D12GraphicsCommandListDispatchTable *dtbl; };

// ID3D12CommandQueue
typedef struct ID3D12CommandQueueDispatchTable
{
    // IUnknown
#define ID3D12CommandQueue_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12CommandQueue *self, const GUID *guid, void **out_object);
#define ID3D12CommandQueue_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12CommandQueue *self);
#define ID3D12CommandQueue_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12CommandQueue *self);
    // ID3D12Object
#define ID3D12CommandQueue_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12CommandQueue *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12CommandQueue_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12CommandQueue *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12CommandQueue_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12CommandQueue *self, const GUID *guid, const IUnknown *data);
#define ID3D12CommandQueue_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12CommandQueue *self, const u16 *name);
    // ID3D12DeviceChild
#define ID3D12CommandQueue_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(ID3D12CommandQueue *self, const GUID *guid, void **out_device);
    // ID3D12Pageable
    // ID3D12CommandQueue
#define ID3D12CommandQueue_UpdateTileMappings(self, ...) ((self)->dtbl->UpdateTileMappings(self, __VA_ARGS__))
    void (STDCALLP UpdateTileMappings)(ID3D12CommandQueue *self,
                                       ID3D12Resource *resource,
                                       u32 num_resource_regions,
                                       const D3D12_TILED_RESOURCE_COORDINATE *resource_region_start_coordinates,
                                       const D3D12_TILE_REGION_SIZE *resource_region_sizes,
                                       ID3D12Heap *heap,
                                       u32 num_ranges,
                                       const D3D12_TILE_RANGE_FLAGS *range_flags,
                                       const u32 *heap_range_start_offsets,
                                       const u32 *range_tile_counts,
                                       D3D12_TILE_MAPPING_FLAGS flags);
#define ID3D12CommandQueue_CopyTileMappings(self, ...) ((self)->dtbl->CopyTileMappings(self, __VA_ARGS__))
    void (STDCALLP CopyTileMappings)(ID3D12CommandQueue *self,
                                     ID3D12Resource *dst_resource,
                                     const D3D12_TILED_RESOURCE_COORDINATE *dst_region_start_coordinate,
                                     ID3D12Resource *src_resource,
                                     const D3D12_TILED_RESOURCE_COORDINATE *src_region_start_coordinate,
                                     const D3D12_TILE_REGION_SIZE *region_size,
                                     D3D12_TILE_MAPPING_FLAGS flags);
#define ID3D12CommandQueue_ExecuteCommandLists(self, ...) ((self)->dtbl->ExecuteCommandLists(self, __VA_ARGS__))
    void (STDCALLP ExecuteCommandLists)(ID3D12CommandQueue *self,
                                        u32 num_command_lists,
                                        ID3D12CommandList *const *command_lists);
#define ID3D12CommandQueue_SetMarker(self, ...) ((self)->dtbl->SetMarker(self, __VA_ARGS__))
    void (STDCALLP SetMarker)(ID3D12CommandQueue *self, u32 metadata, const void *data, u32 size);
#define ID3D12CommandQueue_BeginEvent(self, ...) ((self)->dtbl->BeginEvent(self, __VA_ARGS__))
    void (STDCALLP BeginEvent)(ID3D12CommandQueue *self, u32 metadata, const void *data, u32 size);
#define ID3D12CommandQueue_EndEvent(self, ...) ((self)->dtbl->EndEvent(self, __VA_ARGS__))
    void (STDCALLP EndEvent)(ID3D12CommandQueue *self);
#define ID3D12CommandQueue_Signal(self, ...) ((self)->dtbl->Signal(self, __VA_ARGS__))
    i32 (STDCALLP Signal)(ID3D12CommandQueue *self, ID3D12Fence *fence, u64 value);
#define ID3D12CommandQueue_Wait(self, ...) ((self)->dtbl->Wait(self, __VA_ARGS__))
    i32 (STDCALLP Wait)(ID3D12CommandQueue *self, ID3D12Fence *fence, u64 value);
#define ID3D12CommandQueue_GetTimestampFrequency(self, ...) ((self)->dtbl->GetTimestampFrequency(self, __VA_ARGS__))
    i32 (STDCALLP GetTimestampFrequency)(ID3D12CommandQueue *self, u64 *out_frequency);
#define ID3D12CommandQueue_GetClockCalibration(self, ...) ((self)->dtbl->GetClockCalibration(self, __VA_ARGS__))
    i32 (STDCALLP GetClockCalibration)(ID3D12CommandQueue *self, u64 *out_gpu_timestamp, u64 *out_cpu_timestamp);
#define ID3D12CommandQueue_GetDesc(self, ...) ((self)->dtbl->GetDesc(self, __VA_ARGS__))
    D3D12_COMMAND_QUEUE_DESC *(STDCALLP GetDesc)(ID3D12CommandQueue *self, D3D12_COMMAND_QUEUE_DESC *out_desc);
} ID3D12CommandQueueDispatchTable;
struct ID3D12CommandQueue { const ID3D12CommandQueueDispatchTable *dtbl; };

// ID3D12Device
typedef struct ID3D12DeviceDispatchTable
{
    // IUnknown
#define ID3D12Device_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12Device *self, const GUID *guid, void **out_object);
#define ID3D12Device_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12Device *self);
#define ID3D12Device_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12Device *self);
    // ID3D12Object
#define ID3D12Device_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(ID3D12Device *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define ID3D12Device_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(ID3D12Device *self, const GUID *guid, u32 data_size, const void *data);
#define ID3D12Device_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Device *self, const GUID *guid, const IUnknown *data);
#define ID3D12Device_SetName(self, ...) ((self)->dtbl->SetName(self, __VA_ARGS__))
    i32 (STDCALLP SetName)(ID3D12Device *self, const u16 *name);
    // ID3D12Device
#define ID3D12Device_GetNodeCount(self, ...) ((self)->dtbl->GetNodeCount(self, __VA_ARGS__))
    u32 (STDCALLP GetNodeCount)(ID3D12Device *self);
#define ID3D12Device_CreateCommandQueue(self, ...) ((self)->dtbl->CreateCommandQueue(self, __VA_ARGS__))
    i32 (STDCALLP CreateCommandQueue)(ID3D12Device *self,
                                      const D3D12_COMMAND_QUEUE_DESC *desc,
                                      const GUID *guid,
                                      void **out_command_queue);
#define ID3D12Device_CreateCommandAllocator(self, ...) ((self)->dtbl->CreateCommandAllocator(self, __VA_ARGS__))
    i32 (STDCALLP CreateCommandAllocator)(ID3D12Device *self,
                                          D3D12_COMMAND_LIST_TYPE type,
                                          const GUID *guid,
                                          void **out_command_allocator);
#define ID3D12Device_CreateGraphicsPipelineState(self, ...) ((self)->dtbl->CreateGraphicsPipelineState(self, __VA_ARGS__))
    i32 (STDCALLP CreateGraphicsPipelineState)(ID3D12Device *self,
                                               const D3D12_GRAPHICS_PIPELINE_STATE_DESC *desc,
                                               const GUID *guid,
                                               void **out_pipeline_state);
#define ID3D12Device_CreateComputePipelineState(self, ...) ((self)->dtbl->CreateComputePipelineState(self, __VA_ARGS__))
    i32 (STDCALLP CreateComputePipelineState)(ID3D12Device *self,
                                              const D3D12_COMPUTE_PIPELINE_STATE_DESC *desc,
                                              const GUID *guid,
                                              void **out_pipeline_state);
#define ID3D12Device_CreateCommandList(self, ...) ((self)->dtbl->CreateCommandList(self, __VA_ARGS__))
    i32 (STDCALLP CreateCommandList)(ID3D12Device *self,
                                     u32 node_mask,
                                     D3D12_COMMAND_LIST_TYPE type,
                                     ID3D12CommandAllocator *command_allocator,
                                     ID3D12PipelineState *initial_state,
                                     const GUID *guid,
                                     void **out_command_list);
#define ID3D12Device_CheckFeatureSupport(self, ...) ((self)->dtbl->CheckFeatureSupport(self, __VA_ARGS__))
    i32 (STDCALLP CheckFeatureSupport)(ID3D12Device *self,
                                       D3D12_FEATURE feature,
                                       void *out_feature_support_data,
                                       u32 feature_support_data_size);
#define ID3D12Device_CreateDescriptorHeap(self, ...) ((self)->dtbl->CreateDescriptorHeap(self, __VA_ARGS__))
    i32 (STDCALLP CreateDescriptorHeap)(ID3D12Device *self,
                                        const D3D12_DESCRIPTOR_HEAP_DESC *desc,
                                        const GUID *guid,
                                        void **out_heap);
#define ID3D12Device_GetDescriptorHandleIncrementSize(self, ...) ((self)->dtbl->GetDescriptorHandleIncrementSize(self, __VA_ARGS__))
    u32 (STDCALLP GetDescriptorHandleIncrementSize)(ID3D12Device *self, D3D12_DESCRIPTOR_HEAP_TYPE type);
#define ID3D12Device_CreateRootSignature(self, ...) ((self)->dtbl->CreateRootSignature(self, __VA_ARGS__))
    i32 (STDCALLP CreateRootSignature)(ID3D12Device *self,
                                       u32 node_mask,
                                       const void *blob_with_root_signature,
                                       u64 blob_length_in_bytes,
                                       const GUID *guid,
                                       void **root_signature);
#define ID3D12Device_CreateConstantBufferView(self, ...) ((self)->dtbl->CreateConstantBufferView(self, __VA_ARGS__))
    void (STDCALLP CreateConstantBufferView)(ID3D12Device *self,
                                             const D3D12_CONSTANT_BUFFER_VIEW_DESC *desc,
                                             D3D12_CPU_DESCRIPTOR_HANDLE dest_descriptor);
#define ID3D12Device_CreateShaderResourceView(self, ...) ((self)->dtbl->CreateShaderResourceView(self, __VA_ARGS__))
    void (STDCALLP CreateShaderResourceView)(ID3D12Device *self,
                                             ID3D12Resource *resource,
                                             const D3D12_SHADER_RESOURCE_VIEW_DESC *desc,
                                             D3D12_CPU_DESCRIPTOR_HANDLE dest_descriptor);
#define ID3D12Device_CreateUnorderedAccessView(self, ...) ((self)->dtbl->CreateUnorderedAccessView(self, __VA_ARGS__))
    void (STDCALLP CreateUnorderedAccessView)(ID3D12Device *self,
                                              ID3D12Resource *resource,
                                              ID3D12Resource *counter_resource,
                                              const D3D12_UNORDERED_ACCESS_VIEW_DESC *desc,
                                              D3D12_CPU_DESCRIPTOR_HANDLE dest_descriptor);
#define ID3D12Device_CreateRenderTargetView(self, ...) ((self)->dtbl->CreateRenderTargetView(self, __VA_ARGS__))
    void (STDCALLP CreateRenderTargetView)(ID3D12Device *self,
                                           ID3D12Resource *resource,
                                           const D3D12_RENDER_TARGET_VIEW_DESC *desc,
                                           D3D12_CPU_DESCRIPTOR_HANDLE dest_descriptor);
#define ID3D12Device_CreateDepthStencilView(self, ...) ((self)->dtbl->CreateDepthStencilView(self, __VA_ARGS__))
    void (STDCALLP CreateDepthStencilView)(ID3D12Device *self,
                                           ID3D12Resource *resource,
                                           const D3D12_DEPTH_STENCIL_VIEW_DESC *desc,
                                           D3D12_CPU_DESCRIPTOR_HANDLE dest_descriptor);
#define ID3D12Device_CreateSampler(self, ...) ((self)->dtbl->CreateSampler(self, __VA_ARGS__))
    void (STDCALLP CreateSampler)(ID3D12Device *self,
                                  const D3D12_SAMPLER_DESC *desc,
                                  D3D12_CPU_DESCRIPTOR_HANDLE dest_descriptor);
#define ID3D12Device_CopyDescriptors(self, ...) ((self)->dtbl->CopyDescriptors(self, __VA_ARGS__))
    void (STDCALLP CopyDescriptors)(ID3D12Device *self,
                                    u32 num_dest_descriptor_ranges,
                                    const D3D12_CPU_DESCRIPTOR_HANDLE *dest_descriptor_range_starts,
                                    const u32 *dest_descriptor_range_sizes,
                                    u32 num_src_descriptor_ranges,
                                    const D3D12_CPU_DESCRIPTOR_HANDLE *src_descriptor_range_starts,
                                    const u32 *src_descriptor_range_sizes,
                                    D3D12_DESCRIPTOR_HEAP_TYPE descriptor_heaps_type);
#define ID3D12Device_CopyDescriptorsSimple(self, ...) ((self)->dtbl->CopyDescriptorsSimple(self, __VA_ARGS__))
    void (STDCALLP CopyDescriptorsSimple)(ID3D12Device *self,
                                          u32 num_descriptors,
                                          D3D12_CPU_DESCRIPTOR_HANDLE dest_descriptor_range_start,
                                          D3D12_CPU_DESCRIPTOR_HANDLE src_descriptor_range_start,
                                          D3D12_DESCRIPTOR_HEAP_TYPE descriptor_heaps_type);
#define ID3D12Device_GetResourceAllocationInfo(self, ...) ((self)->dtbl->GetResourceAllocationInfo(self, __VA_ARGS__))
    D3D12_RESOURCE_ALLOCATION_INFO *(STDCALLP GetResourceAllocationInfo)(ID3D12Device *self,
                                                                         u32 visible_mask,
                                                                         u32 num_resource_descs,
                                                                         const D3D12_RESOURCE_DESC *resource_descs,
                                                                         D3D12_RESOURCE_ALLOCATION_INFO *out_alloc_info);
#define ID3D12Device_GetCustomHeapProperties(self, ...) ((self)->dtbl->GetCustomHeapProperties(self, __VA_ARGS__))
    D3D12_HEAP_PROPERTIES *(STDCALLP GetCustomHeapProperties)(ID3D12Device *self,
                                                              u32 node_mask,
                                                              D3D12_HEAP_TYPE heap_type,
                                                              D3D12_HEAP_PROPERTIES *out_heap_properties);
#define ID3D12Device_CreateCommittedResource(self, ...) ((self)->dtbl->CreateCommittedResource(self, __VA_ARGS__))
    i32 (STDCALLP CreateCommittedResource)(ID3D12Device *self,
                                           const D3D12_HEAP_PROPERTIES *heap_properties,
                                           D3D12_HEAP_FLAGS heap_flags,
                                           const D3D12_RESOURCE_DESC *desc,
                                           D3D12_RESOURCE_STATES initial_resource_state,
                                           const D3D12_CLEAR_VALUE *optimized_clear_value,
                                           const GUID *guid,
                                           void **out_resource);
#define ID3D12Device_CreateHeap(self, ...) ((self)->dtbl->CreateHeap(self, __VA_ARGS__))
    i32 (STDCALLP CreateHeap)(ID3D12Device *self, const D3D12_HEAP_DESC *desc, const GUID *guid, void **out_heap);
#define ID3D12Device_CreatePlacedResource(self, ...) ((self)->dtbl->CreatePlacedResource(self, __VA_ARGS__))
    i32 (STDCALLP CreatePlacedResource)(ID3D12Device *self,
                                        ID3D12Heap *heap,
                                        u64 heap_offset,
                                        const D3D12_RESOURCE_DESC *desc,
                                        D3D12_RESOURCE_STATES initial_resource_state,
                                        const D3D12_CLEAR_VALUE *optimized_clear_value,
                                        const GUID *guid, void **out_resource);
#define ID3D12Device_CreateReservedResource(self, ...) ((self)->dtbl->CreateReservedResource(self, __VA_ARGS__))
    i32 (STDCALLP CreateReservedResource)(ID3D12Device *self,
                                          const D3D12_RESOURCE_DESC *desc,
                                          D3D12_RESOURCE_STATES initial_resource_state,
                                          const D3D12_CLEAR_VALUE *optimized_clear_value,
                                          const GUID *guid,
                                          void **out_resource);
#define ID3D12Device_CreateSharedHandle(self, ...) ((self)->dtbl->CreateSharedHandle(self, __VA_ARGS__))
    i32 (STDCALLP CreateSharedHandle)(ID3D12Device *self,
                                      ID3D12DeviceChild *object,
                                      const SECURITY_ATTRIBUTES *attributes,
                                      u32 access,
                                      u16 *name,
                                      void **out_handle);
#define ID3D12Device_OpenSharedHandle(self, ...) ((self)->dtbl->OpenSharedHandle(self, __VA_ARGS__))
    i32 (STDCALLP OpenSharedHandle)(ID3D12Device *self, void *nt_handle, const GUID *guid, void **out_object);
#define ID3D12Device_OpenSharedHandleByName(self, ...) ((self)->dtbl->OpenSharedHandleByName(self, __VA_ARGS__))
    i32 (STDCALLP OpenSharedHandleByName)(ID3D12Device *self, u16 *name, u32 access, void **out_nt_handle);
#define ID3D12Device_MakeResident(self, ...) ((self)->dtbl->MakeResident(self, __VA_ARGS__))
    i32 (STDCALLP MakeResident)(ID3D12Device *self, u32 num_objects, ID3D12Pageable *const *objects);
#define ID3D12Device_Evict(self, ...) ((self)->dtbl->Evict(self, __VA_ARGS__))
    i32 (STDCALLP Evict)(ID3D12Device *self, u32 num_objects, ID3D12Pageable *const *objects);
#define ID3D12Device_CreateFence(self, ...) ((self)->dtbl->CreateFence(self, __VA_ARGS__))
    i32 (STDCALLP CreateFence)(ID3D12Device *self,
                               u64 initial_value,
                               D3D12_FENCE_FLAGS flags,
                               const GUID *guid,
                               void **out_fence);
#define ID3D12Device_GetDeviceRemovedReason(self, ...) ((self)->dtbl->GetDeviceRemovedReason(self, __VA_ARGS__))
    i32 (STDCALLP GetDeviceRemovedReason)(ID3D12Device *self);
#define ID3D12Device_GetCopyableFootprints(self, ...) ((self)->dtbl->GetCopyableFootprints(self, __VA_ARGS__))
    void (STDCALLP GetCopyableFootprints)(ID3D12Device *self,
                                          const D3D12_RESOURCE_DESC *desc,
                                          u32 first_subresource,
                                          u32 num_subresources,
                                          u64 base_offset,
                                          D3D12_PLACED_SUBRESOURCE_FOOTPRINT *out_layouts,
                                          u32 *out_num_rows,
                                          u64 *out_row_size_in_bytes,
                                          u64 *out_total_bytes);
#define ID3D12Device_CreateQueryHeap(self, ...) ((self)->dtbl->CreateQueryHeap(self, __VA_ARGS__))
    i32 (STDCALLP CreateQueryHeap)(ID3D12Device *self,
                                   const D3D12_QUERY_HEAP_DESC *desc,
                                   const GUID *guid,
                                   void **out_heap);
#define ID3D12Device_SetStablePowerState(self, ...) ((self)->dtbl->SetStablePowerState(self, __VA_ARGS__))
    i32 (STDCALLP SetStablePowerState)(ID3D12Device *self, i32 enable);
#define ID3D12Device_CreateCommandSignature(self, ...) ((self)->dtbl->CreateCommandSignature(self, __VA_ARGS__))
    i32 (STDCALLP CreateCommandSignature)(ID3D12Device *self,
                                          const D3D12_COMMAND_SIGNATURE_DESC *desc,
                                          ID3D12RootSignature *root_signature,
                                          const GUID *guid,
                                          void **out_command_signature);
#define ID3D12Device_GetResourceTiling(self, ...) ((self)->dtbl->GetResourceTiling(self, __VA_ARGS__))
    void (STDCALLP GetResourceTiling)(ID3D12Device *self,
                                      ID3D12Resource *tiled_resource,
                                      u32 *out_num_tiles_for_entire_resource,
                                      D3D12_PACKED_MIP_INFO *out_packed_mip_desc,
                                      D3D12_TILE_SHAPE *out_standard_tile_shape_for_non_packed_mips,
                                      u32 *out_num_subresource_tilings,
                                      u32 first_subresource_tiling_to_get,
                                      D3D12_SUBRESOURCE_TILING *out_subresource_tiling_for_non_packed_mips);
#define ID3D12Device_GetAdapterLuid(self, ...) ((self)->dtbl->GetAdapterLuid(self, __VA_ARGS__))
    i64 (STDCALLP GetAdapterLuid)(ID3D12Device *self);
} ID3D12DeviceDispatchTable;
struct ID3D12Device { const ID3D12DeviceDispatchTable *dtbl; };

// ID3D12Debug
typedef struct ID3D12DebugDispatchTable
{
    // IUnknown
#define ID3D12Debug_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(ID3D12Debug *self, const GUID *guid, void **out_object);
#define ID3D12Debug_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(ID3D12Debug *self);
#define ID3D12Debug_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(ID3D12Debug *self);
    // ID3D12Debug
#define ID3D12Debug_EnableDebugLayer(self, ...) ((self)->dtbl->EnableDebugLayer(self, __VA_ARGS__))
    void (STDCALLP EnableDebugLayer)(ID3D12Debug *self);
} ID3D12DebugDispatchTable;
struct ID3D12Debug { const ID3D12DebugDispatchTable *dtbl; };


typedef struct DXGI_RGB {
    f32 Red;
    f32 Green;
    f32 Blue;
} DXGI_RGB;

typedef struct DXGI_RGBA {
    f32 Red;
    f32 Green;
    f32 Blue;
    f32 Alpha;
} DXGI_RGBA;

typedef struct DXGI_GAMMA_CONTROL {
    DXGI_RGB Scale;
    DXGI_RGB Offset;
    DXGI_RGB GammaCurve[1025];
} DXGI_GAMMA_CONTROL;

typedef struct DXGI_GAMMA_CONTROL_CAPABILITIES {
    i32 ScaleAndOffsetSupported;
    f32 MaxConvertedValue;
    f32 MinConvertedValue;
    u32 NumGammaControlPoints;
    f32 ControlPointPositions[1025];
} DXGI_GAMMA_CONTROL_CAPABILITIES;

typedef struct DXGI_RATIONAL {
    u32 Numerator;
    u32 Denominator;
} DXGI_RATIONAL;

typedef enum DXGI_MODE_SCANLINE_ORDER {
    DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED = 0,
    DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE = 1,
    DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2,
    DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3
} DXGI_MODE_SCANLINE_ORDER;

typedef enum DXGI_MODE_SCALING {
    DXGI_MODE_SCALING_UNSPECIFIED = 0,
    DXGI_MODE_SCALING_CENTERED = 1,
    DXGI_MODE_SCALING_STRETCHED = 2
} DXGI_MODE_SCALING;

typedef enum DXGI_MODE_ROTATION {
    DXGI_MODE_ROTATION_UNSPECIFIED = 0,
    DXGI_MODE_ROTATION_IDENTITY = 1,
    DXGI_MODE_ROTATION_ROTATE90 = 2,
    DXGI_MODE_ROTATION_ROTATE180 = 3,
    DXGI_MODE_ROTATION_ROTATE270 = 4
} DXGI_MODE_ROTATION;

typedef struct DXGI_MODE_DESC {
    u32 Width;
    u32 Height;
    DXGI_RATIONAL RefreshRate;
    DXGI_FORMAT Format;
    DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
    DXGI_MODE_SCALING Scaling;
} DXGI_MODE_DESC;

typedef struct DXGI_OUTPUT_DESC {
    u16 DeviceName[32];
    D3D12_RECT DesktopCoordinates;
    i32 AttachedToDesktop;
    DXGI_MODE_ROTATION Rotation;
    void *Monitor;
} DXGI_OUTPUT_DESC;

typedef struct DXGI_SURFACE_DESC {
    u32 Width;
    u32 Height;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
} DXGI_SURFACE_DESC;

typedef struct DXGI_MAPPED_RECT {
    i32 Pitch;
    u8 *pBits;
} DXGI_MAPPED_RECT;

typedef struct DXGI_FRAME_STATISTICS {
    u32 PresentCount;
    u32 PresentRefreshCount;
    u32 SyncRefreshCount;
    i64 SyncQPCTime;
    i64 SyncGPUTime;
} DXGI_FRAME_STATISTICS;

typedef struct DXGI_ADAPTER_DESC {
    u16 Description[128];
    u32 VendorId;
    u32 DeviceId;
    u32 SubSysId;
    u32 Revision;
    u64 DedicatedVideoMemory;
    u64 DedicatedSystemMemory;
    u64 SharedSystemMemory;
    i64 AdapterLuid;
} DXGI_ADAPTER_DESC;

typedef struct DXGI_ADAPTER_DESC1 {
    u16 Description[128];
    u32 VendorId;
    u32 DeviceId;
    u32 SubSysId;
    u32 Revision;
    u64 DedicatedVideoMemory;
    u64 DedicatedSystemMemory;
    u64 SharedSystemMemory;
    i64 AdapterLuid;
    u32 Flags;
} DXGI_ADAPTER_DESC1;

#define DXGI_USAGE_SHADER_INPUT 0x00000010UL
#define DXGI_USAGE_RENDER_TARGET_OUTPUT 0x00000020UL
#define DXGI_USAGE_BACK_BUFFER 0x00000040UL
#define DXGI_USAGE_SHARED 0x00000080UL
#define DXGI_USAGE_READ_ONLY 0x00000100UL
#define DXGI_USAGE_DISCARD_ON_PRESENT 0x00000200UL
#define DXGI_USAGE_UNORDERED_ACCESS 0x00000400UL
typedef u32 DXGI_USAGE;

typedef enum DXGI_SWAP_EFFECT {
    DXGI_SWAP_EFFECT_DISCARD = 0,
    DXGI_SWAP_EFFECT_SEQUENTIAL = 1,
    DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL = 3,
    DXGI_SWAP_EFFECT_FLIP_DISCARD = 4
} DXGI_SWAP_EFFECT;

typedef struct DXGI_SWAP_CHAIN_DESC {
    DXGI_MODE_DESC BufferDesc;
    DXGI_SAMPLE_DESC SampleDesc;
    DXGI_USAGE BufferUsage;
    u32 BufferCount;
    void *OutputWindow;
    i32 Windowed;
    DXGI_SWAP_EFFECT SwapEffect;
    u32 Flags;
} DXGI_SWAP_CHAIN_DESC;

typedef enum DXGI_SCALING {
    DXGI_SCALING_STRETCH = 0,
    DXGI_SCALING_NONE = 1,
    DXGI_SCALING_ASPECT_RATIO_STRETCH = 2
} DXGI_SCALING;

typedef enum DXGI_ALPHA_MODE {
    DXGI_ALPHA_MODE_UNSPECIFIED = 0,
    DXGI_ALPHA_MODE_PREMULTIPLIED = 1,
    DXGI_ALPHA_MODE_STRAIGHT = 2,
    DXGI_ALPHA_MODE_IGNORE = 3,
    DXGI_ALPHA_MODE_FORCE_DWORD = 0xffffffff
} DXGI_ALPHA_MODE;

typedef struct DXGI_SWAP_CHAIN_DESC1 {
    u32 Width;
    u32 Height;
    DXGI_FORMAT Format;
    i32 Stereo;
    DXGI_SAMPLE_DESC SampleDesc;
    DXGI_USAGE BufferUsage;
    u32 BufferCount;
    DXGI_SCALING Scaling;
    DXGI_SWAP_EFFECT SwapEffect;
    DXGI_ALPHA_MODE AlphaMode;
    u32 Flags;
} DXGI_SWAP_CHAIN_DESC1;

typedef struct DXGI_SWAP_CHAIN_FULLSCREEN_DESC {
    DXGI_RATIONAL RefreshRate;
    DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
    DXGI_MODE_SCALING Scaling;
    i32 Windowed;
} DXGI_SWAP_CHAIN_FULLSCREEN_DESC;

typedef struct DXGI_PRESENT_PARAMETERS {
    u32 DirtyRectsCount;
    D3D12_RECT *pDirtyRects;
    D3D12_RECT *pScrollRect;
    POINT *pScrollOffset;
} DXGI_PRESENT_PARAMETERS;

typedef struct DXGI_MATRIX_3X2_F {
    f32 _11;
    f32 _12;
    f32 _21;
    f32 _22;
    f32 _31;
    f32 _32;
} DXGI_MATRIX_3X2_F;

typedef enum DXGI_COLOR_SPACE_TYPE {
    DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0,
    DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1,
    DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2,
    DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3,
    DXGI_COLOR_SPACE_RESERVED = 4,
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6,
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8,
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10,
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11,
    DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13,
    DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16,
    DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17,
    DXGI_COLOR_SPACE_CUSTOM = 0xFFFFFFFF
} DXGI_COLOR_SPACE_TYPE;

typedef struct IDXGISwapChainDispatchTable
{
    // IUnknown
#define IDXGISwapChain_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(IDXGISwapChain *self, const GUID *guid, void **out_object);
#define IDXGISwapChain_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(IDXGISwapChain *self);
#define IDXGISwapChain_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(IDXGISwapChain *self);
    // IDXGIObject
#define IDXGISwapChain_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(IDXGISwapChain *self, const GUID *guid, u32 data_size, const void *data);
#define IDXGISwapChain_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(IDXGISwapChain *self, const GUID *guid, const IUnknown *data);
#define IDXGISwapChain_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(IDXGISwapChain *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define IDXGISwapChain_GetParent(self, ...) ((self)->dtbl->GetParent(self, __VA_ARGS__))
    i32 (STDCALLP GetParent)(IDXGISwapChain *self, const GUID *guid, void **out_parent);
    // IDXGIDeviceSubObject
#define IDXGISwapChain_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(IDXGISwapChain *self, const GUID *guid, void **out_device);
    // IDXGISwapChain
#define IDXGISwapChain_Present(self, ...) ((self)->dtbl->Present(self, __VA_ARGS__))
    i32 (STDCALLP Present)(IDXGISwapChain *self, u32 sync_interval, u32 flags);
#define IDXGISwapChain_GetBuffer(self, ...) ((self)->dtbl->GetBuffer(self, __VA_ARGS__))
    i32 (STDCALLP GetBuffer)(IDXGISwapChain *self, u32 buffer, const GUID *guid, void **out_surface);
#define IDXGISwapChain_SetFullscreenState(self, ...) ((self)->dtbl->SetFullscreenState(self, __VA_ARGS__))
    i32 (STDCALLP SetFullscreenState)(IDXGISwapChain *self, i32 fullscreen, IDXGIOutput *target);
#define IDXGISwapChain_GetFullscreenState(self, ...) ((self)->dtbl->GetFullscreenState(self, __VA_ARGS__))
    i32 (STDCALLP GetFullscreenState)(IDXGISwapChain *self, i32 *out_fullscreen, IDXGIOutput **out_target);
#define IDXGISwapChain_GetDesc(self, ...) ((self)->dtbl->GetDesc(self, __VA_ARGS__))
    i32 (STDCALLP GetDesc)(IDXGISwapChain *self, DXGI_SWAP_CHAIN_DESC *out_desc);
#define IDXGISwapChain_ResizeBuffers(self, ...) ((self)->dtbl->ResizeBuffers(self, __VA_ARGS__))
    i32 (STDCALLP ResizeBuffers)(IDXGISwapChain *self,
                                 u32 buffer_count,
                                 u32 width,
                                 u32 height,
                                 DXGI_FORMAT new_format,
                                 u32 swap_chain_flags);
#define IDXGISwapChain_ResizeTarget(self, ...) ((self)->dtbl->ResizeTarget(self, __VA_ARGS__))
    i32 (STDCALLP ResizeTarget)(IDXGISwapChain *self, const DXGI_MODE_DESC *new_target_parameters);
#define IDXGISwapChain_GetContainingOutput(self, ...) ((self)->dtbl->GetContainingOutput(self, __VA_ARGS__))
    i32 (STDCALLP GetContainingOutput)(IDXGISwapChain *self, IDXGIOutput **out_output);
#define IDXGISwapChain_GetFrameStatistics(self, ...) ((self)->dtbl->GetFrameStatistics(self, __VA_ARGS__))
    i32 (STDCALLP GetFrameStatistics)(IDXGISwapChain *self, DXGI_FRAME_STATISTICS *out_stats);
#define IDXGISwapChain_GetLastPresentCount(self, ...) ((self)->dtbl->GetLastPresentCount(self, __VA_ARGS__))
    i32 (STDCALLP GetLastPresentCount)(IDXGISwapChain *self, u32 *out_last_present_count);
} IDXGISwapChainDispatchTable;
struct IDXGISwapChain { const IDXGISwapChainDispatchTable *dtbl; };

typedef struct IDXGISwapChain3DispatchTable
{
    // IUnknown
#define IDXGISwapChain3_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(IDXGISwapChain3 *self, const GUID *guid, void **out_object);
#define IDXGISwapChain3_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(IDXGISwapChain3 *self);
#define IDXGISwapChain3_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(IDXGISwapChain3 *self);
    // IDXGIObject
#define IDXGISwapChain3_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(IDXGISwapChain3 *self, const GUID *guid, u32 data_size, const void *data);
#define IDXGISwapChain3_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(IDXGISwapChain3 *self, const GUID *guid, const IUnknown *data);
#define IDXGISwapChain3_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(IDXGISwapChain3 *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define IDXGISwapChain3_GetParent(self, ...) ((self)->dtbl->GetParent(self, __VA_ARGS__))
    i32 (STDCALLP GetParent)(IDXGISwapChain3 *self, const GUID *guid, void **out_parent);
    // IDXGIDeviceSubObject
#define IDXGISwapChain3_GetDevice(self, ...) ((self)->dtbl->GetDevice(self, __VA_ARGS__))
    i32 (STDCALLP GetDevice)(IDXGISwapChain3 *self, const GUID *guid, void **out_device);
    // IDXGISwapChain
#define IDXGISwapChain3_Present(self, ...) ((self)->dtbl->Present(self, __VA_ARGS__))
    i32 (STDCALLP Present)(IDXGISwapChain3 *self, u32 sync_interval, u32 flags);
#define IDXGISwapChain3_GetBuffer(self, ...) ((self)->dtbl->GetBuffer(self, __VA_ARGS__))
    i32 (STDCALLP GetBuffer)(IDXGISwapChain3 *self, u32 buffer, const GUID *guid, void **out_surface);
#define IDXGISwapChain3_SetFullscreenState(self, ...) ((self)->dtbl->SetFullscreenState(self, __VA_ARGS__))
    i32 (STDCALLP SetFullscreenState)(IDXGISwapChain3 *self, i32 fullscreen, IDXGIOutput *target);
#define IDXGISwapChain3_GetFullscreenState(self, ...) ((self)->dtbl->GetFullscreenState(self, __VA_ARGS__))
    i32 (STDCALLP GetFullscreenState)(IDXGISwapChain3 *self, i32 *out_fullscreen, IDXGIOutput **out_target);
#define IDXGISwapChain3_GetDesc(self, ...) ((self)->dtbl->GetDesc(self, __VA_ARGS__))
    i32 (STDCALLP GetDesc)(IDXGISwapChain3 *self, DXGI_SWAP_CHAIN_DESC *out_desc);
#define IDXGISwapChain3_ResizeBuffers(self, ...) ((self)->dtbl->ResizeBuffers(self, __VA_ARGS__))
    i32 (STDCALLP ResizeBuffers)(IDXGISwapChain3 *self,
                                 u32 buffer_count,
                                 u32 width,
                                 u32 height,
                                 DXGI_FORMAT new_format,
                                 u32 swap_chain_flags);
#define IDXGISwapChain3_ResizeTarget(self, ...) ((self)->dtbl->ResizeTarget(self, __VA_ARGS__))
    i32 (STDCALLP ResizeTarget)(IDXGISwapChain3 *self, const DXGI_MODE_DESC *new_target_parameters);
#define IDXGISwapChain3_GetContainingOutput(self, ...) ((self)->dtbl->GetContainingOutput(self, __VA_ARGS__))
    i32 (STDCALLP GetContainingOutput)(IDXGISwapChain3 *self, IDXGIOutput **out_output);
#define IDXGISwapChain3_GetFrameStatistics(self, ...) ((self)->dtbl->GetFrameStatistics(self, __VA_ARGS__))
    i32 (STDCALLP GetFrameStatistics)(IDXGISwapChain3 *self, DXGI_FRAME_STATISTICS *out_stats);
#define IDXGISwapChain3_GetLastPresentCount(self, ...) ((self)->dtbl->GetLastPresentCount(self, __VA_ARGS__))
    i32 (STDCALLP GetLastPresentCount)(IDXGISwapChain3 *self, u32 *out_last_present_count);
    // IDXGISwapChain2
#define IDXGISwapChain3_GetDesc1(self, ...) ((self)->dtbl->GetDesc1(self, __VA_ARGS__))
    i32 (STDCALLP GetDesc1)(IDXGISwapChain3 *self, DXGI_SWAP_CHAIN_DESC1 *out_desc);
#define IDXGISwapChain3_GetFullscreenDesc(self, ...) ((self)->dtbl->GetFullscreenDesc(self, __VA_ARGS__))
    i32 (STDCALLP GetFullscreenDesc)(IDXGISwapChain3 *self, DXGI_SWAP_CHAIN_FULLSCREEN_DESC *out_desc);
#define IDXGISwapChain3_GetHwnd(self, ...) ((self)->dtbl->GetHwnd(self, __VA_ARGS__))
    i32 (STDCALLP GetHwnd)(IDXGISwapChain3 *self, void **out_hwnd);
#define IDXGISwapChain3_GetCoreWindow(self, ...) ((self)->dtbl->GetCoreWindow(self, __VA_ARGS__))
    i32 (STDCALLP GetCoreWindow)(IDXGISwapChain3 *self, const GUID *guid, void **out_window);
#define IDXGISwapChain3_Present1(self, ...) ((self)->dtbl->Present1(self, __VA_ARGS__))
    i32 (STDCALLP Present1)(IDXGISwapChain3 *self, u32 sync_interval, u32 flags, const DXGI_PRESENT_PARAMETERS *params);
#define IDXGISwapChain3_IsTemporaryMonoSupported(self, ...) ((self)->dtbl->IsTemporaryMonoSupported(self, __VA_ARGS__))
    i32 (STDCALLP IsTemporaryMonoSupported)(IDXGISwapChain3 *self);
#define IDXGISwapChain3_GetRestrictToOutput(self, ...) ((self)->dtbl->GetRestrictToOutput(self, __VA_ARGS__))
    i32 (STDCALLP GetRestrictToOutput)(IDXGISwapChain3 *self, IDXGIOutput **out_restrict_to_output);
#define IDXGISwapChain3_SetBackgroundColor(self, ...) ((self)->dtbl->SetBackgroundColor(self, __VA_ARGS__))
    i32 (STDCALLP SetBackgroundColor)(IDXGISwapChain3 *self, const DXGI_RGBA *color);
#define IDXGISwapChain3_GetBackgroundColor(self, ...) ((self)->dtbl->GetBackgroundColor(self, __VA_ARGS__))
    i32 (STDCALLP GetBackgroundColor)(IDXGISwapChain3 *self, DXGI_RGBA *out_color);
#define IDXGISwapChain3_SetRotation(self, ...) ((self)->dtbl->SetRotation(self, __VA_ARGS__))
    i32 (STDCALLP SetRotation)(IDXGISwapChain3 *self, DXGI_MODE_ROTATION rotation);
#define IDXGISwapChain3_GetRotation(self, ...) ((self)->dtbl->GetRotation(self, __VA_ARGS__))
    i32 (STDCALLP GetRotation)(IDXGISwapChain3 *self, DXGI_MODE_ROTATION *out_rotation);
#define IDXGISwapChain3_SetSourceSize(self, ...) ((self)->dtbl->SetSourceSize(self, __VA_ARGS__))
    i32 (STDCALLP SetSourceSize)(IDXGISwapChain3 *self, u32 width, u32 height);
#define IDXGISwapChain3_GetSourceSize(self, ...) ((self)->dtbl->GetSourceSize(self, __VA_ARGS__))
    i32 (STDCALLP GetSourceSize)(IDXGISwapChain3 *self, u32 *out_width, u32 *out_height);
#define IDXGISwapChain3_SetMaximumFrameLatency(self, ...) ((self)->dtbl->SetMaximumFrameLatency(self, __VA_ARGS__))
    i32 (STDCALLP SetMaximumFrameLatency)(IDXGISwapChain3 *self, u32 max_latency);
#define IDXGISwapChain3_GetMaximumFrameLatency(self, ...) ((self)->dtbl->GetMaximumFrameLatency(self, __VA_ARGS__))
    i32 (STDCALLP GetMaximumFrameLatency)(IDXGISwapChain3 *self, u32 *out_max_latency);
#define IDXGISwapChain3_GetFrameLatencyWaitableObject(self, ...) ((self)->dtbl->GetFrameLatencyWaitableObject(self, __VA_ARGS__))
    void *(STDCALLP GetFrameLatencyWaitableObject)(IDXGISwapChain3 *self);
#define IDXGISwapChain3_SetMatrixTransform(self, ...) ((self)->dtbl->SetMatrixTransform(self, __VA_ARGS__))
    i32 (STDCALLP SetMatrixTransform)(IDXGISwapChain3 *self, const DXGI_MATRIX_3X2_F *matrix);
#define IDXGISwapChain3_GetMatrixTransform(self, ...) ((self)->dtbl->GetMatrixTransform(self, __VA_ARGS__))
    i32 (STDCALLP GetMatrixTransform)(IDXGISwapChain3 *self, DXGI_MATRIX_3X2_F *out_matrix);
    // IDXGISwapChain3
#define IDXGISwapChain3_GetCurrentBackBufferIndex(self, ...) ((self)->dtbl->GetCurrentBackBufferIndex(self, __VA_ARGS__))
    u32 (STDCALLP GetCurrentBackBufferIndex)(IDXGISwapChain3 *self);
#define IDXGISwapChain3_CheckColorSpaceSupport(self, ...) ((self)->dtbl->CheckColorSpaceSupport(self, __VA_ARGS__))
    i32 (STDCALLP CheckColorSpaceSupport)(IDXGISwapChain3 *self, DXGI_COLOR_SPACE_TYPE color_space, u32 *out_support);
#define IDXGISwapChain3_SetColorSpace1(self, ...) ((self)->dtbl->SetColorSpace1(self, __VA_ARGS__))
    i32 (STDCALLP SetColorSpace1)(IDXGISwapChain3 *self, DXGI_COLOR_SPACE_TYPE color_space);
#define IDXGISwapChain3_ResizeBuffers1(self, ...) ((self)->dtbl->ResizeBuffers1(self, __VA_ARGS__))
    i32 (STDCALLP ResizeBuffers1)(IDXGISwapChain3 *self,
                                  u32 buffer_count,
                                  u32 width,
                                  u32 height,
                                  DXGI_FORMAT format,
                                  u32 swap_chain_flags,
                                  const u32 *creation_node_mask,
                                  IUnknown *const *present_queue);
} IDXGISwapChain3DispatchTable;
struct IDXGISwapChain3 { const IDXGISwapChain3DispatchTable *dtbl; };

typedef struct IDXGIFactory4DispatchTable
{
    // IUnknown
#define IDXGIFactory4_QueryInterface(self, ...) ((self)->dtbl->QueryInterface(self, __VA_ARGS__))
    i32 (STDCALLP QueryInterface)(IDXGIFactory4 *self, const GUID *guid, void **out_object);
#define IDXGIFactory4_AddRef(self, ...) ((self)->dtbl->AddRef(self, __VA_ARGS__))
    u32 (STDCALLP AddRef)(IDXGIFactory4 *self);
#define IDXGIFactory4_Release(self, ...) ((self)->dtbl->Release(self, __VA_ARGS__))
    u32 (STDCALLP Release)(IDXGIFactory4 *self);
    // IDXGIObject
#define IDXGIFactory4_SetPrivateData(self, ...) ((self)->dtbl->SetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateData)(IDXGIFactory4 *self, const GUID *guid, u32 data_size, const void *data);
#define IDXGIFactory4_SetPrivateDataInterface(self, ...) ((self)->dtbl->SetPrivateDataInterface(self, __VA_ARGS__))
    i32 (STDCALLP SetPrivateDataInterface)(IDXGIFactory4 *self, const GUID *guid, const IUnknown *data);
#define IDXGIFactory4_GetPrivateData(self, ...) ((self)->dtbl->GetPrivateData(self, __VA_ARGS__))
    i32 (STDCALLP GetPrivateData)(IDXGIFactory4 *self, const GUID *guid, u32 *out_data_size, void *out_data);
#define IDXGIFactory4_GetParent(self, ...) ((self)->dtbl->GetParent(self, __VA_ARGS__))
    i32 (STDCALLP GetParent)(IDXGIFactory4 *self, const GUID *guid, void **out_parent);
    // IDXGIFactory
#define IDXGIFactory4_EnumAdapters(self, ...) ((self)->dtbl->EnumAdapters(self, __VA_ARGS__))
    i32 (STDCALLP EnumAdapters)(IDXGIFactory4 *self, u32 adapter, IDXGIAdapter **out_adapter);
#define IDXGIFactory4_MakeWindowAssociation(self, ...) ((self)->dtbl->MakeWindowAssociation(self, __VA_ARGS__))
    i32 (STDCALLP MakeWindowAssociation)(IDXGIFactory4 *self, void *hwnd, u32 flags);
#define IDXGIFactory4_GetWindowAssociation(self, ...) ((self)->dtbl->GetWindowAssociation(self, __VA_ARGS__))
    i32 (STDCALLP GetWindowAssociation)(IDXGIFactory4 *self, void **out_hwnd);
#define IDXGIFactory4_CreateSwapChain(self, ...) ((self)->dtbl->CreateSwapChain(self, __VA_ARGS__))
    i32 (STDCALLP CreateSwapChain)(IDXGIFactory4 *self,
                                   IUnknown *device,
                                   DXGI_SWAP_CHAIN_DESC *desc,
                                   IDXGISwapChain **out_swap_chain);
#define IDXGIFactory4_CreateSoftwareAdapter(self, ...) ((self)->dtbl->CreateSoftwareAdapter(self, __VA_ARGS__))
    i32 (STDCALLP CreateSoftwareAdapter)(IDXGIFactory4 *self, void *module, IDXGIAdapter **out_adapter);
#define IDXGIFactory4_EnumAdapters1(self, ...) ((self)->dtbl->EnumAdapters1(self, __VA_ARGS__))
    i32 (STDCALLP EnumAdapters1)(IDXGIFactory4 *self, u32 adapter, IDXGIAdapter1 **out_adapter);
#define IDXGIFactory4_IsCurrent(self, ...) ((self)->dtbl->IsCurrent(self, __VA_ARGS__))
    i32 (STDCALLP IsCurrent)(IDXGIFactory4 *self);
#define IDXGIFactory4_IsWindowedStereoEnabled(self, ...) ((self)->dtbl->IsWindowedStereoEnabled(self, __VA_ARGS__))
    i32 (STDCALLP IsWindowedStereoEnabled)(IDXGIFactory4 *self);
#define IDXGIFactory4_CreateSwapChainForHwnd(self, ...) ((self)->dtbl->CreateSwapChainForHwnd(self, __VA_ARGS__))
    i32 (STDCALLP CreateSwapChainForHwnd)(IDXGIFactory4 *self,
                                          IUnknown *device,
                                          void *hwnd,
                                          const DXGI_SWAP_CHAIN_DESC1 *desc,
                                          const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *fullscreen_desc,
                                          IDXGIOutput *restrict_to_output,
                                          IDXGISwapChain1 **out_swap_chain);
#define IDXGIFactory4_CreateSwapChainForCoreWindow(self, ...) ((self)->dtbl->CreateSwapChainForCoreWindow(self, __VA_ARGS__))
    i32 (STDCALLP CreateSwapChainForCoreWindow)(IDXGIFactory4 *self,
                                                IUnknown *device,
                                                IUnknown *window,
                                                const DXGI_SWAP_CHAIN_DESC1 *desc,
                                                IDXGIOutput *restrict_to_output,
                                                IDXGISwapChain1 **out_swap_chain);
#define IDXGIFactory4_GetSharedResourceAdapterLuid(self, ...) ((self)->dtbl->GetSharedResourceAdapterLuid(self, __VA_ARGS__))
    i32 (STDCALLP GetSharedResourceAdapterLuid)(IDXGIFactory4 *self, void *resource, i64 *out_luid);
#define IDXGIFactory4_RegisterStereoStatusWindow(self, ...) ((self)->dtbl->RegisterStereoStatusWindow(self, __VA_ARGS__))
    i32 (STDCALLP RegisterStereoStatusWindow)(IDXGIFactory4 *self, void *hwnd, u32 msg, u32 *out_cookie);
#define IDXGIFactory4_RegisterStereoStatusEvent(self, ...) ((self)->dtbl->RegisterStereoStatusEvent(self, __VA_ARGS__))
    i32 (STDCALLP RegisterStereoStatusEvent)(IDXGIFactory4 *self, void *event, u32 *out_cookie);
#define IDXGIFactory4_UnregisterStereoStatus(self, ...) ((self)->dtbl->UnregisterStereoStatus(self, __VA_ARGS__))
    void (STDCALLP UnregisterStereoStatus)(IDXGIFactory4 *self, u32 cookie);
#define IDXGIFactory4_RegisterOcclusionStatusWindow(self, ...) ((self)->dtbl->RegisterOcclusionStatusWindow(self, __VA_ARGS__))
    i32 (STDCALLP RegisterOcclusionStatusWindow)(IDXGIFactory4 *self, void *hwnd, u32 msg, u32 *out_cookie);
#define IDXGIFactory4_RegisterOcclusionStatusEvent(self, ...) ((self)->dtbl->RegisterOcclusionStatusEvent(self, __VA_ARGS__))
    i32 (STDCALLP RegisterOcclusionStatusEvent)(IDXGIFactory4 *self, void *event, u32 *out_cookie);
#define IDXGIFactory4_UnregisterOcclusionStatus(self, ...) ((self)->dtbl->UnregisterOcclusionStatus(self, __VA_ARGS__))
    void (STDCALLP UnregisterOcclusionStatus)(IDXGIFactory4 *self, u32 cookie);
#define IDXGIFactory4_CreateSwapChainForComposition(self, ...) ((self)->dtbl->CreateSwapChainForComposition(self, __VA_ARGS__))
    i32 (STDCALLP CreateSwapChainForComposition)(IDXGIFactory4 *self,
                                                 IUnknown *device,
                                                 const DXGI_SWAP_CHAIN_DESC1 *desc,
                                                 IDXGIOutput *restrict_to_output,
                                                 IDXGISwapChain1 **out_swap_chain);
#define IDXGIFactory4_GetCreationFlags(self, ...) ((self)->dtbl->GetCreationFlags(self, __VA_ARGS__))
    u32 (STDCALLP GetCreationFlags)(IDXGIFactory4 *self);
    // IDXGIFactory4
#define IDXGIFactory4_EnumAdapterByLuid(self, ...) ((self)->dtbl->EnumAdapterByLuid(self, __VA_ARGS__))
    i32 (STDCALLP EnumAdapterByLuid)(IDXGIFactory4 *self, i64 adapter_luid, const GUID *guid, void **out_adapter);
#define IDXGIFactory4_EnumWarpAdapter(self, ...) ((self)->dtbl->EnumWarpAdapter(self, __VA_ARGS__))
    i32 (STDCALLP EnumWarpAdapter)(IDXGIFactory4 *self, const GUID *guid, void **out_adapter);
} IDXGIFactory4DispatchTable;
struct IDXGIFactory4 { const IDXGIFactory4DispatchTable *dtbl; };

extern const GUID IID_ID3D12GraphicsCommandList;
extern const GUID IID_ID3D12CommandQueue;
extern const GUID IID_ID3D12Device;
extern const GUID IID_ID3D12DescriptorHeap;
extern const GUID IID_ID3D12Resource;
extern const GUID IID_ID3D12RootSignature;
extern const GUID IID_ID3D12CommandAllocator;
extern const GUID IID_ID3D12Fence;
extern const GUID IID_ID3D12PipelineState;
extern const GUID IID_ID3D12Debug;
extern const GUID IID_IDXGIFactory4;
extern const GUID IID_IDXGISwapChain3;

// D3D12 helpers
inline ID3D12Resource *d3d_create_buffer(ID3D12Device *d3d, D3D12_HEAP_TYPE heap_type, u64 size)
{
    assert(d3d && heap_type != D3D12_HEAP_TYPE_CUSTOM);

    D3D12_HEAP_PROPERTIES heap_props = { .Type = heap_type };
    D3D12_RESOURCE_DESC buffer_desc = {
        .Dimension = D3D12_RESOURCE_DIMENSION_BUFFER,
        .Layout = D3D12_TEXTURE_LAYOUT_ROW_MAJOR,
        .Width = size,
        .Height = 1,
        .DepthOrArraySize = 1,
        .MipLevels = 1,
        .SampleDesc.Count = 1
    };
    D3D12_RESOURCE_STATES state =
        (heap_type == D3D12_HEAP_TYPE_UPLOAD) ? D3D12_RESOURCE_STATE_GENERIC_READ : D3D12_RESOURCE_STATE_COPY_DEST;

    ID3D12Resource *res;
    VHR(ID3D12Device_CreateCommittedResource(d3d, &heap_props, D3D12_HEAP_FLAG_NONE, &buffer_desc, state, NULL,
                                             &IID_ID3D12Resource, &res));
    return res;
}
