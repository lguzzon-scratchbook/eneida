typedef unsigned char u8;
typedef unsigned short u16;
typedef unsigned long u32;
typedef unsigned long long u64;
typedef char i8;
typedef short i16;
typedef long i32;
typedef long long i64;

#define STDCALL __stdcall
#define STDCALLP STDCALL*

#define MS_PM_REMOVE 0x0001
#define MS_WM_QUIT 0x0012
#define MS_WM_DESTROY 0x0002
#define MS_WM_KEYDOWN 0x0100
#define MS_VK_ESCAPE 0x001b
#define MS_WS_OVERLAPPED 0x00000000L
#define MS_WS_VISIBLE 0x10000000L
#define MS_WS_CAPTION 0x00C00000L
#define MS_WS_SYSMENU 0x00080000L
#define MS_WS_MINIMIZEBOX 0x00020000L
#define MS_CW_USEDEFAULT ((u32)0x80000000)

#define MS_INFINITE 0xFFFFFFFF

#define MS_STANDARD_RIGHTS_REQUIRED 0x000F0000L
#define MS_SYNCHRONIZE 0x00100000L
#define MS_EVENT_ALL_ACCESS (MS_STANDARD_RIGHTS_REQUIRED|MS_SYNCHRONIZE|0x3)

#define MS_MEM_COMMIT 0x1000
#define MS_MEM_RESERVE 0x2000
#define MS_MEM_RELEASE 0x8000

#define MS_PAGE_READWRITE 0x04

#define MS_MAKEINTRESOURCE(i) ((char*)((u64)((u16)(i))))
#define MS_IDC_ARROW MS_MAKEINTRESOURCE(32512)

#define NULL (void*)0

// TODO: Improve assert implementation
#ifdef _DEBUG
#define Assert(Expression) if (!(Expression)) { __debugbreak(); }
#else
#define Assert(Expression)
#endif


typedef struct MS_POINT {
    i32 x;
    i32 y;
} MS_POINT;

typedef struct MS_MSG {
    void* hwnd;
    u32 message;
    u64 wParam;
    i64 lParam;
    u32 time;
    MS_POINT pt;
} MS_MSG;

typedef struct MS_WNDCLASS {
    u32 style;
    void* lpfnWndProc;
    i32 cbClsExtra;
    i32 cbWndExtra;
    void* hInstance;
    void* hIcon;
    void* hCursor;
    void* hbrBackground;
    const char* lpszMenuName;
    const char* lpszClassName;
} MS_WNDCLASS;

typedef struct MS_RECT {
    i32 left;
    i32 top;
    i32 right;
    i32 bottom;
} MS_RECT;

typedef struct MS_GUID {
    u32 Data1;
    u16 Data2;
    u16 Data3;
    u8 Data4[8];
} MS_GUID;

typedef struct MS_SECURITY_ATTRIBUTES {
    u32 nLength;
    void* lpSecurityDescriptor;
    i32 bInheritHandle;
} MS_SECURITY_ATTRIBUTES;


#define D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES 0xffffffff

typedef struct IUnknown IUnknown;
typedef struct ID3DBlob ID3DBlob;
typedef struct ID3D12Object ID3D12Object;
typedef struct ID3D12DeviceChild ID3D12DeviceChild;
typedef struct ID3D12RootSignature ID3D12RootSignature;
typedef struct ID3D12Pageable ID3D12Pageable;
typedef struct ID3D12Heap ID3D12Heap;
typedef struct ID3D12Resource ID3D12Resource;
typedef struct ID3D12CommandAllocator ID3D12CommandAllocator;
typedef struct ID3D12Fence ID3D12Fence;
typedef struct ID3D12PipelineState ID3D12PipelineState;
typedef struct ID3D12DescriptorHeap ID3D12DescriptorHeap;
typedef struct ID3D12QueryHeap ID3D12QueryHeap;
typedef struct ID3D12CommandSignature ID3D12CommandSignature;
typedef struct ID3D12CommandList ID3D12CommandList;
typedef struct ID3D12GraphicsCommandList ID3D12GraphicsCommandList;
typedef struct ID3D12CommandQueue ID3D12CommandQueue;
typedef struct ID3D12Device ID3D12Device;
typedef struct ID3D12Debug ID3D12Debug;

typedef struct IDXGIOutput IDXGIOutput;
typedef struct IDXGIAdapter IDXGIAdapter;
typedef struct IDXGIAdapter1 IDXGIAdapter1;
typedef struct IDXGISwapChain IDXGISwapChain;
typedef struct IDXGISwapChain1 IDXGISwapChain1;
typedef struct IDXGISwapChain3 IDXGISwapChain3;
typedef struct IDXGIFactory4 IDXGIFactory4;

typedef enum DXGI_FORMAT {
    DXGI_FORMAT_UNKNOWN = 0,
    DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
    DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
    DXGI_FORMAT_R32G32B32A32_UINT = 3,
    DXGI_FORMAT_R32G32B32A32_SINT = 4,
    DXGI_FORMAT_R32G32B32_TYPELESS = 5,
    DXGI_FORMAT_R32G32B32_FLOAT = 6,
    DXGI_FORMAT_R32G32B32_UINT = 7,
    DXGI_FORMAT_R32G32B32_SINT = 8,
    DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
    DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
    DXGI_FORMAT_R16G16B16A16_UNORM = 11,
    DXGI_FORMAT_R16G16B16A16_UINT = 12,
    DXGI_FORMAT_R16G16B16A16_SNORM = 13,
    DXGI_FORMAT_R16G16B16A16_SINT = 14,
    DXGI_FORMAT_R32G32_TYPELESS = 15,
    DXGI_FORMAT_R32G32_FLOAT = 16,
    DXGI_FORMAT_R32G32_UINT = 17,
    DXGI_FORMAT_R32G32_SINT = 18,
    DXGI_FORMAT_R32G8X24_TYPELESS = 19,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
    DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
    DXGI_FORMAT_R10G10B10A2_UNORM = 24,
    DXGI_FORMAT_R10G10B10A2_UINT = 25,
    DXGI_FORMAT_R11G11B10_FLOAT = 26,
    DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
    DXGI_FORMAT_R8G8B8A8_UNORM = 28,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
    DXGI_FORMAT_R8G8B8A8_UINT = 30,
    DXGI_FORMAT_R8G8B8A8_SNORM = 31,
    DXGI_FORMAT_R8G8B8A8_SINT = 32,
    DXGI_FORMAT_R16G16_TYPELESS = 33,
    DXGI_FORMAT_R16G16_FLOAT = 34,
    DXGI_FORMAT_R16G16_UNORM = 35,
    DXGI_FORMAT_R16G16_UINT = 36,
    DXGI_FORMAT_R16G16_SNORM = 37,
    DXGI_FORMAT_R16G16_SINT = 38,
    DXGI_FORMAT_R32_TYPELESS = 39,
    DXGI_FORMAT_D32_FLOAT = 40,
    DXGI_FORMAT_R32_FLOAT = 41,
    DXGI_FORMAT_R32_UINT = 42,
    DXGI_FORMAT_R32_SINT = 43,
    DXGI_FORMAT_R24G8_TYPELESS = 44,
    DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
    DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
    DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
    DXGI_FORMAT_R8G8_TYPELESS = 48,
    DXGI_FORMAT_R8G8_UNORM = 49,
    DXGI_FORMAT_R8G8_UINT = 50,
    DXGI_FORMAT_R8G8_SNORM = 51,
    DXGI_FORMAT_R8G8_SINT = 52,
    DXGI_FORMAT_R16_TYPELESS = 53,
    DXGI_FORMAT_R16_FLOAT = 54,
    DXGI_FORMAT_D16_UNORM = 55,
    DXGI_FORMAT_R16_UNORM = 56,
    DXGI_FORMAT_R16_UINT = 57,
    DXGI_FORMAT_R16_SNORM = 58,
    DXGI_FORMAT_R16_SINT = 59,
    DXGI_FORMAT_R8_TYPELESS = 60,
    DXGI_FORMAT_R8_UNORM = 61,
    DXGI_FORMAT_R8_UINT = 62,
    DXGI_FORMAT_R8_SNORM = 63,
    DXGI_FORMAT_R8_SINT = 64,
    DXGI_FORMAT_A8_UNORM = 65,
    DXGI_FORMAT_R1_UNORM = 66,
    DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
    DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
    DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
    DXGI_FORMAT_BC1_TYPELESS = 70,
    DXGI_FORMAT_BC1_UNORM = 71,
    DXGI_FORMAT_BC1_UNORM_SRGB = 72,
    DXGI_FORMAT_BC2_TYPELESS = 73,
    DXGI_FORMAT_BC2_UNORM = 74,
    DXGI_FORMAT_BC2_UNORM_SRGB = 75,
    DXGI_FORMAT_BC3_TYPELESS = 76,
    DXGI_FORMAT_BC3_UNORM = 77,
    DXGI_FORMAT_BC3_UNORM_SRGB = 78,
    DXGI_FORMAT_BC4_TYPELESS = 79,
    DXGI_FORMAT_BC4_UNORM = 80,
    DXGI_FORMAT_BC4_SNORM = 81,
    DXGI_FORMAT_BC5_TYPELESS = 82,
    DXGI_FORMAT_BC5_UNORM = 83,
    DXGI_FORMAT_BC5_SNORM = 84,
    DXGI_FORMAT_B5G6R5_UNORM = 85,
    DXGI_FORMAT_B5G5R5A1_UNORM = 86,
    DXGI_FORMAT_B8G8R8A8_UNORM = 87,
    DXGI_FORMAT_B8G8R8X8_UNORM = 88,
    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
    DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
    DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
    DXGI_FORMAT_BC6H_TYPELESS = 94,
    DXGI_FORMAT_BC6H_UF16 = 95,
    DXGI_FORMAT_BC6H_SF16 = 96,
    DXGI_FORMAT_BC7_TYPELESS = 97,
    DXGI_FORMAT_BC7_UNORM = 98,
    DXGI_FORMAT_BC7_UNORM_SRGB = 99,
    DXGI_FORMAT_AYUV = 100,
    DXGI_FORMAT_Y410 = 101,
    DXGI_FORMAT_Y416 = 102,
    DXGI_FORMAT_NV12 = 103,
    DXGI_FORMAT_P010 = 104,
    DXGI_FORMAT_P016 = 105,
    DXGI_FORMAT_420_OPAQUE = 106,
    DXGI_FORMAT_YUY2 = 107,
    DXGI_FORMAT_Y210 = 108,
    DXGI_FORMAT_Y216 = 109,
    DXGI_FORMAT_NV11 = 110,
    DXGI_FORMAT_AI44 = 111,
    DXGI_FORMAT_IA44 = 112,
    DXGI_FORMAT_P8 = 113,
    DXGI_FORMAT_A8P8 = 114,
    DXGI_FORMAT_B4G4R4A4_UNORM = 115,
    DXGI_FORMAT_P208 = 130,
    DXGI_FORMAT_V208 = 131,
    DXGI_FORMAT_V408 = 132,
    DXGI_FORMAT_FORCE_UINT = 0xffffffff
} DXGI_FORMAT;

typedef struct DXGI_SAMPLE_DESC {
    u32 Count;
    u32 Quality;
} DXGI_SAMPLE_DESC;

typedef u64 D3D12_GPU_VIRTUAL_ADDRESS;

typedef enum D3D12_HEAP_TYPE {
    D3D12_HEAP_TYPE_DEFAULT = 1,
    D3D12_HEAP_TYPE_UPLOAD = 2,
    D3D12_HEAP_TYPE_READBACK = 3,
    D3D12_HEAP_TYPE_CUSTOM = 4
} D3D12_HEAP_TYPE;

typedef enum D3D12_CPU_PAGE_PROPERTY {
    D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0,
    D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1,
    D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2,
    D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3
} D3D12_CPU_PAGE_PROPERTY;

typedef enum D3D12_MEMORY_POOL {
    D3D12_MEMORY_POOL_UNKNOWN = 0,
    D3D12_MEMORY_POOL_L0 = 1,
    D3D12_MEMORY_POOL_L1 = 2
} D3D12_MEMORY_POOL;

typedef struct D3D12_HEAP_PROPERTIES {
    D3D12_HEAP_TYPE Type;
    D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
    D3D12_MEMORY_POOL MemoryPoolPreference;
    u32 CreationNodeMask;
    u32 VisibleNodeMask;
} D3D12_HEAP_PROPERTIES;

typedef enum D3D12_HEAP_FLAGS {
    D3D12_HEAP_FLAG_NONE = 0,
    D3D12_HEAP_FLAG_SHARED = 0x1,
    D3D12_HEAP_FLAG_DENY_BUFFERS = 0x4,
    D3D12_HEAP_FLAG_ALLOW_DISPLAY = 0x8,
    D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 0x20,
    D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 0x40,
    D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 0x80,
    D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 0x100,
    D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0,
    D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 0xc0,
    D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 0x44,
    D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 0x84
} D3D12_HEAP_FLAGS;

typedef struct D3D12_HEAP_DESC {
    u64 SizeInBytes;
    D3D12_HEAP_PROPERTIES Properties;
    u64 Alignment;
    D3D12_HEAP_FLAGS Flags;
} D3D12_HEAP_DESC;

typedef struct D3D12_RANGE {
    u64 Begin;
    u64 End;
} D3D12_RANGE;

typedef enum D3D12_RESOURCE_DIMENSION {
    D3D12_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D12_RESOURCE_DIMENSION_BUFFER = 1,
    D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4
} D3D12_RESOURCE_DIMENSION;

typedef enum D3D12_TEXTURE_LAYOUT {
    D3D12_TEXTURE_LAYOUT_UNKNOWN = 0,
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1,
    D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2,
    D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3
} D3D12_TEXTURE_LAYOUT;

typedef enum D3D12_RESOURCE_FLAGS {
    D3D12_RESOURCE_FLAG_NONE = 0,
    D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 0x1,
    D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 0x2,
    D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 0x4,
    D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 0x8,
    D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 0x10,
    D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 0x20
} D3D12_RESOURCE_FLAGS;

typedef struct D3D12_RESOURCE_DESC {
    D3D12_RESOURCE_DIMENSION Dimension;
    u64 Alignment;
    u64 Width;
    u32 Height;
    u16 DepthOrArraySize;
    u16 MipLevels;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D12_TEXTURE_LAYOUT Layout;
    D3D12_RESOURCE_FLAGS Flags;
} D3D12_RESOURCE_DESC;

typedef struct D3D12_BOX {
    u32 left;
    u32 top;
    u32 front;
    u32 right;
    u32 bottom;
    u32 back;
} D3D12_BOX;

typedef enum D3D12_DESCRIPTOR_HEAP_TYPE {
    D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0,
    D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = (D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV + 1),
    D3D12_DESCRIPTOR_HEAP_TYPE_RTV = (D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER + 1),
    D3D12_DESCRIPTOR_HEAP_TYPE_DSV = (D3D12_DESCRIPTOR_HEAP_TYPE_RTV + 1),
    D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = (D3D12_DESCRIPTOR_HEAP_TYPE_DSV + 1)
} D3D12_DESCRIPTOR_HEAP_TYPE;

typedef enum D3D12_DESCRIPTOR_HEAP_FLAGS {
    D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0,
    D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 0x1
} D3D12_DESCRIPTOR_HEAP_FLAGS;

typedef struct D3D12_DESCRIPTOR_HEAP_DESC {
    D3D12_DESCRIPTOR_HEAP_TYPE Type;
    u32 NumDescriptors;
    D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
    u32 NodeMask;
} D3D12_DESCRIPTOR_HEAP_DESC;

typedef struct D3D12_CPU_DESCRIPTOR_HANDLE {
    u64 ptr;
} D3D12_CPU_DESCRIPTOR_HANDLE;

typedef struct D3D12_GPU_DESCRIPTOR_HANDLE {
    u64 ptr;
} D3D12_GPU_DESCRIPTOR_HANDLE;

typedef MS_RECT D3D12_RECT;

typedef struct D3D12_DISCARD_REGION {
    u32 NumRects;
    const D3D12_RECT* pRects;
    u32 FirstSubresource;
    u32 NumSubresources;
} D3D12_DISCARD_REGION;

typedef enum D3D12_COMMAND_LIST_TYPE {
    D3D12_COMMAND_LIST_TYPE_DIRECT = 0,
    D3D12_COMMAND_LIST_TYPE_BUNDLE = 1,
    D3D12_COMMAND_LIST_TYPE_COMPUTE = 2,
    D3D12_COMMAND_LIST_TYPE_COPY = 3
} D3D12_COMMAND_LIST_TYPE;

typedef struct D3D12_SUBRESOURCE_FOOTPRINT {
    DXGI_FORMAT Format;
    u32 Width;
    u32 Height;
    u32 Depth;
    u32 RowPitch;
} D3D12_SUBRESOURCE_FOOTPRINT;

typedef struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
    u64 Offset;
    D3D12_SUBRESOURCE_FOOTPRINT Footprint;
} D3D12_PLACED_SUBRESOURCE_FOOTPRINT;

typedef enum D3D12_TEXTURE_COPY_TYPE {
    D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0,
    D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1
} D3D12_TEXTURE_COPY_TYPE;

typedef struct D3D12_TEXTURE_COPY_LOCATION {
    ID3D12Resource* pResource;
    D3D12_TEXTURE_COPY_TYPE Type;
    union {
        D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;
        u32 SubresourceIndex;
    };
} D3D12_TEXTURE_COPY_LOCATION;

typedef struct D3D12_TILED_RESOURCE_COORDINATE {
    u32 X;
    u32 Y;
    u32 Z;
    u32 Subresource;
} D3D12_TILED_RESOURCE_COORDINATE;

typedef struct D3D12_TILE_REGION_SIZE {
    u32 NumTiles;
    i32 UseBox;
    u32 Width;
    u16 Height;
    u16 Depth;
} D3D12_TILE_REGION_SIZE;

typedef enum D3D12_TILE_RANGE_FLAGS {
    D3D12_TILE_RANGE_FLAG_NONE = 0,
    D3D12_TILE_RANGE_FLAG_NULL = 1,
    D3D12_TILE_RANGE_FLAG_SKIP = 2,
    D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4
} D3D12_TILE_RANGE_FLAGS;

typedef struct D3D12_SUBRESOURCE_TILING {
    u32 WidthInTiles;
    u16 HeightInTiles;
    u16 DepthInTiles;
    u32 StartTileIndexInOverallResource;
} D3D12_SUBRESOURCE_TILING;

typedef struct D3D12_TILE_SHAPE {
    u32 WidthInTexels;
    u32 HeightInTexels;
    u32 DepthInTexels;
} D3D12_TILE_SHAPE;

typedef enum D3D12_TILE_MAPPING_FLAGS {
    D3D12_TILE_MAPPING_FLAG_NONE = 0,
    D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 0x1
} D3D12_TILE_MAPPING_FLAGS;

typedef enum D3D12_TILE_COPY_FLAGS {
    D3D12_TILE_COPY_FLAG_NONE = 0,
    D3D12_TILE_COPY_FLAG_NO_HAZARD = 0x1,
    D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 0x2,
    D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 0x4
} D3D12_TILE_COPY_FLAGS;

typedef enum D3D12_RESOURCE_STATES {
    D3D12_RESOURCE_STATE_COMMON = 0,
    D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 0x1,
    D3D12_RESOURCE_STATE_INDEX_BUFFER = 0x2,
    D3D12_RESOURCE_STATE_RENDER_TARGET = 0x4,
    D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 0x8,
    D3D12_RESOURCE_STATE_DEPTH_WRITE = 0x10,
    D3D12_RESOURCE_STATE_DEPTH_READ = 0x20,
    D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 0x40,
    D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 0x80,
    D3D12_RESOURCE_STATE_STREAM_OUT = 0x100,
    D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 0x200,
    D3D12_RESOURCE_STATE_COPY_DEST = 0x400,
    D3D12_RESOURCE_STATE_COPY_SOURCE = 0x800,
    D3D12_RESOURCE_STATE_RESOLVE_DEST = 0x1000,
    D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 0x2000,
    D3D12_RESOURCE_STATE_GENERIC_READ = (((((0x1|0x2)|0x40)|0x80)|0x200)|0x800),
    D3D12_RESOURCE_STATE_PRESENT = 0,
    D3D12_RESOURCE_STATE_PREDICATION = 0x200
} D3D12_RESOURCE_STATES;

typedef enum D3D12_RESOURCE_BARRIER_TYPE {
    D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0,
    D3D12_RESOURCE_BARRIER_TYPE_ALIASING = (D3D12_RESOURCE_BARRIER_TYPE_TRANSITION + 1),
    D3D12_RESOURCE_BARRIER_TYPE_UAV = (D3D12_RESOURCE_BARRIER_TYPE_ALIASING + 1)
} D3D12_RESOURCE_BARRIER_TYPE;

typedef struct D3D12_RESOURCE_TRANSITION_BARRIER {
    ID3D12Resource* pResource;
    u32 Subresource;
    D3D12_RESOURCE_STATES StateBefore;
    D3D12_RESOURCE_STATES StateAfter;
} D3D12_RESOURCE_TRANSITION_BARRIER;

typedef struct D3D12_RESOURCE_ALIASING_BARRIER {
    ID3D12Resource* pResourceBefore;
    ID3D12Resource* pResourceAfter;
} D3D12_RESOURCE_ALIASING_BARRIER;

typedef struct D3D12_RESOURCE_UAV_BARRIER {
    ID3D12Resource* pResource;
} D3D12_RESOURCE_UAV_BARRIER;

typedef enum D3D12_RESOURCE_BARRIER_FLAGS {
    D3D12_RESOURCE_BARRIER_FLAG_NONE = 0,
    D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 0x1,
    D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = 0x2
} D3D12_RESOURCE_BARRIER_FLAGS;

typedef struct D3D12_RESOURCE_BARRIER {
    D3D12_RESOURCE_BARRIER_TYPE Type;
    D3D12_RESOURCE_BARRIER_FLAGS Flags;
    union {
        D3D12_RESOURCE_TRANSITION_BARRIER Transition;
        D3D12_RESOURCE_ALIASING_BARRIER Aliasing;
        D3D12_RESOURCE_UAV_BARRIER UAV;
    };
} D3D12_RESOURCE_BARRIER;

typedef enum D3D12_INPUT_CLASSIFICATION {
    D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0,
    D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1
} D3D12_INPUT_CLASSIFICATION;

typedef struct D3D12_INPUT_ELEMENT_DESC {
    const char* SemanticName;
    u32 SemanticIndex;
    DXGI_FORMAT Format;
    u32 InputSlot;
    u32 AlignedByteOffset;
    D3D12_INPUT_CLASSIFICATION InputSlotClass;
    u32 InstanceDataStepRate;
} D3D12_INPUT_ELEMENT_DESC;

typedef enum D3D12_FILL_MODE {
    D3D12_FILL_MODE_WIREFRAME = 2,
    D3D12_FILL_MODE_SOLID = 3
} D3D12_FILL_MODE;

typedef enum D3D12_PRIMITIVE_TOPOLOGY {
    D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
    D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
    D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
    D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
    D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
    D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
    D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
    D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
    D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
    D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
    D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
    D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
    D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
    D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
    D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
    D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
    D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
    D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
    D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
    D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
    D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
    D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
    D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
    D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
    D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
    D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
    D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
    D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
    D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
    D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
    D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
    D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
    D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
    D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
} D3D12_PRIMITIVE_TOPOLOGY;

typedef enum D3D12_PRIMITIVE_TOPOLOGY_TYPE {
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4
} D3D12_PRIMITIVE_TOPOLOGY_TYPE;

typedef struct D3D12_SO_DECLARATION_ENTRY {
    u32 Stream;
    const char* SemanticName;
    u32 SemanticIndex;
    u8 StartComponent;
    u8 ComponentCount;
    u8 OutputSlot;
} D3D12_SO_DECLARATION_ENTRY;

typedef enum D3D12_CULL_MODE {
    D3D12_CULL_MODE_NONE = 1,
    D3D12_CULL_MODE_FRONT = 2,
    D3D12_CULL_MODE_BACK = 3
} D3D12_CULL_MODE;

typedef struct D3D12_VIEWPORT {
    float TopLeftX;
    float TopLeftY;
    float Width;
    float Height;
    float MinDepth;
    float MaxDepth;
} D3D12_VIEWPORT;

typedef enum D3D12_COMPARISON_FUNC {
    D3D12_COMPARISON_FUNC_NEVER = 1,
    D3D12_COMPARISON_FUNC_LESS = 2,
    D3D12_COMPARISON_FUNC_EQUAL = 3,
    D3D12_COMPARISON_FUNC_LESS_EQUAL = 4,
    D3D12_COMPARISON_FUNC_GREATER = 5,
    D3D12_COMPARISON_FUNC_NOT_EQUAL = 6,
    D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7,
    D3D12_COMPARISON_FUNC_ALWAYS = 8
} D3D12_COMPARISON_FUNC;

typedef enum D3D12_DEPTH_WRITE_MASK {
    D3D12_DEPTH_WRITE_MASK_ZERO = 0,
    D3D12_DEPTH_WRITE_MASK_ALL = 1
} D3D12_DEPTH_WRITE_MASK;

typedef enum D3D12_STENCIL_OP {
    D3D12_STENCIL_OP_KEEP = 1,
    D3D12_STENCIL_OP_ZERO = 2,
    D3D12_STENCIL_OP_REPLACE = 3,
    D3D12_STENCIL_OP_INCR_SAT = 4,
    D3D12_STENCIL_OP_DECR_SAT = 5,
    D3D12_STENCIL_OP_INVERT = 6,
    D3D12_STENCIL_OP_INCR = 7,
    D3D12_STENCIL_OP_DECR = 8
} D3D12_STENCIL_OP;

typedef struct D3D12_DEPTH_STENCILOP_DESC {
    D3D12_STENCIL_OP StencilFailOp;
    D3D12_STENCIL_OP StencilDepthFailOp;
    D3D12_STENCIL_OP StencilPassOp;
    D3D12_COMPARISON_FUNC StencilFunc;
} D3D12_DEPTH_STENCILOP_DESC;

typedef struct D3D12_DEPTH_STENCIL_DESC {
    i32 DepthEnable;
    D3D12_DEPTH_WRITE_MASK DepthWriteMask;
    D3D12_COMPARISON_FUNC DepthFunc;
    i32 StencilEnable;
    u8 StencilReadMask;
    u8 StencilWriteMask;
    D3D12_DEPTH_STENCILOP_DESC FrontFace;
    D3D12_DEPTH_STENCILOP_DESC BackFace;
} D3D12_DEPTH_STENCIL_DESC;

typedef enum D3D12_BLEND {
    D3D12_BLEND_ZERO = 1,
    D3D12_BLEND_ONE = 2,
    D3D12_BLEND_SRC_COLOR = 3,
    D3D12_BLEND_INV_SRC_COLOR = 4,
    D3D12_BLEND_SRC_ALPHA = 5,
    D3D12_BLEND_INV_SRC_ALPHA = 6,
    D3D12_BLEND_DEST_ALPHA = 7,
    D3D12_BLEND_INV_DEST_ALPHA = 8,
    D3D12_BLEND_DEST_COLOR = 9,
    D3D12_BLEND_INV_DEST_COLOR = 10,
    D3D12_BLEND_SRC_ALPHA_SAT = 11,
    D3D12_BLEND_BLEND_FACTOR = 14,
    D3D12_BLEND_INV_BLEND_FACTOR = 15,
    D3D12_BLEND_SRC1_COLOR = 16,
    D3D12_BLEND_INV_SRC1_COLOR = 17,
    D3D12_BLEND_SRC1_ALPHA = 18,
    D3D12_BLEND_INV_SRC1_ALPHA = 19
} D3D12_BLEND;

typedef enum D3D12_BLEND_OP {
    D3D12_BLEND_OP_ADD = 1,
    D3D12_BLEND_OP_SUBTRACT = 2,
    D3D12_BLEND_OP_REV_SUBTRACT = 3,
    D3D12_BLEND_OP_MIN = 4,
    D3D12_BLEND_OP_MAX = 5
} D3D12_BLEND_OP;

typedef enum D3D12_COLOR_WRITE_ENABLE {
    D3D12_COLOR_WRITE_ENABLE_RED = 1,
    D3D12_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D12_COLOR_WRITE_ENABLE_BLUE = 4,
    D3D12_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D12_COLOR_WRITE_ENABLE_ALL = D3D12_COLOR_WRITE_ENABLE_RED|D3D12_COLOR_WRITE_ENABLE_GREEN|D3D12_COLOR_WRITE_ENABLE_BLUE|D3D12_COLOR_WRITE_ENABLE_ALPHA
} D3D12_COLOR_WRITE_ENABLE;

typedef enum D3D12_LOGIC_OP {
    D3D12_LOGIC_OP_CLEAR = 0,
    D3D12_LOGIC_OP_SET = (D3D12_LOGIC_OP_CLEAR + 1),
    D3D12_LOGIC_OP_COPY = (D3D12_LOGIC_OP_SET + 1) ,
    D3D12_LOGIC_OP_COPY_INVERTED = (D3D12_LOGIC_OP_COPY + 1),
    D3D12_LOGIC_OP_NOOP = (D3D12_LOGIC_OP_COPY_INVERTED + 1),
    D3D12_LOGIC_OP_INVERT = (D3D12_LOGIC_OP_NOOP + 1),
    D3D12_LOGIC_OP_AND = (D3D12_LOGIC_OP_INVERT + 1),
    D3D12_LOGIC_OP_NAND = (D3D12_LOGIC_OP_AND + 1),
    D3D12_LOGIC_OP_OR = (D3D12_LOGIC_OP_NAND + 1),
    D3D12_LOGIC_OP_NOR = (D3D12_LOGIC_OP_OR + 1),
    D3D12_LOGIC_OP_XOR = (D3D12_LOGIC_OP_NOR + 1),
    D3D12_LOGIC_OP_EQUIV = (D3D12_LOGIC_OP_XOR + 1),
    D3D12_LOGIC_OP_AND_REVERSE = (D3D12_LOGIC_OP_EQUIV + 1),
    D3D12_LOGIC_OP_AND_INVERTED = (D3D12_LOGIC_OP_AND_REVERSE + 1),
    D3D12_LOGIC_OP_OR_REVERSE = (D3D12_LOGIC_OP_AND_INVERTED + 1),
    D3D12_LOGIC_OP_OR_INVERTED = (D3D12_LOGIC_OP_OR_REVERSE + 1)
} D3D12_LOGIC_OP;

typedef struct D3D12_RENDER_TARGET_BLEND_DESC {
    i32 BlendEnable;
    i32 LogicOpEnable;
    D3D12_BLEND SrcBlend;
    D3D12_BLEND DestBlend;
    D3D12_BLEND_OP BlendOp;
    D3D12_BLEND SrcBlendAlpha;
    D3D12_BLEND DestBlendAlpha;
    D3D12_BLEND_OP BlendOpAlpha;
    D3D12_LOGIC_OP LogicOp;
    u8 RenderTargetWriteMask;
} D3D12_RENDER_TARGET_BLEND_DESC;

typedef struct D3D12_BLEND_DESC {
    i32 AlphaToCoverageEnable;
    i32 IndependentBlendEnable;
    D3D12_RENDER_TARGET_BLEND_DESC RenderTarget[8];
} D3D12_BLEND_DESC;

typedef enum D3D12_CONSERVATIVE_RASTERIZATION_MODE {
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0,
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1
} D3D12_CONSERVATIVE_RASTERIZATION_MODE;

typedef struct D3D12_RASTERIZER_DESC {
    D3D12_FILL_MODE FillMode;
    D3D12_CULL_MODE CullMode;
    i32 FrontCounterClockwise;
    i32 DepthBias;
    float DepthBiasClamp;
    float SlopeScaledDepthBias;
    i32 DepthClipEnable;
    i32 MultisampleEnable;
    i32 AntialiasedLineEnable;
    u32 ForcedSampleCount;
    D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
} D3D12_RASTERIZER_DESC;

typedef enum D3D12_QUERY_HEAP_TYPE {
    D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0,
    D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1,
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2,
    D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3
} D3D12_QUERY_HEAP_TYPE;

typedef struct D3D12_QUERY_HEAP_DESC {
    D3D12_QUERY_HEAP_TYPE Type;
    u32 Count;
    u32 NodeMask;
} D3D12_QUERY_HEAP_DESC;

typedef enum D3D12_QUERY_TYPE {
    D3D12_QUERY_TYPE_OCCLUSION = 0,
    D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1,
    D3D12_QUERY_TYPE_TIMESTAMP = 2,
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7
} D3D12_QUERY_TYPE;

typedef enum D3D12_PREDICATION_OP {
    D3D12_PREDICATION_OP_EQUAL_ZERO = 0,
    D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1
} D3D12_PREDICATION_OP;

typedef struct D3D12_QUERY_DATA_PIPELINE_STATISTICS {
    u64 IAVertices;
    u64 IAPrimitives;
    u64 VSInvocations;
    u64 GSInvocations;
    u64 GSPrimitives;
    u64 CInvocations;
    u64 CPrimitives;
    u64 PSInvocations;
    u64 HSInvocations;
    u64 DSInvocations;
    u64 CSInvocations;
} D3D12_QUERY_DATA_PIPELINE_STATISTICS;

typedef struct D3D12_QUERY_DATA_SO_STATISTICS {
    u64 NumPrimitivesWritten;
    u64 PrimitivesStorageNeeded;
} D3D12_QUERY_DATA_SO_STATISTICS;

typedef struct D3D12_STREAM_OUTPUT_BUFFER_VIEW {
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    u64 SizeInBytes;
    D3D12_GPU_VIRTUAL_ADDRESS BufferFilledSizeLocation;
} D3D12_STREAM_OUTPUT_BUFFER_VIEW;

typedef struct D3D12_DRAW_ARGUMENTS {
    u32 VertexCountPerInstance;
    u32 InstanceCount;
    u32 StartVertexLocation;
    u32 StartInstanceLocation;
} D3D12_DRAW_ARGUMENTS;

typedef struct D3D12_DRAW_INDEXED_ARGUMENTS {
    u32 IndexCountPerInstance;
    u32 InstanceCount;
    u32 StartIndexLocation;
    i32 BaseVertexLocation;
    u32 StartInstanceLocation;
} D3D12_DRAW_INDEXED_ARGUMENTS;

typedef struct D3D12_DISPATCH_ARGUMENTS {
    u32 ThreadGroupCountX;
    u32 ThreadGroupCountY;
    u32 ThreadGroupCountZ;
} D3D12_DISPATCH_ARGUMENTS;

typedef struct D3D12_VERTEX_BUFFER_VIEW {
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    u32 SizeInBytes;
    u32 StrideInBytes;
} D3D12_VERTEX_BUFFER_VIEW;

typedef struct D3D12_INDEX_BUFFER_VIEW {
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    u32 SizeInBytes;
    DXGI_FORMAT Format;
} D3D12_INDEX_BUFFER_VIEW;

typedef enum D3D12_INDIRECT_ARGUMENT_TYPE {
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0,
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = (D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW + 1),
    D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW + 1)
} D3D12_INDIRECT_ARGUMENT_TYPE;

typedef struct D3D12_INDIRECT_ARGUMENT_DESC {
    D3D12_INDIRECT_ARGUMENT_TYPE Type;
    union {
        struct {
            u32 Slot;
        } VertexBuffer;
        struct {
            u32 RootParameterIndex;
            u32 DestOffsetIn32BitValues;
            u32 Num32BitValuesToSet;
        } Constant;
        struct {
            u32 RootParameterIndex;
        } ConstantBufferView;
        struct {
            u32 RootParameterIndex;
        } ShaderResourceView;
        struct {
            u32 RootParameterIndex;
        } UnorderedAccessView;
    };
} D3D12_INDIRECT_ARGUMENT_DESC;

typedef struct D3D12_COMMAND_SIGNATURE_DESC {
    u32 ByteStride;
    u32 NumArgumentDescs;
    const D3D12_INDIRECT_ARGUMENT_DESC* pArgumentDescs;
    u32 NodeMask;
} D3D12_COMMAND_SIGNATURE_DESC;

typedef enum D3D12_CLEAR_FLAGS {
    D3D12_CLEAR_FLAG_DEPTH = 0x1,
    D3D12_CLEAR_FLAG_STENCIL = 0x2
} D3D12_CLEAR_FLAGS;

typedef enum D3D12_COMMAND_QUEUE_FLAGS {
    D3D12_COMMAND_QUEUE_FLAG_NONE = 0,
    D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 0x1
} D3D12_COMMAND_QUEUE_FLAGS;

typedef enum D3D12_COMMAND_QUEUE_PRIORITY {
    D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0,
    D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100
} D3D12_COMMAND_QUEUE_PRIORITY;

typedef struct D3D12_COMMAND_QUEUE_DESC {
    D3D12_COMMAND_LIST_TYPE Type;
    i32 Priority;
    D3D12_COMMAND_QUEUE_FLAGS Flags;
    u32 NodeMask;
} D3D12_COMMAND_QUEUE_DESC;

typedef struct D3D12_SHADER_BYTECODE {
    const void* pShaderBytecode;
    u64 BytecodeLength;
} D3D12_SHADER_BYTECODE;

typedef struct D3D12_STREAM_OUTPUT_DESC {
    const D3D12_SO_DECLARATION_ENTRY* pSODeclaration;
    u32 NumEntries;
    const u32* pBufferStrides;
    u32 NumStrides;
    u32 RasterizedStream;
} D3D12_STREAM_OUTPUT_DESC;

typedef struct D3D12_INPUT_LAYOUT_DESC {
    const D3D12_INPUT_ELEMENT_DESC* pInputElementDescs;
    u32 NumElements;
} D3D12_INPUT_LAYOUT_DESC;

typedef enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE {
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0,
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1,
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2
} D3D12_INDEX_BUFFER_STRIP_CUT_VALUE;

typedef struct D3D12_CACHED_PIPELINE_STATE {
    const void* pCachedBlob;
    u64 CachedBlobSizeInBytes;
} D3D12_CACHED_PIPELINE_STATE;

typedef enum D3D12_PIPELINE_STATE_FLAGS {
    D3D12_PIPELINE_STATE_FLAG_NONE = 0,
    D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 0x1
} D3D12_PIPELINE_STATE_FLAGS;

typedef struct D3D12_GRAPHICS_PIPELINE_STATE_DESC {
    ID3D12RootSignature* pRootSignature;
    D3D12_SHADER_BYTECODE VS;
    D3D12_SHADER_BYTECODE PS;
    D3D12_SHADER_BYTECODE DS;
    D3D12_SHADER_BYTECODE HS;
    D3D12_SHADER_BYTECODE GS;
    D3D12_STREAM_OUTPUT_DESC StreamOutput;
    D3D12_BLEND_DESC BlendState;
    u32 SampleMask;
    D3D12_RASTERIZER_DESC RasterizerState;
    D3D12_DEPTH_STENCIL_DESC DepthStencilState;
    D3D12_INPUT_LAYOUT_DESC InputLayout;
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
    D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
    u32 NumRenderTargets;
    DXGI_FORMAT RTVFormats[8];
    DXGI_FORMAT DSVFormat;
    DXGI_SAMPLE_DESC SampleDesc;
    u32 NodeMask;
    D3D12_CACHED_PIPELINE_STATE CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS Flags;
} D3D12_GRAPHICS_PIPELINE_STATE_DESC;

typedef struct D3D12_COMPUTE_PIPELINE_STATE_DESC {
    ID3D12RootSignature* pRootSignature;
    D3D12_SHADER_BYTECODE CS;
    u32 NodeMask;
    D3D12_CACHED_PIPELINE_STATE CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS Flags;
} D3D12_COMPUTE_PIPELINE_STATE_DESC;

typedef enum D3D12_FEATURE {
    D3D12_FEATURE_D3D12_OPTIONS = 0,
    D3D12_FEATURE_ARCHITECTURE = 1,
    D3D12_FEATURE_FEATURE_LEVELS = 2,
    D3D12_FEATURE_FORMAT_SUPPORT = 3,
    D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = 4,
    D3D12_FEATURE_FORMAT_INFO = 5,
    D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 6,
    D3D12_FEATURE_SHADER_MODEL = 7,
    D3D12_FEATURE_D3D12_OPTIONS1 = 8,
    D3D12_FEATURE_ROOT_SIGNATURE = 12
} D3D12_FEATURE;

typedef enum D3D12_SHADER_MIN_PRECISION_SUPPORT {
    D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0,
    D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 0x1,
    D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 0x2
} D3D12_SHADER_MIN_PRECISION_SUPPORT;

typedef enum D3D12_TILED_RESOURCES_TIER {
    D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0,
    D3D12_TILED_RESOURCES_TIER_1 = 1,
    D3D12_TILED_RESOURCES_TIER_2 = 2,
    D3D12_TILED_RESOURCES_TIER_3 = 3
} D3D12_TILED_RESOURCES_TIER;

typedef enum D3D12_RESOURCE_BINDING_TIER {
    D3D12_RESOURCE_BINDING_TIER_1 = 1,
    D3D12_RESOURCE_BINDING_TIER_2 = 2,
    D3D12_RESOURCE_BINDING_TIER_3 = 3
} D3D12_RESOURCE_BINDING_TIER;

typedef enum D3D12_CONSERVATIVE_RASTERIZATION_TIER {
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3
} D3D12_CONSERVATIVE_RASTERIZATION_TIER;

typedef enum D3D12_FORMAT_SUPPORT1 {
    D3D12_FORMAT_SUPPORT1_NONE = 0,
    D3D12_FORMAT_SUPPORT1_BUFFER = 0x1,
    D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = 0x2,
    D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = 0x4,
    D3D12_FORMAT_SUPPORT1_SO_BUFFER = 0x8,
    D3D12_FORMAT_SUPPORT1_TEXTURE1D = 0x10,
    D3D12_FORMAT_SUPPORT1_TEXTURE2D = 0x20,
    D3D12_FORMAT_SUPPORT1_TEXTURE3D = 0x40,
    D3D12_FORMAT_SUPPORT1_TEXTURECUBE = 0x80,
    D3D12_FORMAT_SUPPORT1_SHADER_LOAD = 0x100,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = 0x200,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = 0x400,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = 0x800,
    D3D12_FORMAT_SUPPORT1_MIP = 0x1000,
    D3D12_FORMAT_SUPPORT1_RENDER_TARGET = 0x4000,
    D3D12_FORMAT_SUPPORT1_BLENDABLE = 0x8000,
    D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = 0x10000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = 0x40000,
    D3D12_FORMAT_SUPPORT1_DISPLAY = 0x80000,
    D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = 0x100000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = 0x200000,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = 0x400000,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER = 0x800000,
    D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = 0x1000000,
    D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = 0x4000000,
    D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = 0x8000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = 0x10000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = 0x20000000,
    D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = 0x40000000
} D3D12_FORMAT_SUPPORT1;

typedef enum D3D12_FORMAT_SUPPORT2 {
    D3D12_FORMAT_SUPPORT2_NONE = 0,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 0x1,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 0x2,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 0x8,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 0x40,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = 0x80,
    D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 0x100,
    D3D12_FORMAT_SUPPORT2_TILED = 0x200,
    D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 0x4000
} D3D12_FORMAT_SUPPORT2;

typedef enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS {
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0,
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 0x1
} D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS;

typedef enum D3D12_CROSS_NODE_SHARING_TIER {
    D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0,
    D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1,
    D3D12_CROSS_NODE_SHARING_TIER_1 = 2,
    D3D12_CROSS_NODE_SHARING_TIER_2 = 3
} D3D12_CROSS_NODE_SHARING_TIER;

typedef enum D3D12_RESOURCE_HEAP_TIER {
    D3D12_RESOURCE_HEAP_TIER_1 = 1,
    D3D12_RESOURCE_HEAP_TIER_2 = 2
} D3D12_RESOURCE_HEAP_TIER;

typedef struct D3D12_FEATURE_DATA_D3D12_OPTIONS {
    i32 DoublePrecisionFloatShaderOps;
    i32 OutputMergerLogicOp;
    D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
    D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
    D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
    i32 PSSpecifiedStencilRefSupported;
    i32 TypedUAVLoadAdditionalFormats;
    i32 ROVsSupported;
    D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
    u32 MaxGPUVirtualAddressBitsPerResource;
    i32 StandardSwizzle64KBSupported;
    D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;
    i32 CrossAdapterRowMajorTextureSupported;
    i32 VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
    D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
} D3D12_FEATURE_DATA_D3D12_OPTIONS;

typedef struct D3D12_FEATURE_DATA_D3D12_OPTIONS1 {
    i32 WaveOps;
    u32 WaveLaneCountMin;
    u32 WaveLaneCountMax;
    u32 TotalLaneCount;
    i32 ExpandedComputeResourceStates;
    i32 Int64ShaderOps;
} D3D12_FEATURE_DATA_D3D12_OPTIONS1;

typedef enum D3D_ROOT_SIGNATURE_VERSION {
    D3D_ROOT_SIGNATURE_VERSION_1 = 0x1,
    D3D_ROOT_SIGNATURE_VERSION_1_0 = 0x1,
    D3D_ROOT_SIGNATURE_VERSION_1_1 = 0x2
} D3D_ROOT_SIGNATURE_VERSION;

typedef struct D3D12_FEATURE_DATA_ROOT_SIGNATURE {
    D3D_ROOT_SIGNATURE_VERSION HighestVersion;
} D3D12_FEATURE_DATA_ROOT_SIGNATURE;

typedef struct D3D12_FEATURE_DATA_ARCHITECTURE {
    u32 NodeIndex;
    i32 TileBasedRenderer;
    i32 UMA;
    i32 CacheCoherentUMA;
} D3D12_FEATURE_DATA_ARCHITECTURE;

typedef enum D3D_FEATURE_LEVEL {
    D3D_FEATURE_LEVEL_9_1 = 0x9100,
    D3D_FEATURE_LEVEL_9_2 = 0x9200,
    D3D_FEATURE_LEVEL_9_3 = 0x9300,
    D3D_FEATURE_LEVEL_10_0 = 0xa000,
    D3D_FEATURE_LEVEL_10_1 = 0xa100,
    D3D_FEATURE_LEVEL_11_0 = 0xb000,
    D3D_FEATURE_LEVEL_11_1 = 0xb100,
    D3D_FEATURE_LEVEL_12_0 = 0xc000,
    D3D_FEATURE_LEVEL_12_1 = 0xc100
} D3D_FEATURE_LEVEL;

typedef struct D3D12_FEATURE_DATA_FEATURE_LEVELS {
    u32 NumFeatureLevels;
    const D3D_FEATURE_LEVEL* pFeatureLevelsRequested;
    D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
} D3D12_FEATURE_DATA_FEATURE_LEVELS;

typedef enum D3D_SHADER_MODEL {
    D3D_SHADER_MODEL_5_1 = 0x51,
    D3D_SHADER_MODEL_6_0 = 0x60
} D3D_SHADER_MODEL;

typedef struct D3D12_FEATURE_DATA_SHADER_MODEL {
    D3D_SHADER_MODEL HighestShaderModel;
} D3D12_FEATURE_DATA_SHADER_MODEL;

typedef struct D3D12_FEATURE_DATA_FORMAT_SUPPORT {
    DXGI_FORMAT Format;
    D3D12_FORMAT_SUPPORT1 Support1;
    D3D12_FORMAT_SUPPORT2 Support2;
} D3D12_FEATURE_DATA_FORMAT_SUPPORT;

typedef struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
    DXGI_FORMAT Format;
    u32 SampleCount;
    D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
    u32 NumQualityLevels;
} D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS;

typedef struct D3D12_FEATURE_DATA_FORMAT_INFO {
    DXGI_FORMAT Format;
    u8 PlaneCount;
} D3D12_FEATURE_DATA_FORMAT_INFO;

struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
    u32 MaxGPUVirtualAddressBitsPerResource;
    u32 MaxGPUVirtualAddressBitsPerProcess;
} D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT;

typedef struct D3D12_RESOURCE_ALLOCATION_INFO {
    u64 SizeInBytes;
    u64 Alignment;
} D3D12_RESOURCE_ALLOCATION_INFO;

typedef enum D3D12_SHADER_COMPONENT_MAPPING {
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3,
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4,
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5
} D3D12_SHADER_COMPONENT_MAPPING;

#define D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(Src0,Src1,Src2,Src3) (((Src0)&0x7)|(((Src1)&0x7)<<3)|(((Src2)&0x7)<<(3*2))|(((Src3)&0x7)<<(3*3))|(1<<(3*4)))
#define D3D12_DECODE_SHADER_4_COMPONENT_MAPPING(ComponentToExtract,Mapping) ((D3D12_SHADER_COMPONENT_MAPPING)(Mapping>>(3*ComponentToExtract)&0x7))
#define D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(0,1,2,3)

typedef enum D3D12_BUFFER_SRV_FLAGS {
    D3D12_BUFFER_SRV_FLAG_NONE = 0,
    D3D12_BUFFER_SRV_FLAG_RAW = 0x1
} D3D12_BUFFER_SRV_FLAGS;

typedef struct D3D12_BUFFER_SRV {
    u64 FirstElement;
    u32 NumElements;
    u32 StructureByteStride;
    D3D12_BUFFER_SRV_FLAGS Flags;
} D3D12_BUFFER_SRV;

typedef struct D3D12_TEX1D_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    float ResourceMinLODClamp;
} D3D12_TEX1D_SRV;

typedef struct D3D12_TEX1D_ARRAY_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    u32 FirstArraySlice;
    u32 ArraySize;
    float ResourceMinLODClamp;
} D3D12_TEX1D_ARRAY_SRV;

typedef struct D3D12_TEX2D_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    u32 PlaneSlice;
    float ResourceMinLODClamp;
} D3D12_TEX2D_SRV;

typedef struct D3D12_TEX2D_ARRAY_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    u32 FirstArraySlice;
    u32 ArraySize;
    u32 PlaneSlice;
    float ResourceMinLODClamp;
} D3D12_TEX2D_ARRAY_SRV;

typedef struct D3D12_TEX3D_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    float ResourceMinLODClamp;
} D3D12_TEX3D_SRV;

typedef struct D3D12_TEXCUBE_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    float ResourceMinLODClamp;
} D3D12_TEXCUBE_SRV;

typedef struct D3D12_TEXCUBE_ARRAY_SRV {
    u32 MostDetailedMip;
    u32 MipLevels;
    u32 First2DArrayFace;
    u32 NumCubes;
    float ResourceMinLODClamp;
} D3D12_TEXCUBE_ARRAY_SRV;

typedef struct D3D12_TEX2DMS_SRV {
    u32 UnusedField_NothingToDefine;
} D3D12_TEX2DMS_SRV;

typedef struct D3D12_TEX2DMS_ARRAY_SRV {
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX2DMS_ARRAY_SRV;

typedef enum D3D12_SRV_DIMENSION {
    D3D12_SRV_DIMENSION_UNKNOWN = 0,
    D3D12_SRV_DIMENSION_BUFFER = 1,
    D3D12_SRV_DIMENSION_TEXTURE1D = 2,
    D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_SRV_DIMENSION_TEXTURE2D = 4,
    D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_SRV_DIMENSION_TEXTURE2DMS = 6,
    D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_SRV_DIMENSION_TEXTURE3D = 8,
    D3D12_SRV_DIMENSION_TEXTURECUBE = 9,
    D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10
} D3D12_SRV_DIMENSION;

typedef struct D3D12_SHADER_RESOURCE_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D12_SRV_DIMENSION ViewDimension;
    u32 Shader4ComponentMapping;
    union {
        D3D12_BUFFER_SRV Buffer;
        D3D12_TEX1D_SRV Texture1D;
        D3D12_TEX1D_ARRAY_SRV Texture1DArray;
        D3D12_TEX2D_SRV Texture2D;
        D3D12_TEX2D_ARRAY_SRV Texture2DArray;
        D3D12_TEX2DMS_SRV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        D3D12_TEX3D_SRV Texture3D;
        D3D12_TEXCUBE_SRV TextureCube;
        D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
    };
} D3D12_SHADER_RESOURCE_VIEW_DESC;

typedef enum D3D12_FILTER {
    D3D12_FILTER_MIN_MAG_MIP_POINT = 0,
    D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
    D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
    D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
    D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
    D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
    D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
    D3D12_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
    D3D12_FILTER_ANISOTROPIC = 0x55,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
    D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
    D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
    D3D12_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
    D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
    D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
    D3D12_FILTER_MINIMUM_ANISOTROPIC = 0x155,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
    D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
    D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
    D3D12_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
} D3D12_FILTER;

typedef enum D3D12_FILTER_TYPE {
    D3D12_FILTER_TYPE_POINT = 0,
    D3D12_FILTER_TYPE_LINEAR = 1
} D3D12_FILTER_TYPE;

typedef enum D3D12_FILTER_REDUCTION_TYPE {
    D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0,
    D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1,
    D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2,
    D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3
} D3D12_FILTER_REDUCTION_TYPE;

#define D3D12_ENCODE_BASIC_FILTER(min,mag,mip,reduction) ((D3D12_FILTER)((((min)&0x3)<<4)|(((mag)&0x3)<<2)|((mip)&0x3)|(((reduction)&0x3)<<7)))
#define D3D12_ENCODE_ANISOTROPIC_FILTER(reduction) ((D3D12_FILTER)(0x40|D3D12_ENCODE_BASIC_FILTER(D3D12_FILTER_TYPE_LINEAR,D3D12_FILTER_TYPE_LINEAR,D3D12_FILTER_TYPE_LINEAR,reduction)))
#define D3D12_DECODE_MIN_FILTER(D3D12Filter) ((D3D12_FILTER_TYPE)(((D3D12Filter)>>4)&0x3))
#define D3D12_DECODE_MAG_FILTER(D3D12Filter) ((D3D12_FILTER_TYPE)(((D3D12Filter)>>2)&0x3))
#define D3D12_DECODE_MIP_FILTER(D3D12Filter) ((D3D12_FILTER_TYPE)(((D3D12Filter)>>0)&0x3))
#define D3D12_DECODE_FILTER_REDUCTION(D3D12Filter) ((D3D12_FILTER_REDUCTION_TYPE)(((D3D12Filter)>>7)&0x3))
#define D3D12_DECODE_IS_COMPARISON_FILTER(D3D12Filter) (D3D12_DECODE_FILTER_REDUCTION(D3D12Filter)==D3D12_FILTER_REDUCTION_TYPE_COMPARISON)
#define D3D12_DECODE_IS_ANISOTROPIC_FILTER(D3D12Filter) (((D3D12Filter)&0x40)&&(D3D12_FILTER_TYPE_LINEAR==D3D12_DECODE_MIN_FILTER(D3D12Filter))&&(D3D12_FILTER_TYPE_LINEAR==D3D12_DECODE_MAG_FILTER(D3D12Filter))&&(D3D12_FILTER_TYPE_LINEAR==D3D12_DECODE_MIP_FILTER(D3D12Filter)))

typedef enum D3D12_TEXTURE_ADDRESS_MODE {
    D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2,
    D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3,
    D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5
} D3D12_TEXTURE_ADDRESS_MODE;

typedef struct D3D12_SAMPLER_DESC {
    D3D12_FILTER Filter;
    D3D12_TEXTURE_ADDRESS_MODE AddressU;
    D3D12_TEXTURE_ADDRESS_MODE AddressV;
    D3D12_TEXTURE_ADDRESS_MODE AddressW;
    float MipLODBias;
    u32 MaxAnisotropy;
    D3D12_COMPARISON_FUNC ComparisonFunc;
    float BorderColor[4];
    float MinLOD;
    float MaxLOD;
} D3D12_SAMPLER_DESC;

typedef struct D3D12_CONSTANT_BUFFER_VIEW_DESC {
    D3D12_GPU_VIRTUAL_ADDRESS BufferLocation;
    u32 SizeInBytes;
} D3D12_CONSTANT_BUFFER_VIEW_DESC;

typedef enum D3D12_BUFFER_UAV_FLAGS {
    D3D12_BUFFER_UAV_FLAG_NONE = 0,
    D3D12_BUFFER_UAV_FLAG_RAW = 0x1
} D3D12_BUFFER_UAV_FLAGS;

typedef struct D3D12_BUFFER_UAV {
    u64 FirstElement;
    u32 NumElements;
    u32 StructureByteStride;
    u64 CounterOffsetInBytes;
    D3D12_BUFFER_UAV_FLAGS Flags;
} D3D12_BUFFER_UAV;

typedef struct D3D12_TEX1D_UAV {
    u32 MipSlice;
} D3D12_TEX1D_UAV;

typedef struct D3D12_TEX1D_ARRAY_UAV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX1D_ARRAY_UAV;

typedef struct D3D12_TEX2D_UAV {
    u32 MipSlice;
    u32 PlaneSlice;
} D3D12_TEX2D_UAV;

typedef struct D3D12_TEX2D_ARRAY_UAV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
    u32 PlaneSlice;
} D3D12_TEX2D_ARRAY_UAV;

typedef struct D3D12_TEX3D_UAV {
    u32 MipSlice;
    u32 FirstWSlice;
    u32 WSize;
} D3D12_TEX3D_UAV;

typedef enum D3D12_UAV_DIMENSION {
    D3D12_UAV_DIMENSION_UNKNOWN = 0,
    D3D12_UAV_DIMENSION_BUFFER = 1,
    D3D12_UAV_DIMENSION_TEXTURE1D = 2,
    D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_UAV_DIMENSION_TEXTURE2D = 4,
    D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_UAV_DIMENSION_TEXTURE3D = 8
} D3D12_UAV_DIMENSION;

typedef struct D3D12_UNORDERED_ACCESS_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D12_UAV_DIMENSION ViewDimension;
    union {
        D3D12_BUFFER_UAV Buffer;
        D3D12_TEX1D_UAV Texture1D;
        D3D12_TEX1D_ARRAY_UAV Texture1DArray;
        D3D12_TEX2D_UAV Texture2D;
        D3D12_TEX2D_ARRAY_UAV Texture2DArray;
        D3D12_TEX3D_UAV Texture3D;
    };
} D3D12_UNORDERED_ACCESS_VIEW_DESC;

typedef struct D3D12_BUFFER_RTV {
    u64 FirstElement;
    u32 NumElements;
} D3D12_BUFFER_RTV;

typedef struct D3D12_TEX1D_RTV {
    u32 MipSlice;
} D3D12_TEX1D_RTV;

typedef struct D3D12_TEX1D_ARRAY_RTV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX1D_ARRAY_RTV;

typedef struct D3D12_TEX2D_RTV {
    u32 MipSlice;
    u32 PlaneSlice;
} D3D12_TEX2D_RTV;

typedef struct D3D12_TEX2DMS_RTV {
    u32 UnusedField_NothingToDefine;
} D3D12_TEX2DMS_RTV;

typedef struct D3D12_TEX2D_ARRAY_RTV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
    u32 PlaneSlice;
} D3D12_TEX2D_ARRAY_RTV;

typedef struct D3D12_TEX2DMS_ARRAY_RTV {
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX2DMS_ARRAY_RTV;

typedef struct D3D12_TEX3D_RTV {
    u32 MipSlice;
    u32 FirstWSlice;
    u32 WSize;
} D3D12_TEX3D_RTV;

typedef enum D3D12_RTV_DIMENSION {
    D3D12_RTV_DIMENSION_UNKNOWN = 0,
    D3D12_RTV_DIMENSION_BUFFER = 1,
    D3D12_RTV_DIMENSION_TEXTURE1D = 2,
    D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_RTV_DIMENSION_TEXTURE2D = 4,
    D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_RTV_DIMENSION_TEXTURE2DMS = 6,
    D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_RTV_DIMENSION_TEXTURE3D = 8
} D3D12_RTV_DIMENSION;

typedef struct D3D12_RENDER_TARGET_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D12_RTV_DIMENSION ViewDimension;
    union {
        D3D12_BUFFER_RTV Buffer;
        D3D12_TEX1D_RTV Texture1D;
        D3D12_TEX1D_ARRAY_RTV Texture1DArray;
        D3D12_TEX2D_RTV Texture2D;
        D3D12_TEX2D_ARRAY_RTV Texture2DArray;
        D3D12_TEX2DMS_RTV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        D3D12_TEX3D_RTV Texture3D;
    };
} D3D12_RENDER_TARGET_VIEW_DESC;

typedef struct D3D12_TEX1D_DSV {
    u32 MipSlice;
} D3D12_TEX1D_DSV;

typedef struct D3D12_TEX1D_ARRAY_DSV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX1D_ARRAY_DSV;

typedef struct D3D12_TEX2D_DSV {
    u32 MipSlice;
} D3D12_TEX2D_DSV;

typedef struct D3D12_TEX2D_ARRAY_DSV {
    u32 MipSlice;
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX2D_ARRAY_DSV;

typedef struct D3D12_TEX2DMS_DSV {
    u32 UnusedField_NothingToDefine;
} D3D12_TEX2DMS_DSV;

typedef struct D3D12_TEX2DMS_ARRAY_DSV {
    u32 FirstArraySlice;
    u32 ArraySize;
} D3D12_TEX2DMS_ARRAY_DSV;

typedef enum D3D12_DSV_FLAGS {
    D3D12_DSV_FLAG_NONE = 0,
    D3D12_DSV_FLAG_READ_ONLY_DEPTH = 0x1,
    D3D12_DSV_FLAG_READ_ONLY_STENCIL = 0x2
} D3D12_DSV_FLAGS;

typedef enum D3D12_DSV_DIMENSION {
    D3D12_DSV_DIMENSION_UNKNOWN = 0,
    D3D12_DSV_DIMENSION_TEXTURE1D = 1,
    D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2,
    D3D12_DSV_DIMENSION_TEXTURE2D = 3,
    D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4,
    D3D12_DSV_DIMENSION_TEXTURE2DMS = 5,
    D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
} D3D12_DSV_DIMENSION;

typedef struct D3D12_DEPTH_STENCIL_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D12_DSV_DIMENSION ViewDimension;
    D3D12_DSV_FLAGS Flags;
    union {
        D3D12_TEX1D_DSV Texture1D;
        D3D12_TEX1D_ARRAY_DSV Texture1DArray;
        D3D12_TEX2D_DSV Texture2D;
        D3D12_TEX2D_ARRAY_DSV Texture2DArray;
        D3D12_TEX2DMS_DSV Texture2DMS;
        D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    };
} D3D12_DEPTH_STENCIL_VIEW_DESC;

typedef struct D3D12_DEPTH_STENCIL_VALUE {
    float Depth;
    u8 Stencil;
} D3D12_DEPTH_STENCIL_VALUE;

typedef struct D3D12_CLEAR_VALUE {
    DXGI_FORMAT Format;
    union {
        float Color[4];
        D3D12_DEPTH_STENCIL_VALUE DepthStencil;
    };
} D3D12_CLEAR_VALUE;

typedef enum D3D12_FENCE_FLAGS {
    D3D12_FENCE_FLAG_NONE = 0,
    D3D12_FENCE_FLAG_SHARED = 0x1,
    D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 0x2
} D3D12_FENCE_FLAGS;

typedef struct D3D12_PACKED_MIP_INFO {
    u8 NumStandardMips;
    u8 NumPackedMips;
    u32 NumTilesForPackedMips;
    u32 StartTileIndexInOverallResource;
} D3D12_PACKED_MIP_INFO;

typedef struct D3D12_SUBRESOURCE_DATA {
    const void* pData;
    i64 RowPitch;
    i64 SlicePitch;
} D3D12_SUBRESOURCE_DATA;

typedef struct D3D12_MEMCPY_DEST {
    void* pData;
    u64 RowPitch;
    u64 SlicePitch;
} D3D12_MEMCPY_DEST;


typedef struct IUnknownDispatchTable {
    i32 (STDCALLP QueryInterface)(IUnknown*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(IUnknown*);
    u32 (STDCALLP Release)(IUnknown*);
} IUnknownDispatchTable;
struct IUnknown { const IUnknownDispatchTable* DispatchTable; };

#define IUnknown_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define IUnknown_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define IUnknown_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))

typedef struct ID3DBlobDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3DBlob*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3DBlob*);
    u32 (STDCALLP Release)(ID3DBlob*);
    void* (STDCALLP GetBufferPointer)(ID3DBlob*);
    u64 (STDCALLP GetBufferSize)(ID3DBlob*);
} ID3DBlobDispatchTable;
struct ID3DBlob { const ID3DBlobDispatchTable* DispatchTable; };

#define ID3DBlob_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3DBlob_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3DBlob_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3DBlob_GetBufferPointer(This, ...) ((This)->DispatchTable->GetBufferPointer(This, __VA_ARGS__))
#define ID3DBlob_GetBufferSize(This, ...) ((This)->DispatchTable->GetBufferSize(This, __VA_ARGS__))

typedef struct ID3D12ObjectDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12Object*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12Object*);
    u32 (STDCALLP Release)(ID3D12Object*);
    i32 (STDCALLP GetPrivateData)(ID3D12Object*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12Object*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Object*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12Object*, const u16*);
} ID3D12ObjectDispatchTable;
struct ID3D12Object { const ID3D12ObjectDispatchTable* DispatchTable; };

#define ID3D12Object_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12Object_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12Object_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12Object_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12Object_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12Object_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12Object_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))

typedef struct ID3D12DeviceChildDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12DeviceChild*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12DeviceChild*);
    u32 (STDCALLP Release)(ID3D12DeviceChild*);
    i32 (STDCALLP GetPrivateData)(ID3D12DeviceChild*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12DeviceChild*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12DeviceChild*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12DeviceChild*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12DeviceChild*, const MS_GUID*, void**);
} ID3D12DeviceChildDispatchTable;
struct ID3D12DeviceChild { const ID3D12DeviceChildDispatchTable* DispatchTable; };

#define ID3D12DeviceChild_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12DeviceChild_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12DeviceChild_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12DeviceChild_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12DeviceChild_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12DeviceChild_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12DeviceChild_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12DeviceChild_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))

typedef struct ID3D12RootSignatureDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12RootSignature*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12RootSignature*);
    u32 (STDCALLP Release)(ID3D12RootSignature*);
    i32 (STDCALLP GetPrivateData)(ID3D12RootSignature*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12RootSignature*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12RootSignature*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12RootSignature*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12RootSignature*, const MS_GUID*, void**);
} ID3D12RootSignatureDispatchTable;
struct ID3D12RootSignature { const ID3D12RootSignatureDispatchTable* DispatchTable; };

#define ID3D12RootSignature_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12RootSignature_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12RootSignature_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12RootSignature_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12RootSignature_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12RootSignature_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12RootSignature_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12RootSignature_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))

typedef struct ID3D12PageableDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12Pageable*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12Pageable*);
    u32 (STDCALLP Release)(ID3D12Pageable*);
    i32 (STDCALLP GetPrivateData)(ID3D12Pageable*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12Pageable*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Pageable*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12Pageable*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12Pageable*, const MS_GUID*, void**);
} ID3D12PageableDispatchTable;
struct ID3D12Pageable { const ID3D12PageableDispatchTable* DispatchTable; };

#define ID3D12Pageable_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12Pageable_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12Pageable_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12Pageable_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12Pageable_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12Pageable_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12Pageable_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12Pageable_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))

typedef struct ID3D12HeapDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12Heap*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12Heap*);
    u32 (STDCALLP Release)(ID3D12Heap*);
    i32 (STDCALLP GetPrivateData)(ID3D12Heap*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12Heap*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Heap*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12Heap*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12Heap*, const MS_GUID *, void**);
    D3D12_HEAP_DESC* (STDCALLP GetDesc)(ID3D12Heap*, D3D12_HEAP_DESC*);
} ID3D12HeapDispatchTable;
struct ID3D12Heap { const ID3D12HeapDispatchTable* DispatchTable; };

#define ID3D12Heap_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12Heap_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12Heap_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12Heap_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12Heap_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12Heap_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12Heap_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12Heap_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))
#define ID3D12Heap_GetDesc(This, ...) ((This)->DispatchTable->GetDesc(This, __VA_ARGS__))

typedef struct ID3D12ResourceDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12Resource*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12Resource*);
    u32 (STDCALLP Release)(ID3D12Resource*);
    i32 (STDCALLP GetPrivateData)(ID3D12Resource*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12Resource*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Resource*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12Resource*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12Resource*, const MS_GUID*, void**);
    i32 (STDCALLP Map)(ID3D12Resource*, u32, const D3D12_RANGE*, void**);
    void (STDCALLP Unmap)(ID3D12Resource*, u32, const D3D12_RANGE*);
    D3D12_RESOURCE_DESC* (STDCALLP GetDesc)(ID3D12Resource*, D3D12_RESOURCE_DESC*);
    D3D12_GPU_VIRTUAL_ADDRESS (STDCALLP GetGPUVirtualAddress)(ID3D12Resource*);
    i32 (STDCALLP WriteToSubresource)(ID3D12Resource*, u32, const D3D12_BOX*, const void*, u32, u32);
    i32 (STDCALLP ReadFromSubresource)(ID3D12Resource*, void*, u32, u32, u32, const D3D12_BOX*);
    i32 (STDCALLP GetHeapProperties)(ID3D12Resource*, D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS*);
} ID3D12ResourceDispatchTable;
struct ID3D12Resource { const ID3D12ResourceDispatchTable* DispatchTable; };

#define ID3D12Resource_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12Resource_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12Resource_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12Resource_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12Resource_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12Resource_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12Resource_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12Resource_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))
#define ID3D12Resource_Map(This, ...) ((This)->DispatchTable->Map(This, __VA_ARGS__))
#define ID3D12Resource_Unmap(This, ...) ((This)->DispatchTable->Unmap(This, __VA_ARGS__))
#define ID3D12Resource_GetDesc(This, ...) ((This)->DispatchTable->GetDesc(This, __VA_ARGS__))
#define ID3D12Resource_GetGPUVirtualAddress(This, ...) ((This)->DispatchTable->GetGPUVirtualAddress(This, __VA_ARGS__))
#define ID3D12Resource_WriteToSubresource(This, ...) ((This)->DispatchTable->WriteToSubresource(This, __VA_ARGS__))
#define ID3D12Resource_ReadFromSubresource(This, ...) ((This)->DispatchTable->ReadFromSubresource(This, __VA_ARGS__))
#define ID3D12Resource_GetHeapProperties(This, ...) ((This)->DispatchTable->GetHeapProperties(This, __VA_ARGS__))

typedef struct ID3D12CommandAllocatorDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12CommandAllocator*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12CommandAllocator*);
    u32 (STDCALLP Release)(ID3D12CommandAllocator*);
    i32 (STDCALLP GetPrivateData)(ID3D12CommandAllocator*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12CommandAllocator*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12CommandAllocator*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12CommandAllocator*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12CommandAllocator*, const MS_GUID*, void**);
    i32 (STDCALLP Reset)(ID3D12CommandAllocator*);
} ID3D12CommandAllocatorDispatchTable;
struct ID3D12CommandAllocator { const ID3D12CommandAllocatorDispatchTable* DispatchTable; };

#define ID3D12CommandAllocator_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12CommandAllocator_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12CommandAllocator_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12CommandAllocator_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12CommandAllocator_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12CommandAllocator_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12CommandAllocator_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12CommandAllocator_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))
#define ID3D12CommandAllocator_Reset(This, ...) ((This)->DispatchTable->Reset(This, __VA_ARGS__))

typedef struct ID3D12FenceDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12Fence*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12Fence*);
    u32 (STDCALLP Release)(ID3D12Fence*);
    i32 (STDCALLP GetPrivateData)(ID3D12Fence*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12Fence*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Fence*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12Fence*, const unsigned short *);
    i32 (STDCALLP GetDevice)(ID3D12Fence*, const MS_GUID*, void**);
    u64 (STDCALLP GetCompletedValue)(ID3D12Fence*);
    i32 (STDCALLP SetEventOnCompletion)(ID3D12Fence*, u64, void*);
    i32 (STDCALLP Signal)(ID3D12Fence*, u64);
} ID3D12FenceDispatchTable;
struct ID3D12Fence { const ID3D12FenceDispatchTable* DispatchTable; };

#define ID3D12Fence_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12Fence_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12Fence_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12Fence_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12Fence_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12Fence_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12Fence_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12Fence_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))
#define ID3D12Fence_GetCompletedValue(This, ...) ((This)->DispatchTable->GetCompletedValue(This, __VA_ARGS__))
#define ID3D12Fence_SetEventOnCompletion(This, ...) ((This)->DispatchTable->SetEventOnCompletion(This, __VA_ARGS__))
#define ID3D12Fence_Signal(This, ...) ((This)->DispatchTable->Signal(This, __VA_ARGS__))

typedef struct ID3D12PipelineStateDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12PipelineState*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12PipelineState*);
    u32 (STDCALLP Release)(ID3D12PipelineState*);
    i32 (STDCALLP GetPrivateData)(ID3D12PipelineState*, const MS_GUID *, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12PipelineState*, const MS_GUID *, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12PipelineState*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12PipelineState*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12PipelineState*, const MS_GUID*, void**);
    i32 (STDCALLP GetCachedBlob)(ID3D12PipelineState*, ID3DBlob**);
} ID3D12PipelineStateDispatchTable;
struct ID3D12PipelineState { const ID3D12PipelineStateDispatchTable* DispatchTable; };

#define ID3D12PipelineState_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12PipelineState_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12PipelineState_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12PipelineState_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12PipelineState_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12PipelineState_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12PipelineState_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12PipelineState_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))
#define ID3D12PipelineState_GetCachedBlob(This, ...) ((This)->DispatchTable->GetCachedBlob(This, __VA_ARGS__))

typedef struct ID3D12DescriptorHeapDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12DescriptorHeap*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12DescriptorHeap*);
    u32 (STDCALLP Release)(ID3D12DescriptorHeap*);
    i32 (STDCALLP GetPrivateData)(ID3D12DescriptorHeap*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12DescriptorHeap*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12DescriptorHeap*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12DescriptorHeap*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12DescriptorHeap*, const MS_GUID*, void**);
    D3D12_DESCRIPTOR_HEAP_DESC* (STDCALLP GetDesc)(ID3D12DescriptorHeap*, D3D12_DESCRIPTOR_HEAP_DESC*);
    D3D12_CPU_DESCRIPTOR_HANDLE* (STDCALLP GetCPUDescriptorHandleForHeapStart)(ID3D12DescriptorHeap*, D3D12_CPU_DESCRIPTOR_HANDLE*);
    D3D12_GPU_DESCRIPTOR_HANDLE* (STDCALLP GetGPUDescriptorHandleForHeapStart)(ID3D12DescriptorHeap*, D3D12_GPU_DESCRIPTOR_HANDLE*);
} ID3D12DescriptorHeapDispatchTable;
struct ID3D12DescriptorHeap { const ID3D12DescriptorHeapDispatchTable* DispatchTable; };

#define ID3D12DescriptorHeap_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12DescriptorHeap_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12DescriptorHeap_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12DescriptorHeap_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12DescriptorHeap_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12DescriptorHeap_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12DescriptorHeap_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12DescriptorHeap_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))
#define ID3D12DescriptorHeap_GetDesc(This, ...) ((This)->DispatchTable->GetDesc(This, __VA_ARGS__))
#define ID3D12DescriptorHeap_GetCPUDescriptorHandleForHeapStart(This, ...) ((This)->DispatchTable->GetCPUDescriptorHandleForHeapStart(This, __VA_ARGS__))
#define ID3D12DescriptorHeap_GetGPUDescriptorHandleForHeapStart(This, ...) ((This)->DispatchTable->GetGPUDescriptorHandleForHeapStart(This, __VA_ARGS__))

typedef struct ID3D12QueryHeapDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12QueryHeap*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12QueryHeap*);
    u32 (STDCALLP Release)(ID3D12QueryHeap*);
    i32 (STDCALLP GetPrivateData)(ID3D12QueryHeap*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12QueryHeap*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12QueryHeap*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12QueryHeap*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12QueryHeap*, const MS_GUID*, void**);
} ID3D12QueryHeapDispatchTable;
struct ID3D12QueryHeap { const ID3D12QueryHeapDispatchTable* DispatchTable; };

#define ID3D12QueryHeap_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12QueryHeap_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12QueryHeap_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12QueryHeap_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12QueryHeap_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12QueryHeap_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12QueryHeap_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12QueryHeap_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))

typedef struct ID3D12CommandSignatureDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12CommandSignature*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12CommandSignature*);
    u32 (STDCALLP Release)(ID3D12CommandSignature*);
    i32 (STDCALLP GetPrivateData)(ID3D12CommandSignature*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12CommandSignature*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12CommandSignature*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12CommandSignature*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12CommandSignature*, const MS_GUID*, void**);
} ID3D12CommandSignatureDispatchTable;
struct ID3D12CommandSignature { const ID3D12CommandSignatureDispatchTable* DispatchTable; };

#define ID3D12CommandSignature_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12CommandSignature_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12CommandSignature_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12CommandSignature_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12CommandSignature_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12CommandSignature_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12CommandSignature_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12CommandSignature_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))

typedef struct ID3D12CommandListDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12CommandList*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12CommandList*);
    u32 (STDCALLP Release)(ID3D12CommandList*);
    i32 (STDCALLP GetPrivateData)(ID3D12CommandList*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12CommandList*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12CommandList*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12CommandList*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12CommandList*, const MS_GUID*, void**);
    D3D12_COMMAND_LIST_TYPE (STDCALLP GetType)(ID3D12CommandList*);
} ID3D12CommandListDispatchTable;
struct ID3D12CommandList { const ID3D12CommandListDispatchTable* DispatchTable; };

#define ID3D12CommandList_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12CommandList_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12CommandList_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12CommandList_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12CommandList_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12CommandList_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12CommandList_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12CommandList_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))
#define ID3D12CommandList_GetType(This, ...) ((This)->DispatchTable->GetType(This, __VA_ARGS__))

typedef struct ID3D12GraphicsCommandListDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12GraphicsCommandList*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12GraphicsCommandList*);
    u32 (STDCALLP Release)(ID3D12GraphicsCommandList*);
    i32 (STDCALLP GetPrivateData)(ID3D12GraphicsCommandList*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12GraphicsCommandList*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12GraphicsCommandList*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12GraphicsCommandList*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12GraphicsCommandList*, const MS_GUID*, void**);
    D3D12_COMMAND_LIST_TYPE (STDCALLP GetType)(ID3D12GraphicsCommandList*);
    i32 (STDCALLP Close)(ID3D12GraphicsCommandList*);
    i32 (STDCALLP Reset)(ID3D12GraphicsCommandList*, ID3D12CommandAllocator*, ID3D12PipelineState*);
    void (STDCALLP ClearState)(ID3D12GraphicsCommandList*, ID3D12PipelineState*);
    void (STDCALLP DrawInstanced)(ID3D12GraphicsCommandList*, u32, u32, u32, u32);
    void (STDCALLP DrawIndexedInstanced)(ID3D12GraphicsCommandList*, u32, u32, u32, i32, u32);
    void (STDCALLP Dispatch)(ID3D12GraphicsCommandList*, u32, u32, u32);
    void (STDCALLP CopyBufferRegion)(ID3D12GraphicsCommandList*, ID3D12Resource*, u64, ID3D12Resource*, u64, u64);
    void (STDCALLP CopyTextureRegion)(ID3D12GraphicsCommandList*, const D3D12_TEXTURE_COPY_LOCATION*, u32, u32, u32, const D3D12_TEXTURE_COPY_LOCATION*, const D3D12_BOX*);
    void (STDCALLP CopyResource)(ID3D12GraphicsCommandList*, ID3D12Resource*, ID3D12Resource*);
    void (STDCALLP CopyTiles)(ID3D12GraphicsCommandList*, ID3D12Resource*, const D3D12_TILED_RESOURCE_COORDINATE*, const D3D12_TILE_REGION_SIZE*, ID3D12Resource*, u64, D3D12_TILE_COPY_FLAGS);
    void (STDCALLP ResolveSubresource)(ID3D12GraphicsCommandList*, ID3D12Resource*, u32, ID3D12Resource*, u32, DXGI_FORMAT);
    void (STDCALLP IASetPrimitiveTopology)(ID3D12GraphicsCommandList*, D3D12_PRIMITIVE_TOPOLOGY);
    void (STDCALLP RSSetViewports)(ID3D12GraphicsCommandList*, u32, const D3D12_VIEWPORT*);
    void (STDCALLP RSSetScissorRects)(ID3D12GraphicsCommandList*, u32, const D3D12_RECT*);
    void (STDCALLP OMSetBlendFactor)(ID3D12GraphicsCommandList*, const float[4]);
    void (STDCALLP OMSetStencilRef)(ID3D12GraphicsCommandList*, u32);
    void (STDCALLP SetPipelineState)(ID3D12GraphicsCommandList*, ID3D12PipelineState*);
    void (STDCALLP ResourceBarrier)(ID3D12GraphicsCommandList*, u32, const D3D12_RESOURCE_BARRIER*);
    void (STDCALLP ExecuteBundle)(ID3D12GraphicsCommandList*, ID3D12GraphicsCommandList*);
    void (STDCALLP SetDescriptorHeaps)(ID3D12GraphicsCommandList*, u32, ID3D12DescriptorHeap* const*);
    void (STDCALLP SetComputeRootSignature)(ID3D12GraphicsCommandList*, ID3D12RootSignature*);
    void (STDCALLP SetGraphicsRootSignature)(ID3D12GraphicsCommandList*, ID3D12RootSignature*);
    void (STDCALLP SetComputeRootDescriptorTable)(ID3D12GraphicsCommandList*, u32, D3D12_GPU_DESCRIPTOR_HANDLE);
    void (STDCALLP SetGraphicsRootDescriptorTable)(ID3D12GraphicsCommandList*, u32, D3D12_GPU_DESCRIPTOR_HANDLE);
    void (STDCALLP SetComputeRoot32BitConstant)(ID3D12GraphicsCommandList*, u32, u32, u32);
    void (STDCALLP SetGraphicsRoot32BitConstant)(ID3D12GraphicsCommandList*, u32, u32, u32);
    void (STDCALLP SetComputeRoot32BitConstants)(ID3D12GraphicsCommandList*, u32, u32, const void*, u32);
    void (STDCALLP SetGraphicsRoot32BitConstants)(ID3D12GraphicsCommandList*, u32, u32, const void*, u32);
    void (STDCALLP SetComputeRootConstantBufferView)(ID3D12GraphicsCommandList*, u32, D3D12_GPU_VIRTUAL_ADDRESS);
    void (STDCALLP SetGraphicsRootConstantBufferView)(ID3D12GraphicsCommandList*, u32, D3D12_GPU_VIRTUAL_ADDRESS);
    void (STDCALLP SetComputeRootShaderResourceView)(ID3D12GraphicsCommandList*, u32, D3D12_GPU_VIRTUAL_ADDRESS);
    void (STDCALLP SetGraphicsRootShaderResourceView)(ID3D12GraphicsCommandList*, u32, D3D12_GPU_VIRTUAL_ADDRESS);
    void (STDCALLP SetComputeRootUnorderedAccessView)(ID3D12GraphicsCommandList*, u32, D3D12_GPU_VIRTUAL_ADDRESS);
    void (STDCALLP SetGraphicsRootUnorderedAccessView)(ID3D12GraphicsCommandList*, u32, D3D12_GPU_VIRTUAL_ADDRESS);
    void (STDCALLP IASetIndexBuffer)(ID3D12GraphicsCommandList*, const D3D12_INDEX_BUFFER_VIEW*);
    void (STDCALLP IASetVertexBuffers)(ID3D12GraphicsCommandList*, u32, u32, const D3D12_VERTEX_BUFFER_VIEW*);
    void (STDCALLP SOSetTargets)(ID3D12GraphicsCommandList*, u32, u32, const D3D12_STREAM_OUTPUT_BUFFER_VIEW*);
    void (STDCALLP OMSetRenderTargets)(ID3D12GraphicsCommandList*, u32, const D3D12_CPU_DESCRIPTOR_HANDLE*, i32, const D3D12_CPU_DESCRIPTOR_HANDLE*);
    void (STDCALLP ClearDepthStencilView)(ID3D12GraphicsCommandList*, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CLEAR_FLAGS, float, u8, u32, const D3D12_RECT*);
    void (STDCALLP ClearRenderTargetView)(ID3D12GraphicsCommandList*, D3D12_CPU_DESCRIPTOR_HANDLE, const float[4], u32, const D3D12_RECT*);
    void (STDCALLP ClearUnorderedAccessViewUint)(ID3D12GraphicsCommandList*, D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource*, const u32[4], u32, const D3D12_RECT*);
    void (STDCALLP ClearUnorderedAccessViewFloat)(ID3D12GraphicsCommandList*, D3D12_GPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, ID3D12Resource*, const float[4], u32, const D3D12_RECT*);
    void (STDCALLP DiscardResource)(ID3D12GraphicsCommandList*, ID3D12Resource*, const D3D12_DISCARD_REGION*);
    void (STDCALLP BeginQuery)(ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12_QUERY_TYPE, u32);
    void (STDCALLP EndQuery)(ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12_QUERY_TYPE, u32);
    void (STDCALLP ResolveQueryData)(ID3D12GraphicsCommandList*, ID3D12QueryHeap*, D3D12_QUERY_TYPE, u32, u32, ID3D12Resource*, u64);
    void (STDCALLP SetPredication)(ID3D12GraphicsCommandList*, ID3D12Resource*, u64, D3D12_PREDICATION_OP);
    void (STDCALLP SetMarker)(ID3D12GraphicsCommandList*, u32, const void*, u32);
    void (STDCALLP BeginEvent)(ID3D12GraphicsCommandList*, u32, const void*, u32);
    void (STDCALLP EndEvent)(ID3D12GraphicsCommandList*);
    void (STDCALLP ExecuteIndirect)(ID3D12GraphicsCommandList*, ID3D12CommandSignature*, u32, ID3D12Resource*, u64, ID3D12Resource*, u64);
} ID3D12GraphicsCommandListDispatchTable;
struct ID3D12GraphicsCommandList { const ID3D12GraphicsCommandListDispatchTable* DispatchTable; };

#define ID3D12GraphicsCommandList_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_GetType(This, ...) ((This)->DispatchTable->GetType(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_Close(This, ...) ((This)->DispatchTable->Close(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_Reset(This, ...) ((This)->DispatchTable->Reset(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_ClearState(This, ...) ((This)->DispatchTable->ClearState(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_DrawInstanced(This, ...) ((This)->DispatchTable->DrawInstanced(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_DrawIndexedInstanced(This, ...) ((This)->DispatchTable->DrawIndexedInstanced(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_Dispatch(This, ...) ((This)->DispatchTable->Dispatch(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_CopyBufferRegion(This, ...) ((This)->DispatchTable->CopyBufferRegion(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_CopyTextureRegion(This, ...) ((This)->DispatchTable->CopyTextureRegion(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_CopyResource(This, ...) ((This)->DispatchTable->CopyResource(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_CopyTiles(This, ...) ((This)->DispatchTable->CopyTiles(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_ResolveSubresource(This, ...) ((This)->DispatchTable->ResolveSubresource(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_IASetPrimitiveTopology(This, ...) ((This)->DispatchTable->IASetPrimitiveTopology(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_RSSetViewports(This, ...) ((This)->DispatchTable->RSSetViewports(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_RSSetScissorRects(This, ...) ((This)->DispatchTable->RSSetScissorRects(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_OMSetBlendFactor(This, ...) ((This)->DispatchTable->OMSetBlendFactor(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_OMSetStencilRef(This, ...) ((This)->DispatchTable->OMSetStencilRef(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetPipelineState(This, ...) ((This)->DispatchTable->SetPipelineState(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_ResourceBarrier(This, ...) ((This)->DispatchTable->ResourceBarrier(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_ExecuteBundle(This, ...) ((This)->DispatchTable->ExecuteBundle(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetDescriptorHeaps(This, ...) ((This)->DispatchTable->SetDescriptorHeaps(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetComputeRootSignature(This, ...) ((This)->DispatchTable->SetComputeRootSignature(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetGraphicsRootSignature(This, ...) ((This)->DispatchTable->SetGraphicsRootSignature(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetComputeRootDescriptorTable(This, ...) ((This)->DispatchTable->SetComputeRootDescriptorTable(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetGraphicsRootDescriptorTable(This, ...) ((This)->DispatchTable->SetGraphicsRootDescriptorTable(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetComputeRoot32BitConstant(This, ...) ((This)->DispatchTable->SetComputeRoot32BitConstant(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetGraphicsRoot32BitConstant(This, ...) ((This)->DispatchTable->SetGraphicsRoot32BitConstant(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetComputeRoot32BitConstants(This, ...) ((This)->DispatchTable->SetComputeRoot32BitConstants(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetGraphicsRoot32BitConstants(This, ...) ((This)->DispatchTable->SetGraphicsRoot32BitConstants(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetComputeRootConstantBufferView(This, ...) ((This)->DispatchTable->SetComputeRootConstantBufferView(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetGraphicsRootConstantBufferView(This, ...) ((This)->DispatchTable->SetGraphicsRootConstantBufferView(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetComputeRootShaderResourceView(This, ...) ((This)->DispatchTable->SetComputeRootShaderResourceView(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetGraphicsRootShaderResourceView(This, ...) ((This)->DispatchTable->SetGraphicsRootShaderResourceView(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetComputeRootUnorderedAccessView(This, ...) ((This)->DispatchTable->SetComputeRootUnorderedAccessView(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetGraphicsRootUnorderedAccessView(This, ...) ((This)->DispatchTable->SetGraphicsRootUnorderedAccessView(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_IASetIndexBuffer(This, ...) ((This)->DispatchTable->IASetIndexBuffer(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_IASetVertexBuffers(This, ...) ((This)->DispatchTable->IASetVertexBuffers(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SOSetTargets(This, ...) ((This)->DispatchTable->SOSetTargets(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_OMSetRenderTargets(This, ...) ((This)->DispatchTable->OMSetRenderTargets(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_ClearDepthStencilView(This, ...) ((This)->DispatchTable->ClearDepthStencilView(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_ClearRenderTargetView(This, ...) ((This)->DispatchTable->ClearRenderTargetView(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_ClearUnorderedAccessViewUint(This, ...) ((This)->DispatchTable->ClearUnorderedAccessViewUint(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_ClearUnorderedAccessViewFloat(This, ...) ((This)->DispatchTable->ClearUnorderedAccessViewFloat(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_DiscardResource(This, ...) ((This)->DispatchTable->DiscardResource(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_BeginQuery(This, ...) ((This)->DispatchTable->BeginQuery(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_EndQuery(This, ...) ((This)->DispatchTable->EndQuery(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_ResolveQueryData(This, ...) ((This)->DispatchTable->ResolveQueryData(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetPredication(This, ...) ((This)->DispatchTable->SetPredication(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_SetMarker(This, ...) ((This)->DispatchTable->SetMarker(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_BeginEvent(This, ...) ((This)->DispatchTable->BeginEvent(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_EndEvent(This, ...) ((This)->DispatchTable->EndEvent(This, __VA_ARGS__))
#define ID3D12GraphicsCommandList_ExecuteIndirect(This, ...) ((This)->DispatchTable->ExecuteIndirect(This, __VA_ARGS__))

typedef struct ID3D12CommandQueueDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12CommandQueue*, const MS_GUID*, void**);
    u32 (STDCALLP AddRef)(ID3D12CommandQueue*);
    u32 (STDCALLP Release)(ID3D12CommandQueue*);
    i32 (STDCALLP GetPrivateData)(ID3D12CommandQueue*, const MS_GUID*, u32*, void*);
    i32 (STDCALLP SetPrivateData)(ID3D12CommandQueue*, const MS_GUID*, u32, const void*);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12CommandQueue*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12CommandQueue*, const u16*);
    i32 (STDCALLP GetDevice)(ID3D12CommandQueue*, const MS_GUID*, void**);
    void (STDCALLP UpdateTileMappings)(ID3D12CommandQueue*, ID3D12Resource*, u32, const D3D12_TILED_RESOURCE_COORDINATE*, const D3D12_TILE_REGION_SIZE*, ID3D12Heap*, u32, const D3D12_TILE_RANGE_FLAGS*, const u32*, const u32*, D3D12_TILE_MAPPING_FLAGS);
    void (STDCALLP CopyTileMappings)(ID3D12CommandQueue*, ID3D12Resource*, const D3D12_TILED_RESOURCE_COORDINATE*, ID3D12Resource*, const D3D12_TILED_RESOURCE_COORDINATE*, const D3D12_TILE_REGION_SIZE*, D3D12_TILE_MAPPING_FLAGS);
    void (STDCALLP ExecuteCommandLists)(ID3D12CommandQueue*, u32, ID3D12CommandList* const*);
    void (STDCALLP SetMarker)(ID3D12CommandQueue*, u32, const void*, u32);
    void (STDCALLP BeginEvent)(ID3D12CommandQueue*, u32, const void*, u32);
    void (STDCALLP EndEvent)(ID3D12CommandQueue*);
    i32 (STDCALLP Signal)(ID3D12CommandQueue*, ID3D12Fence*, u64);
    i32 (STDCALLP Wait)(ID3D12CommandQueue*, ID3D12Fence*, u64);
    i32 (STDCALLP GetTimestampFrequency)(ID3D12CommandQueue*, u64*);
    i32 (STDCALLP GetClockCalibration)(ID3D12CommandQueue*, u64*, u64*);
    D3D12_COMMAND_QUEUE_DESC* (STDCALLP GetDesc)(ID3D12CommandQueue*, D3D12_COMMAND_QUEUE_DESC*);
} ID3D12CommandQueueDispatchTable;
struct ID3D12CommandQueue { const ID3D12CommandQueueDispatchTable* DispatchTable; };

#define ID3D12CommandQueue_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12CommandQueue_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12CommandQueue_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12CommandQueue_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12CommandQueue_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12CommandQueue_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12CommandQueue_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12CommandQueue_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))
#define ID3D12CommandQueue_UpdateTileMappings(This, ...) ((This)->DispatchTable->UpdateTileMappings(This, __VA_ARGS__))
#define ID3D12CommandQueue_CopyTileMappings(This, ...) ((This)->DispatchTable->CopyTileMappings(This, __VA_ARGS__))
#define ID3D12CommandQueue_ExecuteCommandLists(This, ...) ((This)->DispatchTable->ExecuteCommandLists(This, __VA_ARGS__))
#define ID3D12CommandQueue_SetMarker(This, ...) ((This)->DispatchTable->SetMarker(This, __VA_ARGS__))
#define ID3D12CommandQueue_BeginEvent(This, ...) ((This)->DispatchTable->BeginEvent(This, __VA_ARGS__))
#define ID3D12CommandQueue_EndEvent(This, ...) ((This)->DispatchTable->EndEvent(This, __VA_ARGS__))
#define ID3D12CommandQueue_Signal(This, ...) ((This)->DispatchTable->Signal(This, __VA_ARGS__))
#define ID3D12CommandQueue_Wait(This, ...) ((This)->DispatchTable->Wait(This, __VA_ARGS__))
#define ID3D12CommandQueue_GetTimestampFrequency(This, ...) ((This)->DispatchTable->GetTimestampFrequency(This, __VA_ARGS__))
#define ID3D12CommandQueue_GetClockCalibration(This, ...) ((This)->DispatchTable->GetClockCalibration(This, __VA_ARGS__))
#define ID3D12CommandQueue_GetDesc(This, ...) ((This)->DispatchTable->GetDesc(This, __VA_ARGS__))

typedef struct ID3D12DeviceDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12Device *, const GUID *, void **);
    u32 (STDCALLP AddRef)(ID3D12Device *);
    u32 (STDCALLP Release)(ID3D12Device *);
    i32 (STDCALLP GetPrivateData)(ID3D12Device *, const GUID *, u32 *, void *);
    i32 (STDCALLP SetPrivateData)(ID3D12Device *, const GUID *, u32, const void *);
    i32 (STDCALLP SetPrivateDataInterface)(ID3D12Device*, const MS_GUID*, const IUnknown*);
    i32 (STDCALLP SetName)(ID3D12Device*, const u16*);
    u32 (STDCALLP GetNodeCount)(ID3D12Device*);
    i32 (STDCALLP CreateCommandQueue)(ID3D12Device*, const D3D12_COMMAND_QUEUE_DESC*, const MS_GUID*, void**);
    i32 (STDCALLP CreateCommandAllocator)(ID3D12Device*, D3D12_COMMAND_LIST_TYPE, const MS_GUID*, void**);
    i32 (STDCALLP CreateGraphicsPipelineState)(ID3D12Device*, const D3D12_GRAPHICS_PIPELINE_STATE_DESC*, const MS_GUID*, void**);
    i32 (STDCALLP CreateComputePipelineState)(ID3D12Device*, const D3D12_COMPUTE_PIPELINE_STATE_DESC*, const MS_GUID*, void**);
    i32 (STDCALLP CreateCommandList)(ID3D12Device*, u32, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator*, ID3D12PipelineState*, const MS_GUID*, void**);
    i32 (STDCALLP CheckFeatureSupport)(ID3D12Device*, D3D12_FEATURE, void*, u32);
    i32 (STDCALLP CreateDescriptorHeap)(ID3D12Device*, const D3D12_DESCRIPTOR_HEAP_DESC*, const MS_GUID*, void**);
    u32 (STDCALLP GetDescriptorHandleIncrementSize)(ID3D12Device*, D3D12_DESCRIPTOR_HEAP_TYPE);
    i32 (STDCALLP CreateRootSignature)(ID3D12Device*, u32, const void*, u64, const MS_GUID*, void**);
    void (STDCALLP CreateConstantBufferView)(ID3D12Device*, const D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
    void (STDCALLP CreateShaderResourceView)(ID3D12Device*, ID3D12Resource*, const D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
    void (STDCALLP CreateUnorderedAccessView)(ID3D12Device*, ID3D12Resource*, ID3D12Resource*, const D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
    void (STDCALLP CreateRenderTargetView)(ID3D12Device*, ID3D12Resource*, const D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
    void (STDCALLP CreateDepthStencilView)(ID3D12Device*, ID3D12Resource*, const D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
    void (STDCALLP CreateSampler)(ID3D12Device*, const D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE);
    void (STDCALLP CopyDescriptors)(ID3D12Device*, u32, const D3D12_CPU_DESCRIPTOR_HANDLE*, const u32*, u32, const D3D12_CPU_DESCRIPTOR_HANDLE*, const u32*, D3D12_DESCRIPTOR_HEAP_TYPE);
    void (STDCALLP CopyDescriptorsSimple)(ID3D12Device*, u32, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE);
    D3D12_RESOURCE_ALLOCATION_INFO* (STDCALLP GetResourceAllocationInfo)(ID3D12Device*, u32, u32, const D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO*);
    D3D12_HEAP_PROPERTIES* (STDCALLP GetCustomHeapProperties)(ID3D12Device*, u32, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES*);
    i32 (STDCALLP CreateCommittedResource)(ID3D12Device*, const D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, const D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, const D3D12_CLEAR_VALUE*, const MS_GUID*, void**);
    i32 (STDCALLP CreateHeap)(ID3D12Device*, const D3D12_HEAP_DESC*, const MS_GUID*, void**);
    i32 (STDCALLP CreatePlacedResource)(ID3D12Device*, ID3D12Heap*, u64, const D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, const D3D12_CLEAR_VALUE*, const MS_GUID*, void**);
    i32 (STDCALLP CreateReservedResource)(ID3D12Device *, const D3D12_RESOURCE_DESC *, D3D12_RESOURCE_STATES, const D3D12_CLEAR_VALUE*, const MS_GUID*, void**);
    i32 (STDCALLP CreateSharedHandle)(ID3D12Device*, ID3D12DeviceChild*, const MS_SECURITY_ATTRIBUTES*, u32 , u16*, void**);
    i32 (STDCALLP OpenSharedHandle)(ID3D12Device*, void*, const MS_GUID*, void**);
    i32 (STDCALLP OpenSharedHandleByName)(ID3D12Device*, u16*, u32, void**);
    i32 (STDCALLP MakeResident)(ID3D12Device*, u32, ID3D12Pageable* const*);
    i32 (STDCALLP Evict)(ID3D12Device*, u32, ID3D12Pageable* const*);
    i32 (STDCALLP CreateFence)(ID3D12Device*, u64, D3D12_FENCE_FLAGS, const MS_GUID*, void**);
    i32 (STDCALLP GetDeviceRemovedReason)(ID3D12Device*);
    void (STDCALLP GetCopyableFootprints)(ID3D12Device*, const D3D12_RESOURCE_DESC*, u32, u32, u64, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, u32*, u64*, u64*);
    i32 (STDCALLP CreateQueryHeap)(ID3D12Device*, const D3D12_QUERY_HEAP_DESC*, const MS_GUID*, void**);
    i32 (STDCALLP SetStablePowerState)(ID3D12Device*, i32);
    i32 (STDCALLP CreateCommandSignature)(ID3D12Device*, const D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature*, const MS_GUID*, void**);
    void (STDCALLP GetResourceTiling)(ID3D12Device*, ID3D12Resource*, u32*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, u32*, u32, D3D12_SUBRESOURCE_TILING*);
    i64 (STDCALLP GetAdapterLuid)(ID3D12Device*);
} ID3D12DeviceDispatchTable;
struct ID3D12Device { const ID3D12DeviceDispatchTable* DispatchTable; };

#define ID3D12Device_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12Device_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12Device_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12Device_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define ID3D12Device_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define ID3D12Device_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define ID3D12Device_SetName(This, ...) ((This)->DispatchTable->SetName(This, __VA_ARGS__))
#define ID3D12Device_GetNodeCount(This, ...) ((This)->DispatchTable->GetNodeCount(This, __VA_ARGS__))
#define ID3D12Device_CreateCommandQueue(This, ...) ((This)->DispatchTable->CreateCommandQueue(This, __VA_ARGS__))
#define ID3D12Device_CreateCommandAllocator(This, ...) ((This)->DispatchTable->CreateCommandAllocator(This, __VA_ARGS__))
#define ID3D12Device_CreateGraphicsPipelineState(This, ...) ((This)->DispatchTable->CreateGraphicsPipelineState(This, __VA_ARGS__))
#define ID3D12Device_CreateComputePipelineState(This, ...) ((This)->DispatchTable->CreateComputePipelineState(This, __VA_ARGS__))
#define ID3D12Device_CreateCommandList(This, ...) ((This)->DispatchTable->CreateCommandList(This, __VA_ARGS__))
#define ID3D12Device_CheckFeatureSupport(This, ...) ((This)->DispatchTable->CheckFeatureSupport(This, __VA_ARGS__))
#define ID3D12Device_CreateDescriptorHeap(This, ...) ((This)->DispatchTable->CreateDescriptorHeap(This, __VA_ARGS__))
#define ID3D12Device_GetDescriptorHandleIncrementSize(This, ...) ((This)->DispatchTable->GetDescriptorHandleIncrementSize(This, __VA_ARGS__))
#define ID3D12Device_CreateRootSignature(This, ...) ((This)->DispatchTable->CreateRootSignature(This, __VA_ARGS__))
#define ID3D12Device_CreateConstantBufferView(This, ...) ((This)->DispatchTable->CreateConstantBufferView(This, __VA_ARGS__))
#define ID3D12Device_CreateShaderResourceView(This, ...) ((This)->DispatchTable->CreateShaderResourceView(This, __VA_ARGS__))
#define ID3D12Device_CreateUnorderedAccessView(This, ...) ((This)->DispatchTable->CreateUnorderedAccessView(This, __VA_ARGS__))
#define ID3D12Device_CreateRenderTargetView(This, ...) ((This)->DispatchTable->CreateRenderTargetView(This, __VA_ARGS__))
#define ID3D12Device_CreateDepthStencilView(This, ...) ((This)->DispatchTable->CreateDepthStencilView(This, __VA_ARGS__))
#define ID3D12Device_CreateSampler(This, ...) ((This)->DispatchTable->CreateSampler(This, __VA_ARGS__))
#define ID3D12Device_CopyDescriptors(This, ...) ((This)->DispatchTable->CopyDescriptors(This, __VA_ARGS__))
#define ID3D12Device_CopyDescriptorsSimple(This, ...) ((This)->DispatchTable->CopyDescriptorsSimple(This, __VA_ARGS__))
#define ID3D12Device_GetResourceAllocationInfo(This, ...) ((This)->DispatchTable->GetResourceAllocationInfo(This, __VA_ARGS__))
#define ID3D12Device_GetCustomHeapProperties(This, ...) ((This)->DispatchTable->GetCustomHeapProperties(This, __VA_ARGS__))
#define ID3D12Device_CreateCommittedResource(This, ...) ((This)->DispatchTable->CreateCommittedResource(This, __VA_ARGS__))
#define ID3D12Device_CreateHeap(This, ...) ((This)->DispatchTable->CreateHeap(This, __VA_ARGS__))
#define ID3D12Device_CreatePlacedResource(This, ...) ((This)->DispatchTable->CreatePlacedResource(This, __VA_ARGS__))
#define ID3D12Device_CreateReservedResource(This, ...) ((This)->DispatchTable->CreateReservedResource(This, __VA_ARGS__))
#define ID3D12Device_CreateSharedHandle(This, ...) ((This)->DispatchTable->CreateSharedHandle(This, __VA_ARGS__))
#define ID3D12Device_OpenSharedHandle(This, ...) ((This)->DispatchTable->OpenSharedHandle(This, __VA_ARGS__))
#define ID3D12Device_OpenSharedHandleByName(This, ...) ((This)->DispatchTable->OpenSharedHandleByName(This, __VA_ARGS__))
#define ID3D12Device_MakeResident(This, ...) ((This)->DispatchTable->MakeResident(This, __VA_ARGS__))
#define ID3D12Device_Evict(This, ...) ((This)->DispatchTable->Evict(This, __VA_ARGS__))
#define ID3D12Device_CreateFence(This, ...) ((This)->DispatchTable->CreateFence(This, __VA_ARGS__))
#define ID3D12Device_GetDeviceRemovedReason(This, ...) ((This)->DispatchTable->GetDeviceRemovedReason(This, __VA_ARGS__))
#define ID3D12Device_GetCopyableFootprints(This, ...) ((This)->DispatchTable->GetCopyableFootprints(This, __VA_ARGS__))
#define ID3D12Device_CreateQueryHeap(This, ...) ((This)->DispatchTable->CreateQueryHeap(This, __VA_ARGS__))
#define ID3D12Device_SetStablePowerState(This, ...) ((This)->DispatchTable->SetStablePowerState(This, __VA_ARGS__))
#define ID3D12Device_CreateCommandSignature(This, ...) ((This)->DispatchTable->CreateCommandSignature(This, __VA_ARGS__))
#define ID3D12Device_GetResourceTiling(This, ...) ((This)->DispatchTable->GetResourceTiling(This, __VA_ARGS__))
#define ID3D12Device_GetAdapterLuid(This, ...) ((This)->DispatchTable->GetAdapterLuid(This, __VA_ARGS__))

typedef struct ID3D12DebugDispatchTable {
    i32 (STDCALLP QueryInterface)(ID3D12Debug *, const GUID *, void **);
    u32 (STDCALLP AddRef)(ID3D12Debug *);
    u32 (STDCALLP Release)(ID3D12Debug *);
    void (STDCALLP EnableDebugLayer)(ID3D12Debug *);
} ID3D12DebugDispatchTable;
struct ID3D12Debug { const ID3D12DebugDispatchTable *DispatchTable; };

#define ID3D12Debug_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define ID3D12Debug_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define ID3D12Debug_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define ID3D12Debug_EnableDebugLayer(This, ...) ((This)->DispatchTable->EnableDebugLayer(This, __VA_ARGS__))


typedef struct DXGI_RGB {
    float Red;
    float Green;
    float Blue;
} DXGI_RGB;

typedef struct DXGI_RGBA {
    float Red;
    float Green;
    float Blue;
    float Alpha;
} DXGI_RGBA;

typedef struct DXGI_GAMMA_CONTROL {
    DXGI_RGB Scale;
    DXGI_RGB Offset;
    DXGI_RGB GammaCurve[1025];
} DXGI_GAMMA_CONTROL;

typedef struct DXGI_GAMMA_CONTROL_CAPABILITIES {
    int ScaleAndOffsetSupported;
    float MaxConvertedValue;
    float MinConvertedValue;
    unsigned NumGammaControlPoints;
    float ControlPointPositions[1025];
} DXGI_GAMMA_CONTROL_CAPABILITIES;

typedef struct DXGI_RATIONAL {
    unsigned Numerator;
    unsigned Denominator;
} DXGI_RATIONAL;

typedef enum DXGI_MODE_SCANLINE_ORDER {
    DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED = 0,
    DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE = 1,
    DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2,
    DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3
} DXGI_MODE_SCANLINE_ORDER;

typedef enum DXGI_MODE_SCALING {
    DXGI_MODE_SCALING_UNSPECIFIED = 0,
    DXGI_MODE_SCALING_CENTERED = 1,
    DXGI_MODE_SCALING_STRETCHED = 2
} DXGI_MODE_SCALING;

typedef enum DXGI_MODE_ROTATION {
    DXGI_MODE_ROTATION_UNSPECIFIED = 0,
    DXGI_MODE_ROTATION_IDENTITY = 1,
    DXGI_MODE_ROTATION_ROTATE90 = 2,
    DXGI_MODE_ROTATION_ROTATE180 = 3,
    DXGI_MODE_ROTATION_ROTATE270 = 4
} DXGI_MODE_ROTATION;

typedef struct DXGI_MODE_DESC {
    unsigned Width;
    unsigned Height;
    DXGI_RATIONAL RefreshRate;
    DXGI_FORMAT Format;
    DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
    DXGI_MODE_SCALING Scaling;
} DXGI_MODE_DESC;

typedef struct DXGI_OUTPUT_DESC {
    unsigned short DeviceName[32];
    D3D12_RECT DesktopCoordinates;
    int AttachedToDesktop;
    DXGI_MODE_ROTATION Rotation;
    void *Monitor;
} DXGI_OUTPUT_DESC;

typedef struct DXGI_SURFACE_DESC {
    unsigned Width;
    unsigned Height;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
} DXGI_SURFACE_DESC;

typedef struct DXGI_MAPPED_RECT {
    int Pitch;
    unsigned char *pBits;
} DXGI_MAPPED_RECT;

typedef struct DXGI_FRAME_STATISTICS {
    unsigned PresentCount;
    unsigned PresentRefreshCount;
    unsigned SyncRefreshCount;
    long long SyncQPCTime;
    long long SyncGPUTime;
} DXGI_FRAME_STATISTICS;

typedef struct DXGI_ADAPTER_DESC {
    unsigned short Description[128];
    unsigned VendorId;
    unsigned DeviceId;
    unsigned SubSysId;
    unsigned Revision;
    unsigned long long DedicatedVideoMemory;
    unsigned long long DedicatedSystemMemory;
    unsigned long long SharedSystemMemory;
    long long AdapterLuid;
} DXGI_ADAPTER_DESC;

typedef struct DXGI_ADAPTER_DESC1 {
    unsigned short Description[128];
    unsigned VendorId;
    unsigned DeviceId;
    unsigned SubSysId;
    unsigned Revision;
    unsigned long long DedicatedVideoMemory;
    unsigned long long DedicatedSystemMemory;
    unsigned long long SharedSystemMemory;
    long long AdapterLuid;
    unsigned Flags;
} DXGI_ADAPTER_DESC1;

#define DXGI_USAGE_SHADER_INPUT 0x00000010UL
#define DXGI_USAGE_RENDER_TARGET_OUTPUT 0x00000020UL
#define DXGI_USAGE_BACK_BUFFER 0x00000040UL
#define DXGI_USAGE_SHARED 0x00000080UL
#define DXGI_USAGE_READ_ONLY 0x00000100UL
#define DXGI_USAGE_DISCARD_ON_PRESENT 0x00000200UL
#define DXGI_USAGE_UNORDERED_ACCESS 0x00000400UL
typedef unsigned DXGI_USAGE;

typedef enum DXGI_SWAP_EFFECT {
    DXGI_SWAP_EFFECT_DISCARD = 0,
    DXGI_SWAP_EFFECT_SEQUENTIAL = 1,
    DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL = 3,
    DXGI_SWAP_EFFECT_FLIP_DISCARD = 4
} DXGI_SWAP_EFFECT;

typedef struct DXGI_SWAP_CHAIN_DESC {
    DXGI_MODE_DESC BufferDesc;
    DXGI_SAMPLE_DESC SampleDesc;
    DXGI_USAGE BufferUsage;
    unsigned BufferCount;
    void *OutputWindow;
    int Windowed;
    DXGI_SWAP_EFFECT SwapEffect;
    unsigned Flags;
} DXGI_SWAP_CHAIN_DESC;

typedef enum DXGI_SCALING {
    DXGI_SCALING_STRETCH = 0,
    DXGI_SCALING_NONE = 1,
    DXGI_SCALING_ASPECT_RATIO_STRETCH = 2
} DXGI_SCALING;

typedef enum DXGI_ALPHA_MODE {
    DXGI_ALPHA_MODE_UNSPECIFIED = 0,
    DXGI_ALPHA_MODE_PREMULTIPLIED = 1,
    DXGI_ALPHA_MODE_STRAIGHT = 2,
    DXGI_ALPHA_MODE_IGNORE = 3,
    DXGI_ALPHA_MODE_FORCE_DWORD = 0xffffffff
} DXGI_ALPHA_MODE;

typedef struct DXGI_SWAP_CHAIN_DESC1 {
    unsigned Width;
    unsigned Height;
    DXGI_FORMAT Format;
    int Stereo;
    DXGI_SAMPLE_DESC SampleDesc;
    DXGI_USAGE BufferUsage;
    unsigned BufferCount;
    DXGI_SCALING Scaling;
    DXGI_SWAP_EFFECT SwapEffect;
    DXGI_ALPHA_MODE AlphaMode;
    unsigned Flags;
} DXGI_SWAP_CHAIN_DESC1;

typedef struct DXGI_SWAP_CHAIN_FULLSCREEN_DESC {
    DXGI_RATIONAL RefreshRate;
    DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
    DXGI_MODE_SCALING Scaling;
    int Windowed;
} DXGI_SWAP_CHAIN_FULLSCREEN_DESC;

typedef struct DXGI_PRESENT_PARAMETERS {
    unsigned DirtyRectsCount;
    D3D12_RECT *pDirtyRects;
    D3D12_RECT *pScrollRect;
    MS_POINT *pScrollOffset;
} DXGI_PRESENT_PARAMETERS;

typedef struct DXGI_MATRIX_3X2_F {
    float _11;
    float _12;
    float _21;
    float _22;
    float _31;
    float _32;
} DXGI_MATRIX_3X2_F;

typedef enum DXGI_COLOR_SPACE_TYPE {
    DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0,
    DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1,
    DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2,
    DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3,
    DXGI_COLOR_SPACE_RESERVED = 4,
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6,
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8,
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10,
    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11,
    DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13,
    DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15,
    DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16,
    DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17,
    DXGI_COLOR_SPACE_CUSTOM = 0xFFFFFFFF
} DXGI_COLOR_SPACE_TYPE;

typedef struct IDXGISwapChainDispatchTable {
    int (STDCALLP QueryInterface)(IDXGISwapChain *, const MS_GUID *, void **);
    unsigned (STDCALLP AddRef)(IDXGISwapChain *);
    unsigned (STDCALLP Release)(IDXGISwapChain *);
    int (STDCALLP SetPrivateData)(IDXGISwapChain *, const MS_GUID *, unsigned, const void *);
    int (STDCALLP SetPrivateDataInterface)(IDXGISwapChain *, const MS_GUID *, const IUnknown *);
    int (STDCALLP GetPrivateData)(IDXGISwapChain *, const MS_GUID *, unsigned *, void *);
    int (STDCALLP GetParent)(IDXGISwapChain *, const MS_GUID *, void **);
    int (STDCALLP GetDevice)(IDXGISwapChain *, const MS_GUID *, void **);
    int (STDCALLP Present)(IDXGISwapChain *, unsigned, unsigned);
    int (STDCALLP GetBuffer)(IDXGISwapChain *, unsigned, const MS_GUID *, void **);
    int (STDCALLP SetFullscreenState)(IDXGISwapChain *, int, IDXGIOutput *);
    int (STDCALLP GetFullscreenState)(IDXGISwapChain *, int *, IDXGIOutput **);
    int (STDCALLP GetDesc)(IDXGISwapChain *, DXGI_SWAP_CHAIN_DESC *);
    int (STDCALLP ResizeBuffers)(IDXGISwapChain *, unsigned, unsigned, unsigned, DXGI_FORMAT, unsigned);
    int (STDCALLP ResizeTarget)(IDXGISwapChain *, const DXGI_MODE_DESC *);
    int (STDCALLP GetContainingOutput)(IDXGISwapChain *, IDXGIOutput **);
    int (STDCALLP GetFrameStatistics)(IDXGISwapChain *, DXGI_FRAME_STATISTICS *);
    int (STDCALLP GetLastPresentCount)(IDXGISwapChain *, unsigned *);
} IDXGISwapChainDispatchTable;
struct IDXGISwapChain { const IDXGISwapChainDispatchTable *DispatchTable; };

#define IDXGISwapChain_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define IDXGISwapChain_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define IDXGISwapChain_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define IDXGISwapChain_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define IDXGISwapChain_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define IDXGISwapChain_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define IDXGISwapChain_GetParent(This, ...) ((This)->DispatchTable->GetParent(This, __VA_ARGS__))
#define IDXGISwapChain_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))
#define IDXGISwapChain_Present(This, ...) ((This)->DispatchTable->Present(This, __VA_ARGS__))
#define IDXGISwapChain_GetBuffer(This, ...) ((This)->DispatchTable->GetBuffer(This, __VA_ARGS__))
#define IDXGISwapChain_SetFullscreenState(This, ...) ((This)->DispatchTable->SetFullscreenState(This, __VA_ARGS__))
#define IDXGISwapChain_GetFullscreenState(This, ...) ((This)->DispatchTable->GetFullscreenState(This, __VA_ARGS__))
#define IDXGISwapChain_GetDesc(This, ...) ((This)->DispatchTable->GetDesc(This, __VA_ARGS__))
#define IDXGISwapChain_ResizeBuffers(This, ...) ((This)->DispatchTable->ResizeBuffers(This, __VA_ARGS__))
#define IDXGISwapChain_ResizeTarget(This, ...) ((This)->DispatchTable->ResizeTarget(This, __VA_ARGS__))
#define IDXGISwapChain_GetContainingOutput(This, ...) ((This)->DispatchTable->GetContainingOutput(This, __VA_ARGS__))
#define IDXGISwapChain_GetFrameStatistics(This, ...) ((This)->DispatchTable->GetFrameStatistics(This, __VA_ARGS__))
#define IDXGISwapChain_GetLastPresentCount(This, ...) ((This)->DispatchTable->GetLastPresentCount(This, __VA_ARGS__))

typedef struct IDXGISwapChain3DispatchTable {
    int (STDCALLP QueryInterface)(IDXGISwapChain3 *, const MS_GUID *, void **);
    unsigned (STDCALLP AddRef)(IDXGISwapChain3 *);
    unsigned (STDCALLP Release)(IDXGISwapChain3 *);
    int (STDCALLP SetPrivateData)(IDXGISwapChain3 *, const MS_GUID *, unsigned, const void *);
    int (STDCALLP SetPrivateDataInterface)(IDXGISwapChain3 *, const MS_GUID *, const IUnknown *);
    int (STDCALLP GetPrivateData)(IDXGISwapChain3 *, const MS_GUID *, unsigned *, void *);
    int (STDCALLP GetParent)(IDXGISwapChain3 *, const MS_GUID *, void **);
    int (STDCALLP GetDevice)(IDXGISwapChain3 *, const MS_GUID *, void **);
    int (STDCALLP Present)(IDXGISwapChain3 *, unsigned, unsigned);
    int (STDCALLP GetBuffer)(IDXGISwapChain3 *, unsigned, const MS_GUID *, void **);
    int (STDCALLP SetFullscreenState)(IDXGISwapChain3 *, int, IDXGIOutput *);
    int (STDCALLP GetFullscreenState)(IDXGISwapChain3 *, int *, IDXGIOutput **);
    int (STDCALLP GetDesc)(IDXGISwapChain3 *, DXGI_SWAP_CHAIN_DESC *);
    int (STDCALLP ResizeBuffers)(IDXGISwapChain3 *, unsigned, unsigned, unsigned, DXGI_FORMAT, unsigned);
    int (STDCALLP ResizeTarget)(IDXGISwapChain3 *, const DXGI_MODE_DESC *);
    int (STDCALLP GetContainingOutput)(IDXGISwapChain3 *, IDXGIOutput **);
    int (STDCALLP GetFrameStatistics)(IDXGISwapChain3 *, DXGI_FRAME_STATISTICS *);
    int (STDCALLP GetLastPresentCount)(IDXGISwapChain3 *, unsigned *);
    int (STDCALLP GetDesc1)(IDXGISwapChain3 *, DXGI_SWAP_CHAIN_DESC1 *);
    int (STDCALLP GetFullscreenDesc)(IDXGISwapChain3 *, DXGI_SWAP_CHAIN_FULLSCREEN_DESC *);
    int (STDCALLP GetHwnd)(IDXGISwapChain3 *, void **);
    int (STDCALLP GetCoreWindow)(IDXGISwapChain3 *, const MS_GUID *, void **);
    int (STDCALLP Present1)(IDXGISwapChain3 *, unsigned, unsigned, const DXGI_PRESENT_PARAMETERS *);
    int (STDCALLP IsTemporaryMonoSupported)(IDXGISwapChain3 *);
    int (STDCALLP GetRestrictToOutput)(IDXGISwapChain3 *, IDXGIOutput **);
    int (STDCALLP SetBackgroundColor)(IDXGISwapChain3 *, const DXGI_RGBA *);
    int (STDCALLP GetBackgroundColor)(IDXGISwapChain3 *, DXGI_RGBA *);
    int (STDCALLP SetRotation)(IDXGISwapChain3 *, DXGI_MODE_ROTATION);
    int (STDCALLP GetRotation)(IDXGISwapChain3 *, DXGI_MODE_ROTATION *);
    int (STDCALLP SetSourceSize)(IDXGISwapChain3 *, unsigned, unsigned);
    int (STDCALLP GetSourceSize)(IDXGISwapChain3 *, unsigned *, unsigned *);
    int (STDCALLP SetMaximumFrameLatency)(IDXGISwapChain3 *, unsigned );
    int (STDCALLP GetMaximumFrameLatency)(IDXGISwapChain3 *, unsigned *);
    void *(STDCALLP GetFrameLatencyWaitableObject)(IDXGISwapChain3 *);
    int (STDCALLP SetMatrixTransform)(IDXGISwapChain3 *, const DXGI_MATRIX_3X2_F *);
    int (STDCALLP GetMatrixTransform)(IDXGISwapChain3 *, DXGI_MATRIX_3X2_F *);
    unsigned (STDCALLP GetCurrentBackBufferIndex)(IDXGISwapChain3 *);
    int (STDCALLP CheckColorSpaceSupport)(IDXGISwapChain3 *, DXGI_COLOR_SPACE_TYPE, unsigned *);
    int (STDCALLP SetColorSpace1)(IDXGISwapChain3 *, DXGI_COLOR_SPACE_TYPE);
    int (STDCALLP ResizeBuffers1)(IDXGISwapChain3 *, unsigned, unsigned, unsigned, DXGI_FORMAT, unsigned, const unsigned *, IUnknown *const *);
} IDXGISwapChain3DispatchTable;
struct IDXGISwapChain3 { const IDXGISwapChain3DispatchTable *DispatchTable; };

#define IDXGISwapChain3_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define IDXGISwapChain3_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define IDXGISwapChain3_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define IDXGISwapChain3_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define IDXGISwapChain3_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define IDXGISwapChain3_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define IDXGISwapChain3_GetParent(This, ...) ((This)->DispatchTable->GetParent(This, __VA_ARGS__))
#define IDXGISwapChain3_GetDevice(This, ...) ((This)->DispatchTable->GetDevice(This, __VA_ARGS__))
#define IDXGISwapChain3_Present(This, ...) ((This)->DispatchTable->Present(This, __VA_ARGS__))
#define IDXGISwapChain3_GetBuffer(This, ...) ((This)->DispatchTable->GetBuffer(This, __VA_ARGS__))
#define IDXGISwapChain3_SetFullscreenState(This, ...) ((This)->DispatchTable->SetFullscreenState(This, __VA_ARGS__))
#define IDXGISwapChain3_GetFullscreenState(This, ...) ((This)->DispatchTable->GetFullscreenState(This, __VA_ARGS__))
#define IDXGISwapChain3_GetDesc(This, ...) ((This)->DispatchTable->GetDesc(This, __VA_ARGS__))
#define IDXGISwapChain3_ResizeBuffers(This, ...) ((This)->DispatchTable->ResizeBuffers(This, __VA_ARGS__))
#define IDXGISwapChain3_ResizeTarget(This, ...) ((This)->DispatchTable->ResizeTarget(This, __VA_ARGS__))
#define IDXGISwapChain3_GetContainingOutput(This, ...) ((This)->DispatchTable->GetContainingOutput(This, __VA_ARGS__))
#define IDXGISwapChain3_GetFrameStatistics(This, ...) ((This)->DispatchTable->GetFrameStatistics(This, __VA_ARGS__))
#define IDXGISwapChain3_GetLastPresentCount(This, ...) ((This)->DispatchTable->GetLastPresentCount(This, __VA_ARGS__))
#define IDXGISwapChain3_GetDesc1(This, ...) ((This)->DispatchTable->GetDesc1(This, __VA_ARGS__))
#define IDXGISwapChain3_GetFullscreenDesc(This, ...) ((This)->DispatchTable->GetFullscreenDesc(This, __VA_ARGS__))
#define IDXGISwapChain3_GetHwnd(This, ...) ((This)->DispatchTable->GetHwnd(This, __VA_ARGS__))
#define IDXGISwapChain3_GetCoreWindow(This, ...) ((This)->DispatchTable->GetCoreWindow(This, __VA_ARGS__))
#define IDXGISwapChain3_Present1(This, ...) ((This)->DispatchTable->Present1(This, __VA_ARGS__))
#define IDXGISwapChain3_IsTemporaryMonoSupported(This, ...) ((This)->DispatchTable->IsTemporaryMonoSupported(This, __VA_ARGS__))
#define IDXGISwapChain3_GetRestrictToOutput(This, ...) ((This)->DispatchTable->GetRestrictToOutput(This, __VA_ARGS__))
#define IDXGISwapChain3_SetBackgroundColor(This, ...) ((This)->DispatchTable->SetBackgroundColor(This, __VA_ARGS__))
#define IDXGISwapChain3_GetBackgroundColor(This, ...) ((This)->DispatchTable->GetBackgroundColor(This, __VA_ARGS__))
#define IDXGISwapChain3_SetRotation(This, ...) ((This)->DispatchTable->SetRotation(This, __VA_ARGS__))
#define IDXGISwapChain3_GetRotation(This, ...) ((This)->DispatchTable->GetRotation(This, __VA_ARGS__))
#define IDXGISwapChain3_SetSourceSize(This, ...) ((This)->DispatchTable->SetSourceSize(This, __VA_ARGS__))
#define IDXGISwapChain3_GetSourceSize(This, ...) ((This)->DispatchTable->GetSourceSize(This, __VA_ARGS__))
#define IDXGISwapChain3_SetMaximumFrameLatency(This, ...) ((This)->DispatchTable->SetMaximumFrameLatency(This, __VA_ARGS__))
#define IDXGISwapChain3_GetMaximumFrameLatency(This, ...) ((This)->DispatchTable->GetMaximumFrameLatency(This, __VA_ARGS__))
#define IDXGISwapChain3_GetFrameLatencyWaitableObject(This, ...) ((This)->DispatchTable->GetFrameLatencyWaitableObject(This, __VA_ARGS__))
#define IDXGISwapChain3_SetMatrixTransform(This, ...) ((This)->DispatchTable->SetMatrixTransform(This, __VA_ARGS__))
#define IDXGISwapChain3_GetMatrixTransform(This, ...) ((This)->DispatchTable->GetMatrixTransform(This, __VA_ARGS__))
#define IDXGISwapChain3_GetCurrentBackBufferIndex(This, ...) ((This)->DispatchTable->GetCurrentBackBufferIndex(This, __VA_ARGS__))
#define IDXGISwapChain3_CheckColorSpaceSupport(This, ...) ((This)->DispatchTable->CheckColorSpaceSupport(This, __VA_ARGS__))
#define IDXGISwapChain3_SetColorSpace1(This, ...) ((This)->DispatchTable->SetColorSpace1(This, __VA_ARGS__))
#define IDXGISwapChain3_ResizeBuffers1(This, ...) ((This)->DispatchTable->ResizeBuffers1(This, __VA_ARGS__))

typedef struct IDXGIFactory4DispatchTable {
    int (STDCALLP QueryInterface)(IDXGIFactory4 *, const MS_GUID *, void **);
    unsigned (STDCALLP AddRef)(IDXGIFactory4 *);
    unsigned (STDCALLP Release)(IDXGIFactory4 *);
    int (STDCALLP SetPrivateData)(IDXGIFactory4 *, const MS_GUID *, unsigned, const void *);
    int (STDCALLP SetPrivateDataInterface)(IDXGIFactory4 *, const MS_GUID *, const IUnknown *);
    int (STDCALLP GetPrivateData)(IDXGIFactory4 *, const MS_GUID *, unsigned *, void *);
    int (STDCALLP GetParent)(IDXGIFactory4 *, const MS_GUID *, void **);
    int (STDCALLP EnumAdapters)(IDXGIFactory4 *, unsigned, IDXGIAdapter **);
    int (STDCALLP MakeWindowAssociation)(IDXGIFactory4 *, void *, unsigned);
    int (STDCALLP GetWindowAssociation)(IDXGIFactory4 *, void **);
    int (STDCALLP CreateSwapChain)(IDXGIFactory4 *, IUnknown *, DXGI_SWAP_CHAIN_DESC *, IDXGISwapChain **);
    int (STDCALLP CreateSoftwareAdapter)(IDXGIFactory4 *, void *, IDXGIAdapter **);
    int (STDCALLP EnumAdapters1)(IDXGIFactory4 *, unsigned, IDXGIAdapter1 **);
    int (STDCALLP IsCurrent)(IDXGIFactory4 *);
    int (STDCALLP IsWindowedStereoEnabled)(IDXGIFactory4 *);
    int (STDCALLP CreateSwapChainForHwnd)(IDXGIFactory4 *, IUnknown *, void *, const DXGI_SWAP_CHAIN_DESC1 *, const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *, IDXGIOutput *, IDXGISwapChain1 **);
    int (STDCALLP CreateSwapChainForCoreWindow)(IDXGIFactory4 *, IUnknown *, IUnknown *, const DXGI_SWAP_CHAIN_DESC1 *, IDXGIOutput *, IDXGISwapChain1 **);
    int (STDCALLP GetSharedResourceAdapterLuid)(IDXGIFactory4 *, void *, long long *);
    int (STDCALLP RegisterStereoStatusWindow)(IDXGIFactory4 *, void *, unsigned, unsigned *);
    int (STDCALLP RegisterStereoStatusEvent)(IDXGIFactory4 *, void *, unsigned *);
    void (STDCALLP UnregisterStereoStatus)(IDXGIFactory4 *, unsigned);
    int (STDCALLP RegisterOcclusionStatusWindow)(IDXGIFactory4 *, void *, unsigned, unsigned *);
    int (STDCALLP RegisterOcclusionStatusEvent)(IDXGIFactory4 *, void *, unsigned *);
    void (STDCALLP UnregisterOcclusionStatus)(IDXGIFactory4 *, unsigned);
    int (STDCALLP CreateSwapChainForComposition)(IDXGIFactory4 *, IUnknown *, const DXGI_SWAP_CHAIN_DESC1 *, IDXGIOutput *, IDXGISwapChain1 **);
    unsigned (STDCALLP GetCreationFlags)(IDXGIFactory4 *);
    int (STDCALLP EnumAdapterByLuid)(IDXGIFactory4 *, long long, const MS_GUID *, void **);
    int (STDCALLP EnumWarpAdapter)(IDXGIFactory4 *, const MS_GUID *, void **);
} IDXGIFactory4DispatchTable;
struct IDXGIFactory4 { const IDXGIFactory4DispatchTable *DispatchTable; };

#define IDXGIFactory4_QueryInterface(This, ...) ((This)->DispatchTable->QueryInterface(This, __VA_ARGS__))
#define IDXGIFactory4_AddRef(This, ...) ((This)->DispatchTable->AddRef(This, __VA_ARGS__))
#define IDXGIFactory4_Release(This, ...) ((This)->DispatchTable->Release(This, __VA_ARGS__))
#define IDXGIFactory4_SetPrivateData(This, ...) ((This)->DispatchTable->SetPrivateData(This, __VA_ARGS__))
#define IDXGIFactory4_SetPrivateDataInterface(This, ...) ((This)->DispatchTable->SetPrivateDataInterface(This, __VA_ARGS__))
#define IDXGIFactory4_GetPrivateData(This, ...) ((This)->DispatchTable->GetPrivateData(This, __VA_ARGS__))
#define IDXGIFactory4_GetParent(This, ...) ((This)->DispatchTable->GetParent(This, __VA_ARGS__))
#define IDXGIFactory4_EnumAdapters(This, ...) ((This)->DispatchTable->EnumAdapters(This, __VA_ARGS__))
#define IDXGIFactory4_MakeWindowAssociation(This, ...) ((This)->DispatchTable->MakeWindowAssociation(This, __VA_ARGS__))
#define IDXGIFactory4_GetWindowAssociation(This, ...) ((This)->DispatchTable->GetWindowAssociation(This, __VA_ARGS__))
#define IDXGIFactory4_CreateSwapChain(This, ...) ((This)->DispatchTable->CreateSwapChain(This, __VA_ARGS__))
#define IDXGIFactory4_CreateSoftwareAdapter(This, ...) ((This)->DispatchTable->CreateSoftwareAdapter(This, __VA_ARGS__))
#define IDXGIFactory4_EnumAdapters1(This, ...) ((This)->DispatchTable->EnumAdapters1(This, __VA_ARGS__))
#define IDXGIFactory4_IsCurrent(This, ...) ((This)->DispatchTable->IsCurrent(This, __VA_ARGS__))
#define IDXGIFactory4_IsWindowedStereoEnabled(This, ...) ((This)->DispatchTable->IsWindowedStereoEnabled(This, __VA_ARGS__))
#define IDXGIFactory4_CreateSwapChainForHwnd(This, ...) ((This)->DispatchTable->CreateSwapChainForHwnd(This, __VA_ARGS__))
#define IDXGIFactory4_CreateSwapChainForCoreWindow(This, ...) ((This)->DispatchTable->CreateSwapChainForCoreWindow(This, __VA_ARGS__))
#define IDXGIFactory4_GetSharedResourceAdapterLuid(This, ...) ((This)->DispatchTable->GetSharedResourceAdapterLuid(This, __VA_ARGS__))
#define IDXGIFactory4_RegisterStereoStatusWindow(This, ...) ((This)->DispatchTable->RegisterStereoStatusWindow(This, __VA_ARGS__))
#define IDXGIFactory4_RegisterStereoStatusEvent(This, ...) ((This)->DispatchTable->RegisterStereoStatusEvent(This, __VA_ARGS__))
#define IDXGIFactory4_UnregisterStereoStatus(This, ...) ((This)->DispatchTable->UnregisterStereoStatus(This, __VA_ARGS__))
#define IDXGIFactory4_RegisterOcclusionStatusWindow(This, ...) ((This)->DispatchTable->RegisterOcclusionStatusWindow(This, __VA_ARGS__))
#define IDXGIFactory4_RegisterOcclusionStatusEvent(This, ...) ((This)->DispatchTable->RegisterOcclusionStatusEvent(This, __VA_ARGS__))
#define IDXGIFactory4_UnregisterOcclusionStatus(This, ...) ((This)->DispatchTable->UnregisterOcclusionStatus(This, __VA_ARGS__))
#define IDXGIFactory4_CreateSwapChainForComposition(This, ...) ((This)->DispatchTable->CreateSwapChainForComposition(This, __VA_ARGS__))
#define IDXGIFactory4_GetCreationFlags(This, ...) ((This)->DispatchTable->GetCreationFlags(This, __VA_ARGS__))
#define IDXGIFactory4_EnumAdapterByLuid(This, ...) ((This)->DispatchTable->EnumAdapterByLuid(This, __VA_ARGS__))
#define IDXGIFactory4_EnumWarpAdapter(This, ...) ((This)->DispatchTable->EnumWarpAdapter(This, __VA_ARGS__))


extern void* STDCALL LoadLibraryA(const char*);
extern void* STDCALL GetProcAddress(void*, const char*);

i32 _fltused;

static void (STDCALLP MsOutputDebugString)(const char*);
static void *(STDCALLP MsGetModuleHandle)(const char*);
static void (STDCALLP MsSleep)(u32);
static i32 (STDCALLP MsQueryPerformanceCounter)(i64*);
static i32 (STDCALLP MsQueryPerformanceFrequency)(i64*);
static void* (STDCALLP MsVirtualAlloc)(void*, u64, u32, u32);
static i32 (STDCALLP MsVirtualFree)(void*, u64, u32);
static void (STDCALLP MsExitProcess)(u32);
static void* (STDCALLP MsCreateEventEx)(MS_SECURITY_ATTRIBUTES*, const char*, u32, u32);
static u32 (STDCALLP MsWaitForSingleObject)(void*, u32);

static i32 (STDCALLP MsPeekMessage)(MS_MSG*, void*, u32, u32, u32);
static i64 (STDCALLP MsDispatchMessage)(const MS_MSG*);
static void (STDCALLP MsPostQuitMessage)(i32);
static i64 (STDCALLP MsDefWindowProc)(void*, u32, u64, i64);
static void* (STDCALLP MsLoadCursor)(void*, const char*);
static i16 (STDCALLP MsRegisterClass)(const MS_WNDCLASS*);
static void* (STDCALLP MsCreateWindowEx)(u32, const char*, const char*, u32, i32, i32, i32, i32, void*, void*, void*, void*);
static i32 (STDCALLP MsAdjustWindowRect)(MS_RECT*, u32, i32);
static i32 (__cdecl *MsWsprintf)(char*, const char*, ...);
static i32 (STDCALLP MsSetWindowText)(void*, const char*);
static i32 (STDCALLP MsSetProcessDPIAware)(void);
static i32 (STDCALLP MsGetClientRect)(void*, MS_RECT*);

static i32 (STDCALLP MsCreateDXGIFactory1)(const MS_GUID*, void**);

static i32 (STDCALLP D3D12CreateDevice)(IUnknown*, D3D_FEATURE_LEVEL, const MS_GUID*, void**);
static i32 (STDCALLP D3D12GetDebugInterface)(const MS_GUID*, void**);

static const MS_GUID IID_ID3D12Debug = { 0x344488b7,0x6846,0x474b,0xb9,0x89,0xf0,0x27,0x44,0x82,0x45,0xe0 };
static const MS_GUID IID_IDXGISwapChain = { 0x310d36a0,0xd2e7,0x4c0a,0xaa,0x04,0x6a,0x9d,0x23,0xb8,0x88,0x6a };
static const MS_GUID IID_IDXGISwapChain3 = { 0x94d99bdb,0xf1f8,0x4ab0,0xb2,0x36,0x7d,0xa0,0x17,0x0e,0xda,0xb1 };
static const MS_GUID IID_IDXGIFactory4 = { 0x1bc6ea02,0xef36,0x464f,0xbf,0x0c,0x21,0xca,0x39,0xe5,0x16,0x8a };
static const MS_GUID IID_ID3D12GraphicsCommandList = { 0x5b160d0f,0xac1b,0x4185,0x8b,0xa8,0xb3,0xae,0x42,0xa5,0xa4,0x55 };
static const MS_GUID IID_ID3D12CommandQueue = { 0x0ec870a6,0x5d7e,0x4c22,0x8c,0xfc,0x5b,0xaa,0xe0,0x76,0x16,0xed };
static const MS_GUID IID_ID3D12Device = { 0x189819f1,0x1db6,0x4b57,0xbe,0x54,0x18,0x21,0x33,0x9b,0x85,0xf7 };
static const MS_GUID IID_ID3D12DescriptorHeap = { 0x8efb471d,0x616c,0x4f49,0x90,0xf7,0x12,0x7b,0xb7,0x63,0xfa,0x51 };
static const MS_GUID IID_ID3D12Resource = { 0x696442be,0xa72e,0x4059,0xbc,0x79,0x5b,0x5c,0x98,0x04,0x0f,0xad };
static const MS_GUID IID_ID3D12RootSignature = { 0xc54a6b66,0x72df,0x4ee8,0x8b,0xe5,0xa9,0x46,0xa1,0x42,0x92,0x14 };
static const MS_GUID IID_ID3D12CommandAllocator = { 0x6102dee4,0xaf59,0x4b09,0xb9,0x99,0xb4,0x4d,0x73,0xf0,0x9b,0x24 };
static const MS_GUID IID_ID3D12Fence = { 0x0a753dcf,0xc4d8,0x4b91,0xad,0xf6,0xbe,0x5a,0x60,0xd9,0x5a,0x76 };
static const MS_GUID IID_ID3D12PipelineState = { 0x765a30f3,0xf624,0x4c6f,0xa8,0x28,0xac,0xe9,0x48,0x62,0x24,0x45 };

#define VHR(r) if (r < 0) { Assert(0); }

static struct
{
    u32 BackBufferResolution[2];
    u32 BackBufferIndex;
    u32 FrameIndex;
    u32 DescriptorSize;
    u32 RTVDescriptorSize;
    D3D12_CPU_DESCRIPTOR_HANDLE RTVHeapStart;
    D3D12_CPU_DESCRIPTOR_HANDLE DSVHeapStart;
    ID3D12Device* Device;
    ID3D12CommandQueue* CmdQueue;
    ID3D12CommandAllocator* CmdAlloc[2];
    ID3D12GraphicsCommandList* CmdList;
    ID3D12Resource* SwapBuffers[4];
    ID3D12Resource* DepthStencilImage;
    IDXGIFactory4* GiFactory;
    IDXGISwapChain3* SwapChain;
    ID3D12DescriptorHeap* RTVHeap;
    ID3D12DescriptorHeap* DSVHeap;
    u64 CPUCompletedFrames;
    ID3D12Fence* FrameFence;
    void* FrameFenceEvent;
    D3D12_VIEWPORT Viewport;
    D3D12_RECT Scissor;
    i64 Frequency;
    i64 StartCounter;
    void* Window;
    double FrameTime;
    float FrameDeltaTime;
} G;

static double GetTime(void)
{
    i64 Counter;
    MsQueryPerformanceCounter(&Counter);
    return (Counter - G.StartCounter) / (double)G.Frequency;
}

static i64 STDCALL ProcessWindowMessage(void* Window, u32 Message, u64 WParam, i64 LParam)
{
    switch (Message)
    {
        case MS_WM_KEYDOWN:
            if (WParam == MS_VK_ESCAPE)
            {
                MsPostQuitMessage(0);
                return 0;
            }
            break;
        case MS_WM_DESTROY:
            MsPostQuitMessage(0);
            return 0;
    }
    return MsDefWindowProc(Window, Message, WParam, LParam);
}

static void* CreateWindow(u32 ResX, u32 ResY)
{
    MS_WNDCLASS Winclass = { 0 };
    Winclass.lpfnWndProc = ProcessWindowMessage;
    Winclass.hInstance = MsGetModuleHandle(NULL);
    Winclass.hCursor = MsLoadCursor(NULL, MS_IDC_ARROW);
    Winclass.lpszClassName = "eneida";
    if (!MsRegisterClass(&Winclass))
    {
        Assert(0);
    }

    MS_RECT Rect = { 0, 0, (i32)ResX, (i32)ResY };
    if (!MsAdjustWindowRect(&Rect, MS_WS_OVERLAPPED | MS_WS_SYSMENU | MS_WS_CAPTION | MS_WS_MINIMIZEBOX, 0))
    {
        Assert(0);
    }

    void* Window = MsCreateWindowEx(
            0, "eneida", "eneida",
            MS_WS_OVERLAPPED | MS_WS_SYSMENU | MS_WS_CAPTION | MS_WS_MINIMIZEBOX | MS_WS_VISIBLE,
            MS_CW_USEDEFAULT, MS_CW_USEDEFAULT,
            Rect.right - Rect.left, Rect.bottom - Rect.top,
            NULL, NULL, NULL, 0);
    Assert(Window);
    return Window;
}

static void UpdateFrameTime(void)
{
    static double PrevTime = -1.0;
    static double PrevFPSTime = 0.0;
    static u32 FPSFrame = 0;

    if (PrevTime < 0.0)
    {
        PrevTime = GetTime();
        PrevFPSTime = PrevTime;
    }

    G.FrameTime = GetTime();
    G.FrameDeltaTime = (float)(G.FrameTime - PrevTime);
    PrevTime = G.FrameTime;

    if ((G.FrameTime - PrevFPSTime) >= 1.0)
    {
        double FPS = FPSFrame / (G.FrameTime - PrevFPSTime);
        double MicroSeconds = (1.0 / FPS) * 1000000.0;
        char Text[256];
        MsWsprintf(Text, "[%d fps  %d us] %s", (i32)FPS, (i32)MicroSeconds, "eneida");
        MsSetWindowText(G.Window, Text);
        PrevFPSTime = G.FrameTime;
        FPSFrame = 0;
    }
    FPSFrame++;
}

static void Present(void)
{
    Assert(G.CmdQueue);

    IDXGISwapChain3_Present(G.SwapChain, 0, 0);
    ID3D12CommandQueue_Signal(G.CmdQueue, G.FrameFence, ++G.CPUCompletedFrames);

    const u64 GPUCompletedFrames = ID3D12Fence_GetCompletedValue(G.FrameFence);

    if ((G.CPUCompletedFrames - GPUCompletedFrames) >= 2)
    {
        ID3D12Fence_SetEventOnCompletion(G.FrameFence, GPUCompletedFrames + 1, G.FrameFenceEvent);
        MsWaitForSingleObject(G.FrameFenceEvent, MS_INFINITE);
    }

    G.BackBufferIndex = IDXGISwapChain3_GetCurrentBackBufferIndex(G.SwapChain);
    G.FrameIndex = !G.FrameIndex;
}

static int InitializeD3D12(void)
{
    Assert(G.Device == NULL);
    Assert(G.Window != NULL);

    VHR(MsCreateDXGIFactory1(&IID_IDXGIFactory4, &G.GiFactory));

#ifdef _DEBUG
    ID3D12Debug* Dbg = NULL;
    D3D12GetDebugInterface(&IID_ID3D12Debug, &Dbg);
    if (Dbg)
    {
        ID3D12Debug_EnableDebugLayer(Dbg);
        ID3D12Debug_Release(Dbg);
    }
#endif
    if (D3D12CreateDevice(NULL, D3D_FEATURE_LEVEL_12_0, &IID_ID3D12Device, &G.Device) != 0)
    {
        return 0;
    }

    D3D12_COMMAND_QUEUE_DESC CmdQueueDesc =
    {
        .Flags = D3D12_COMMAND_QUEUE_FLAG_NONE, .Priority = D3D12_COMMAND_QUEUE_PRIORITY_NORMAL, .Type = D3D12_COMMAND_LIST_TYPE_DIRECT
    };
    VHR(ID3D12Device_CreateCommandQueue(G.Device, &CmdQueueDesc, &IID_ID3D12CommandQueue, &G.CmdQueue));

    DXGI_SWAP_CHAIN_DESC SwapChainDesc =
    {
        .BufferCount = 4, .BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM, .BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT,
        .OutputWindow = G.Window, .SampleDesc.Count = 1, .SwapEffect = DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL, .Windowed = 1
    };
    IDXGISwapChain* TempSwapChain;
    VHR(IDXGIFactory4_CreateSwapChain(G.GiFactory, (IUnknown*)G.CmdQueue, &SwapChainDesc, &TempSwapChain));
    VHR(IDXGISwapChain_QueryInterface(TempSwapChain, &IID_IDXGISwapChain3, &G.SwapChain));
    IDXGISwapChain_Release(TempSwapChain);

    for (u32 Idx = 0; Idx < 2; ++Idx)
    {
        VHR(ID3D12Device_CreateCommandAllocator(G.Device, D3D12_COMMAND_LIST_TYPE_DIRECT, &IID_ID3D12CommandAllocator, &G.CmdAlloc[Idx]));
    }

    MS_RECT Rect;
    MsGetClientRect(G.Window, &Rect);
    G.BackBufferResolution[0] = (u32)(Rect.right - Rect.left);
    G.BackBufferResolution[1] = (u32)(Rect.bottom - Rect.top);

    G.DescriptorSize = ID3D12Device_GetDescriptorHandleIncrementSize(G.Device, D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);
    G.RTVDescriptorSize = ID3D12Device_GetDescriptorHandleIncrementSize(G.Device, D3D12_DESCRIPTOR_HEAP_TYPE_RTV);

    // RTV descriptor heap
    {
        D3D12_DESCRIPTOR_HEAP_DESC HeapDesc =
        {
            .NumDescriptors = 4, .Type = D3D12_DESCRIPTOR_HEAP_TYPE_RTV, .Flags = D3D12_DESCRIPTOR_HEAP_FLAG_NONE
        };
        VHR(ID3D12Device_CreateDescriptorHeap(G.Device, &HeapDesc, &IID_ID3D12DescriptorHeap, &G.RTVHeap));
        ID3D12DescriptorHeap_GetCPUDescriptorHandleForHeapStart(G.RTVHeap, &G.RTVHeapStart);

        D3D12_CPU_DESCRIPTOR_HANDLE Handle = G.RTVHeapStart;

        for (u32 Idx = 0; Idx < 4; ++Idx)
        {
            VHR(IDXGISwapChain3_GetBuffer(G.SwapChain, Idx, &IID_ID3D12Resource, &G.SwapBuffers[Idx]));

            ID3D12Device_CreateRenderTargetView(G.Device, G.SwapBuffers[Idx], NULL, Handle);
            Handle.ptr += G.RTVDescriptorSize;
        }
    }
    // depth-stencil image, view and heap
    {
        D3D12_DESCRIPTOR_HEAP_DESC HeapDesc =
        {
            .NumDescriptors = 1, .Type = D3D12_DESCRIPTOR_HEAP_TYPE_DSV, .Flags = D3D12_DESCRIPTOR_HEAP_FLAG_NONE
        };
        VHR(ID3D12Device_CreateDescriptorHeap(G.Device, &HeapDesc, &IID_ID3D12DescriptorHeap, &G.DSVHeap));
        ID3D12DescriptorHeap_GetCPUDescriptorHandleForHeapStart(G.DSVHeap, &G.DSVHeapStart);

        D3D12_CLEAR_VALUE ClearValue =
        {
            .Format = DXGI_FORMAT_D32_FLOAT, .DepthStencil.Depth = 1.0f, .DepthStencil.Stencil = 0
        };
        D3D12_HEAP_PROPERTIES HeapProps =
        {
            .Type = D3D12_HEAP_TYPE_DEFAULT
        };
        D3D12_RESOURCE_DESC ImageDesc =
        {
            .Dimension = D3D12_RESOURCE_DIMENSION_TEXTURE2D, .Width = G.BackBufferResolution[0], .Height = G.BackBufferResolution[1],
            .DepthOrArraySize = 1, .MipLevels = 1, .Format = DXGI_FORMAT_D32_FLOAT, .SampleDesc.Count = 1,
            .Layout = D3D12_TEXTURE_LAYOUT_UNKNOWN, .Flags = D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL
        };
        VHR(ID3D12Device_CreateCommittedResource(G.Device, &HeapProps, D3D12_HEAP_FLAG_NONE, &ImageDesc,
                    D3D12_RESOURCE_STATE_DEPTH_WRITE, &ClearValue, &IID_ID3D12Resource, &G.DepthStencilImage));

        D3D12_DEPTH_STENCIL_VIEW_DESC ViewDesc =
        {
            .Format = DXGI_FORMAT_D32_FLOAT, .ViewDimension = D3D12_DSV_DIMENSION_TEXTURE2D, .Flags = D3D12_DSV_FLAG_NONE
        };
        ID3D12Device_CreateDepthStencilView(G.Device, G.DepthStencilImage, &ViewDesc, G.DSVHeapStart);
    }
    VHR(ID3D12Device_CreateFence(G.Device, 0, D3D12_FENCE_FLAG_NONE, &IID_ID3D12Fence, &G.FrameFence));

    G.FrameFenceEvent = MsCreateEventEx(NULL, NULL, 0, MS_EVENT_ALL_ACCESS);
    Assert(G.FrameFenceEvent != NULL);

    VHR(ID3D12Device_CreateCommandList(G.Device, 1, D3D12_COMMAND_LIST_TYPE_DIRECT, G.CmdAlloc[0], NULL,
                &IID_ID3D12GraphicsCommandList, &G.CmdList));

    G.Viewport.TopLeftX = 0.0f;
    G.Viewport.TopLeftY = 0.0f;
    G.Viewport.Width = (float)G.BackBufferResolution[0];
    G.Viewport.Height = (float)G.BackBufferResolution[1];
    G.Viewport.MinDepth = 0.0f;
    G.Viewport.MaxDepth = 1.0f;

    G.Scissor.left = 0;
    G.Scissor.top = 0;
    G.Scissor.right = G.BackBufferResolution[0];
    G.Scissor.bottom = G.BackBufferResolution[1];

    ID3D12GraphicsCommandList_Close(G.CmdList);
    return 1;
}

static void Update(void)
{
    ID3D12CommandAllocator* CmdAlloc = G.CmdAlloc[G.FrameIndex];
    ID3D12CommandAllocator_Reset(CmdAlloc);

    ID3D12GraphicsCommandList* CmdList = G.CmdList;

    ID3D12GraphicsCommandList_Reset(CmdList, CmdAlloc, NULL);
    ID3D12GraphicsCommandList_RSSetViewports(CmdList, 1, &G.Viewport);
    ID3D12GraphicsCommandList_RSSetScissorRects(CmdList, 1, &G.Scissor);

    D3D12_RESOURCE_BARRIER Barrier =
    {
        .Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION, .Transition.pResource = G.SwapBuffers[G.BackBufferIndex],
        .Transition.StateBefore = D3D12_RESOURCE_STATE_PRESENT, .Transition.StateAfter = D3D12_RESOURCE_STATE_RENDER_TARGET
    };
    ID3D12GraphicsCommandList_ResourceBarrier(CmdList, 1, &Barrier);

    D3D12_CPU_DESCRIPTOR_HANDLE RTVHandle = G.RTVHeapStart;
    RTVHandle.ptr += G.BackBufferIndex * G.RTVDescriptorSize;

    ID3D12GraphicsCommandList_OMSetRenderTargets(CmdList, 1, &RTVHandle, 0, &G.DSVHeapStart);

    const float ClearColor[] = { 0.0f, 0.2f, 0.4f, 1.0f };
    ID3D12GraphicsCommandList_ClearRenderTargetView(CmdList, RTVHandle, ClearColor, 0, NULL);
    ID3D12GraphicsCommandList_ClearDepthStencilView(CmdList, G.DSVHeapStart, D3D12_CLEAR_FLAG_DEPTH, 1.0f, 0, 0, NULL);

    Barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_RENDER_TARGET;
    Barrier.Transition.StateAfter = D3D12_RESOURCE_STATE_PRESENT;
    ID3D12GraphicsCommandList_ResourceBarrier(CmdList, 1, &Barrier);

    ID3D12GraphicsCommandList_Close(CmdList);

    ID3D12CommandQueue_ExecuteCommandLists(G.CmdQueue, 1, (ID3D12CommandList**)&CmdList);
}

static int Run(void)
{
    MsQueryPerformanceCounter(&G.StartCounter);
    MsQueryPerformanceFrequency(&G.Frequency);
    MsSetProcessDPIAware();

    G.Window = CreateWindow(1920, 1080);

    if (!InitializeD3D12())
    {
        // TODO: Add MessageBox
        return 1;
    }

    for (;;)
    {
        MS_MSG Message = { 0 };
        if (MsPeekMessage(&Message, 0, 0, 0, MS_PM_REMOVE))
        {
            MsDispatchMessage(&Message);
            if (Message.message == MS_WM_QUIT)
            {
                break;
            }
        }
        else
        {
            UpdateFrameTime();
            Update();
            Present();
        }
    }

    //ex.shutdown(s.dx_context);
    //dx12_destroy_context(s.dx_context);
    return 0;
}

void Start(void)
{
    void* Kernel32DLL = LoadLibraryA("kernel32.dll");
    MsOutputDebugString = GetProcAddress(Kernel32DLL, "OutputDebugStringA");
    MsGetModuleHandle = GetProcAddress(Kernel32DLL, "GetModuleHandleA");
    MsSleep = GetProcAddress(Kernel32DLL, "Sleep");
    MsQueryPerformanceCounter = GetProcAddress(Kernel32DLL, "QueryPerformanceCounter");
    MsQueryPerformanceFrequency = GetProcAddress(Kernel32DLL, "QueryPerformanceFrequency");
    MsVirtualAlloc = GetProcAddress(Kernel32DLL, "VirtualAlloc");
    MsVirtualFree = GetProcAddress(Kernel32DLL, "VirtualFree");
    MsExitProcess = GetProcAddress(Kernel32DLL, "ExitProcess");
    MsCreateEventEx = GetProcAddress(Kernel32DLL, "CreateEventExA");
    MsWaitForSingleObject = GetProcAddress(Kernel32DLL, "WaitForSingleObject");

    void* User32DLL = LoadLibraryA("user32.dll");
    MsPeekMessage = GetProcAddress(User32DLL, "PeekMessageA");
    MsDispatchMessage = GetProcAddress(User32DLL, "DispatchMessageA");
    MsPostQuitMessage = GetProcAddress(User32DLL, "PostQuitMessage");
    MsDefWindowProc = GetProcAddress(User32DLL, "DefWindowProcA");
    MsLoadCursor = GetProcAddress(User32DLL, "LoadCursorA");
    MsRegisterClass = GetProcAddress(User32DLL, "RegisterClassA");
    MsCreateWindowEx = GetProcAddress(User32DLL, "CreateWindowExA");
    MsAdjustWindowRect = GetProcAddress(User32DLL, "AdjustWindowRect");
    MsWsprintf = GetProcAddress(User32DLL, "wsprintfA");
    MsSetWindowText = GetProcAddress(User32DLL, "SetWindowTextA");
    MsSetProcessDPIAware = GetProcAddress(User32DLL, "SetProcessDPIAware");
    MsGetClientRect = GetProcAddress(User32DLL, "GetClientRect");

    void* D3D12DLL = LoadLibraryA("d3d12.dll");
    if (!D3D12DLL)
    {
        // TODO: Add MessageBox
        MsExitProcess(255);
    }
    D3D12CreateDevice = GetProcAddress(D3D12DLL, "D3D12CreateDevice");
    D3D12GetDebugInterface = GetProcAddress(D3D12DLL, "D3D12GetDebugInterface");

    void* DXGIDLL = LoadLibraryA("dxgi.dll");
    MsCreateDXGIFactory1 = GetProcAddress(DXGIDLL, "CreateDXGIFactory1");

    MsExitProcess(Run());
}
